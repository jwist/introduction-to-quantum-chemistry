%!PS-Adobe-3.1 EPSF-3.0%%Title: angulo_solido_diferencial.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: luca%%CreationDate: 2/13/06%%BoundingBox: 0 0 464 276%%HiResBoundingBox: 0 0 463.7842 275.0235%%CropBox: 0 0 463.7842 275.0235%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 7730 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1DFFFD07A8FFFF7D7DFFA8A87DA87DA8A8FD6AFFA8A87DFFA8FD%05FFA8FF2727FD06FFFD04A87DA8A8FD62FFA8A8A8FD07FFA8FFFFFFA8F8%F8A8FD0AFFA8A87DA8FD5DFFA8A87DA8FD08FFA8FD04FF52F8F852FD09FF%A8FFFFFFA8A87DFD5AFFA8A8A8FD0FFFA87DA8FD0BFFA8FD05FF7DA8FD56%FFA87DA8FD08FFA8A8A8FD07FFA8FD0DFFA8FD05FFA8A8A8FD53FFA8A8FD%09FF7D7DFD05FFA8527DFFA8A8FFFFFFA8FFFFFFA8FD05FFA8FD06FFA87D%FD50FFA87DA8FFFFA85252A8FF7D527D527D52527DA8FF27A827A8A8A8FD%04FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA87DA8FD4DFFA8A8FFFFA8%FF7DF87DFFFF52527D27A8F82752FFFF527D52A8FFA8FD0DFF7DA8A8FFFF%FFA8FFFFFF7DFD4CFFA8A8A8FFA8FFFF5252FFFFFF5227FD04522752FFFF%52A852FFA8A8FD0DFF2752FF52FFFFFFA8FFA8FF7DA8FD49FF7D52277DFF%FFA8FF7DA8FFFFA8527DA852FD047DFFFFFF52A8FFA8A8FD0BFF7D52F8A8%7D277DFD07FF7DA8FD47FF7DA827F827A8A8A87DA8A8A87DA87DFD07A87D%FD05A87D7DA8FFA8FD07FF7D277D27FD0452A8FD07FF7DA8FD45FF7DA8A8%2752A8FD18FFA8A87DFD04A8FD04FF7D275227A8525252FD07FFA8FFA8A8%FD43FFA8A8FFFFF8F87DFD17FFA8A8FFFFFD04A87DA8A8A87D7D7DA8FFA8%27FFA8FFFFFFA8FFA8FFFFFF7DA8FD41FFA8A8FFFFFF7DA8A87DFFA8FD05%FFA8FD0EFFA87DFD04A8FFFFFFA8FFA8FFFFFFA8FFA87DFFFFA8FFA8FD07%FF7DFD40FFA87DA8FD06FFA87DFFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%FFFFA8FFA8A8FFFFFFA87DA8FFFFFD05A8FFA8A87D7D522752FD09FF7DFD%3FFFA8A8FD08FFA87DFD0DFFA8FFFFFFA8FFFFA8A8FD05FF7DA8A8FFFFFF%A8A852FD047DA85252A8FD05FFA87DA87D7DFD3DFFA87DFD0AFFA87DFD13%FFA8A8FD06FFA87DFD04FFA8527DFFFFFF7DFFA852FD05FF52F852A827A8%FD3CFF7DFD0CFFA87DFFA8FD11FFA8FD07FFA8A8FFFFA8A8FF7DFFFF7DFF%FFFF52A8FFFFA852275252A827A8FD3BFF7DA8FD0DFFA87DFD11FFA8A8FD%04FFA8A8FFFF7DA8FF7DA8FF527D7DFD04FFA852FFFFFD0552A852A8A8FD%3AFFA8FD0FFFA87DFD11FFA8FFFFFFA87D7DA8FFFFA8A8A8FFFFFF27FD06%FF7DFFFF525227A87D7D7DFF7DFD39FFA8A8FD10FFA87DFD05FFA8A87DFD%07FFA8A8FFFFFF7D527D52FFFFA87DFFFFFF7D7DFD04FFA87D27FFFFFFA8%FFFFFFA8FFFFA87DFD38FF7DFD0FFFA8FFFFA87DFD04FF7DF852A8FD07FF%A8FFFFFF527D7D7DFFFF7DFFFFFF7DFFFD057D5252A8FD0BFFA8A8FD36FF%7DA8FD10FFA8FFFFA87DFFFFFF2752FD08FFA8A8FFFFFFA8527D7DFF7DFF%FFFF7DFFA87D7DFFA8A8A8FFA8FD0BFFA8A8FD0AFFA87DA87DFD06FFA8FD%04FFA852A87DA8A8FF7DFD04FF7D7DFFFFFFA87DA8FFA852FFA8A8A8FFFF%A8FD10FFA8FD05FFA8FFFF52A8FD09FFA8FD04FFA8A8FFA8A8FFFF7DFFA8%A8FFFFA8A8A8FD0FFF7DFD09FFA8527DA827FFFFFFA8FFA87DA8527DFF27%5252527D7D52FF527D7D7D5252527DFF5252A8FF5252A852FF52FFA8A8FD%16FFA87DFD0BFFA8A8FD07FF7DFFFF7DA8A8A8FFFF7DA8FD11FFA8A8FD08%FF52F8525227A8A8F827A8A8527D27FF2727527D52FF5227A827A87DF827%275227A8527DA852F8522752A852FF7DFD18FFA87DFD0BFFA8FD06FFA8A8%FF7DA8A8A8FFFF7DFD07FFA8FD0BFFA8A8FD08FF7D7D52FF52A8FFFFA8FF%FF7D7DFFFF7D52A87DA8A8FD047DFFA87D527D7D7DA8A8A8FF7D7DA8527D%FF52A8A8A8FD0FFFA8FD08FFA87DFD05FFA8FFA8FF7DA8A8FFA8FFFFA87D%FFA8A87DFFFFA87DFD07FFA8FD0DFF7DFD13FFA8FD08FFA8A8FFA8FD0FFF%7DFFA8FFFF7DFD13FFA8FFFFFFA8A8A87D52FD09A87DFD05A852FF7D7D7D%A87D7D7DFD16FFA8A8FD32FFA8A8FD0CFFA8FFA8A87DA8A8A87DA8A8FFA8%FFFFA87DFD07FFA8FD05FF7DFFA87D7DA87D7DA8A87DA8A8A87DA8A8FFA8%FD0DFFA8A8FD32FFA8A8FD09FFFD04A87DA8A8A87DA8FD0AFF7DFD07FFA8%FFFFFFA8A8A87DA8FF7DFD09FFA8FFA8A87DA8A8FFA8FD09FFA8FD14FFA8%A8FD1CFF7DFD07FF7DA87DA8A8FD05FFA8FFFD05A8FD06FFA87DFD05FFA8%A8FFFFA8A8A87D7DA87DFD0FFFA8FF7DA87DA8A8FD05FFA8A8FD14FF527D%FFFF7DA8FFFFFFA87DA8FFFF52A87DA8FFA852FFA8FD07FFA8FD04FFA8A8%A8FD0FFFA8FFA8A8A8FD05FF7DFD05FFA8FFFFA8A87D7DA8A8FD15FFA8A8%7DFD05FFA8FD0FFFA8FFFF7D527DA8A8527D527D52FF52527DFF527D5252%7DFF277D7D52FD07FF7DFFFFA87DA8A8FD0BFFA8FD07FFA8A87DA8A8FFFF%FF7DFFFFFFA8A8FFA87D5252A8FD12FFA8FD07FFA8A87DFFFFA8A8FD0CFF%A8F827A8FFF8A8FFFF7DFD0527A87D52A852F8527D52A85227525227A8FD%06FFFD04A8FD0DFFA8FD0BFFFD04A8FFFF7DFFFFFFA8FF52527DFD1EFFA8%7DFFA8FD0FFFA8FFA87DFFFFFFA87D7D527D52FF7DA8FF7D52A87DA8FF7D%52A8527DFD07FF7DA8A8FD0FFFA8FD0DFFA8A8A87D52FFA8FF52277DFD15%FFA8FD0BFF7D7DA8FD28FFA8FD08FF7DFD23FFA87DA85252A8FD20FFA8FF%FF7DFD32FFA8FD11FFA8FD12FFA827277DA8A8FFFFFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8F8F8527DA8FD31FFA8FD%22FFFD04A87D7D52FD047DFD11A852FD07A87D7DA8F8F82727A8FD31FF52%FD11FFA8FD0DFFA8A87DA8A8FFFFFFA8A87D7D7DA8A8FFA8FD0DFF7D52A8%FD06FF7DA8FF527DA87DA8FD31FFA87DFD0FFFA8FD0BFFA8A87DA8A8FD09%FFA8A87DA87DA8A8FD0BFF7D525252FD04FFA8A8A8FFFFFFA8A8A8FD32FF%7DFF7DA8A8FD15FFA8A87DA8A8FD0DFFA8FFA8A87DA87DFD04A8FD06FF52%527D27A8A8A87DA8FD04FF7DA8FFA8A8FD31FFA8FFFFA8A87DFD0DFFA8A8%FFFFFFA87DA8A8FD13FFA8FFFD09A8FFFFFF7D2727527DA8A8FFFFFFA8A8%7DFFFFFF7DFD32FF7DFD05FF7DA87DA8A8FD07FFA852F87D7DA8A8FD19FF%FD04A87DA8A8A87DA87DA85227A8FFFFFFA8A87DA8A8FD04FFA8A8FD31FF%A8FD08FFFD05A8FD05FFF8F8F8A8FD1DFFA8A8FFFD08A87DFFFD05A8FD07%FF7DFD32FF7DFD0BFFA8A87DA8A8A827F827A8A8FD1FFFFD08A87DA8A8FF%A8FD09FFA8A8FD33FFA8FD0FFFA87D7DFFFD07A8FFA8FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFD0BA8FD10FFA8A8FD32FFA8A8FD16FFA8FFFD%04A87DA87DA8A8A87DA8A8A87DA8A8A87DA87DA87DA8A8FFA8FFA8FD09FF%A8FD0BFF7DFD09FF7DA8FD0AFF7DFFA8FF7DA8FFFF52FD16FF7DFD3DFFA8%FD0CFFA8FD08FFA827A8FFA8FD07FF527DA852FFA8A8A87D7DA8FD15FFA8%A8FD0FFFA8FD38FFA87DFD07FFA827277D527D7DFF5252A8FF52277D5227%FFA8A8F8A8FD17FFA8A8FD10FFA8FD37FF7DFD08FFA8277D7D7D52FFFFA8%7DFFFF522752A8527DFF7DA8FD19FF7DFD0FFFA8FD2BFFA8FD0BFFA8A8FD%0CFFA8FD09FFA8FFFF7DA8FD1BFFA8A8FD0FFFA8FD36FFA8A8FD36FFA8A8%FD10FFA8FD29FFA8FD0BFF7DFD38FF7DA8FD44FFA8A8FD17FFA8FD04FFA8%FFFFFFA8FD05FFA8FD12FF7DFD0FFFA8FD33FFA87DFD16FFA8A852A87DFF%A85252FFFF52527D52FFA827A87DA8FD0FFFA8A8FD37FFA8FD0AFFA8A8FD%12FF7D52A8FF52527D52277DA8527DA852277D527DA852277D277DFD10FF%7DA8FD35FFA8FD0BFF7DFD13FF7D7DA8FF52522752277DA87D7DA827527D%7DA8A8F85252277DFD10FFA8A8FD0EFFA8FD31FF7DFD19FFA8FFA8A8A8FF%A8FFFFFFA8FFA8FD04FFA87DFD12FF7DA8FD0EFFA8FD25FFA8FD09FF7DA8%FD2AFFA8FD14FF7DFD33FFA8FD09FFA8A8FD41FF7DFD0DFFA8FD23FFA8FD%0AFF7DA8FD42FF7DFD0DFFA8FD2CFFA8A8FD43FFA87DFD0DFFA8FD21FFA8%FD08FF7DA8FD45FFA87DFD2DFFA8FD08FFA8A8FD47FFA87DFD2BFFA8FD08%FFA8A8FD4AFF7DFD0BFFA8FD26FF7DA8FD4CFF7DA8FD0AFFA8FD1BFFA8A8%FD06FFA87DA8FD4EFF7DA8FD0AFFA8FD21FF7DA8FD51FFA87DA8FD09FFA8%FD18FFA8A8FD05FF7DA8FD54FFA87DFD09FFA8FD1CFFA87DFD57FFA87DA8%A8FD07FFA8FD13FFA8A8A8FFFFFF7DA8A8FD5AFFA8A8A8FD07FFA8FD11FF%A8FFFFFFA8A87DFD60FF7DA8A8FD05FFA8FFA8FD0DFFA8FFA8A87DA8A8FD%64FFA8A87DFD0FFFFD07A8FD6AFFA8A87DA87DA8FD097DA87DA8A8FD4EFF%FF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: angulo_solido_diferencial.eps 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:ac64bc80-9a7e-11da-8438-0030654769d4'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
  <pdf:Producer>Mac OS X 10.3.9 Quartz PDFContext</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ac64bc80-9a7e-11da-8438-0030654769d4'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ac64bc80-9a7e-11da-8438-0030654769d4'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:ModifyDate>2006-02-13T23:30:47Z</xap:ModifyDate>
  <xap:CreateDate>2006-02-10T16:46:05-05:00</xap:CreateDate>
  <xap:CreatorTool>Preview</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>152</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqll95g0&#xA;+1uDZoXu9QAB+o2q+rMARVS4HwxK3ZpWVffFVGvmi93pBpMB6A/6Vc8SO9OEMTj5yrirUnl2yYGT&#xA;Ur68uz0Zprl4YyCaBWhtzBAR803xVqz0PRhIJbHRrS0T/f7W0cbstUf4YwqsA1WHxlSGH2WGKvBv&#xA;+cpvzQv/ACnq3lXSdKvJn1G3nTWL6rtGHihIiijb0TGpEzJIXHHbtQHFXu2nR+XfNOg2OqpGbnTt&#xA;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&#xA;VdirsVdirsVdirsVdirsVdir/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ac64bc80-9a7e-11da-8438-0030654769d4'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:ac64a652-9a7e-11da-8438-0030654769d4</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ac64bc80-9a7e-11da-8438-0030654769d4'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -275.024 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 275.024 li463.785 275.024 li463.785 0 liclp[1 0 0 1 0 0 ] concat323.251 91.9493 mo322.621 87.7911 li320.119 91.9493 li323.251 91.9493 licp316.219 95.8047 mo316.535 95.71 316.767 95.6065 316.916 95.4932 cv317.138 95.3311 317.384 95.0294 317.656 94.586 cv323.963 84.4698 li324.404 84.4698 li326.028 94.3096 li326.138 94.9698 326.27 95.375 326.425 95.5235 cv326.58 95.6719 326.919 95.7657 327.445 95.8047 cv327.445 96.212 li322.292 96.212 li322.292 95.8047 li322.78 95.7657 323.124 95.6866 323.326 95.5645 cv323.527 95.4434 323.628 95.1934 323.628 94.8116 cv323.628 94.6827 323.597 94.3741 323.537 93.8868 cv323.526 93.7862 323.468 93.3672 323.363 92.6319 cv319.718 92.6319 li318.718 94.3819 li318.653 94.501 318.592 94.6299 318.54 94.7696 cv318.488 94.9092 318.461 95.045 318.461 95.1739 cv318.461 95.4092 318.532 95.5606 318.673 95.628 cv318.814 95.6954 319.108 95.7549 319.557 95.8047 cv319.557 96.212 li316.219 96.212 li316.219 95.8047 licp310.881 94.1895 mo310.881 94.4913 310.947 94.7364 311.077 94.9229 cv311.206 95.1104 311.382 95.2042 311.603 95.2042 cv312.272 95.2042 312.921 94.4073 313.551 92.8135 cv314.083 91.4874 314.348 90.5157 314.348 89.8946 cv314.348 89.6768 314.319 89.501 314.264 89.3663 cv314.16 89.1211 313.967 88.9971 313.684 88.9971 cv313.054 88.9971 312.413 89.7071 311.761 91.128 cv311.174 92.3975 310.881 93.418 310.881 94.1895 cvcp313.378 88.2813 mo313.687 88.2813 313.956 88.3458 314.183 88.4737 cv314.315 88.5518 314.458 88.6729 314.614 88.834 cv315.369 85.9942 li315.385 85.9376 315.396 85.8819 315.402 85.8262 cv315.407 85.7696 315.41 85.7159 315.41 85.6651 cv315.41 85.462 315.349 85.3243 315.228 85.252 cv315.107 85.1788 314.935 85.1416 314.714 85.1416 cv314.366 85.1416 li314.366 84.6895 li315.1 84.6221 li315.671 84.5723 316.114 84.5215 316.424 84.4727 cv316.736 84.421 317.241 84.3292 317.942 84.1944 cv316.034 91.1602 li315.883 91.7012 315.684 92.4463 315.436 93.3936 cv315.187 94.3399 315.061 94.8614 315.061 94.9561 cv315.061 95.0401 315.083 95.1006 315.124 95.1407 cv315.165 95.1797 315.217 95.1983 315.278 95.1983 cv315.405 95.1983 315.581 95.0606 315.805 94.7842 cv316.028 94.5059 316.224 94.2334 316.389 93.9649 cv316.763 94.2403 li316.316 94.9122 315.951 95.3916 315.67 95.6768 cv315.178 96.1807 314.7 96.4327 314.235 96.4327 cv313.993 96.4327 313.785 96.3721 313.615 96.2481 cv313.343 96.0645 313.208 95.752 313.208 95.3106 cv313.208 95.2383 313.223 95.1124 313.253 94.9297 cv313.284 94.7481 313.327 94.5215 313.381 94.2471 cv312.972 94.919 312.619 95.3995 312.32 95.6915 cv311.801 96.1993 311.225 96.4542 310.594 96.4542 cv310.096 96.4542 309.669 96.2608 309.313 95.8721 cv308.957 95.4825 308.777 94.8995 308.777 94.1221 cv308.777 92.8965 309.281 91.6241 310.287 90.3038 cv311.315 88.9551 312.345 88.2813 313.378 88.2813 cvfalse sop/0 [/DeviceGray] add_csa0 gryf340.743 93.8663 mo332.856 93.8663 li332.856 92.6983 li340.743 92.6983 li340.743 93.8663 licp340.743 91.5967 mo332.856 91.5967 li332.856 90.4288 li340.743 90.4288 li340.743 91.5967 lif347.607 91.8458 mo347.607 90.3067 347.933 88.9141 348.589 87.671 cv349.342 86.2432 350.488 85.1055 352.025 84.2598 cv352.025 84.7393 li351.109 85.3946 350.507 86.0391 350.219 86.671 cv349.77 87.668 349.546 89.3399 349.546 91.6866 cv349.546 94.0381 349.773 95.7149 350.227 96.7178 cv350.515 97.3565 351.114 97.9981 352.025 98.6407 cv352.025 99.1202 li350.865 98.5215 349.911 97.6954 349.162 96.6436 cv348.214 95.3047 347.695 93.7051 347.607 91.8458 cvf365.194 94.1895 mo365.194 94.4913 365.258 94.7364 365.389 94.9229 cv365.519 95.1104 365.694 95.2042 365.916 95.2042 cv366.584 95.2042 367.233 94.4073 367.864 92.8135 cv368.395 91.4874 368.66 90.5157 368.66 89.8946 cv368.66 89.6768 368.632 89.501 368.577 89.3663 cv368.472 89.1211 368.278 88.9971 367.998 88.9971 cv367.367 88.9971 366.725 89.7071 366.074 91.128 cv365.487 92.3975 365.194 93.418 365.194 94.1895 cvcp367.69 88.2813 mo368 88.2813 368.268 88.3458 368.495 88.4737 cv368.627 88.5518 368.771 88.6729 368.926 88.834 cv369.681 85.9942 li369.698 85.9376 369.708 85.8819 369.714 85.8262 cv369.719 85.7696 369.722 85.7159 369.722 85.6651 cv369.722 85.462 369.662 85.3243 369.541 85.252 cv369.419 85.1788 369.248 85.1416 369.027 85.1416 cv368.678 85.1416 li368.678 84.6895 li369.413 84.6221 li369.984 84.5723 370.426 84.5215 370.737 84.4727 cv371.048 84.421 371.554 84.3292 372.253 84.1944 cv370.346 91.1602 li370.196 91.7012 369.997 92.4463 369.748 93.3936 cv369.498 94.3399 369.375 94.8614 369.375 94.9561 cv369.375 95.0401 369.395 95.1006 369.436 95.1407 cv369.477 95.1797 369.53 95.1983 369.59 95.1983 cv369.717 95.1983 369.893 95.0606 370.116 94.7842 cv370.34 94.5059 370.537 94.2334 370.702 93.9649 cv371.076 94.2403 li370.628 94.9122 370.263 95.3916 369.983 95.6768 cv369.49 96.1807 369.012 96.4327 368.548 96.4327 cv368.304 96.4327 368.097 96.3721 367.927 96.2481 cv367.656 96.0645 367.519 95.752 367.519 95.3106 cv367.519 95.2383 367.536 95.1124 367.566 94.9297 cv367.596 94.7481 367.639 94.5215 367.694 94.2471 cv367.286 94.919 366.931 95.3995 366.632 95.6915 cv366.112 96.1993 365.538 96.4542 364.907 96.4542 cv364.409 96.4542 363.982 96.2608 363.626 95.8721 cv363.269 95.4825 363.089 94.8995 363.089 94.1221 cv363.089 92.8965 363.592 91.6241 364.599 90.3038 cv365.626 88.9551 366.658 88.2813 367.69 88.2813 cvcp353.353 96.212 mo353.827 94.5723 354.213 93.1612 354.514 91.9776 cv354.857 90.7071 355.028 89.9512 355.028 89.71 cv355.028 89.4981 354.958 89.3604 354.821 89.2989 cv354.682 89.2383 354.444 89.2061 354.106 89.2061 cv354.106 88.7549 li354.828 88.711 355.436 88.6514 355.932 88.5782 cv356.254 88.5332 356.801 88.4376 357.574 88.292 cv356.624 91.3409 li356.699 91.3575 li357.185 90.4053 357.577 89.7305 357.87 89.3331 cv358.383 88.6387 358.878 88.292 359.355 88.292 cv359.687 88.292 359.932 88.4044 360.089 88.628 cv360.248 88.8526 360.326 89.1016 360.326 89.376 cv360.326 89.7061 360.24 90.002 360.064 90.2666 cv359.891 90.5294 359.649 90.6602 359.338 90.6602 cv359.2 90.6602 359.072 90.6329 358.952 90.5772 cv358.834 90.5215 358.733 90.4385 358.649 90.3272 cv358.492 90.127 li358.464 90.0948 358.435 90.0665 358.404 90.043 cv358.374 90.0215 358.334 90.0108 358.284 90.0108 cv358.068 90.0108 357.786 90.3067 357.437 90.8985 cv357.088 91.4922 356.795 92.0948 356.557 92.709 cv356.391 93.1348 356.187 93.7403 355.943 94.5245 cv355.7 95.3077 355.519 95.8711 355.404 96.212 cv353.353 96.212 lif379.235 89.834 mo379.25 89.7559 379.277 89.6485 379.313 89.5108 cv379.349 89.3731 379.373 89.2735 379.386 89.212 cv379.7 87.7686 379.771 86.7129 379.601 86.045 cv379.431 85.377 379.005 85.042 378.326 85.042 cv377.617 85.042 377.019 85.418 376.532 86.171 cv376.044 86.9229 375.609 88.1446 375.225 89.834 cv379.235 89.834 licp375.092 90.4395 mo375.007 90.834 li374.592 92.7393 374.457 94.0733 374.597 94.837 cv374.739 95.5997 375.175 95.9805 375.905 95.9805 cv376.653 95.9805 377.251 95.6075 377.705 94.8614 cv378.158 94.1163 378.623 92.6416 379.102 90.4395 cv375.092 90.4395 licp378.411 84.6348 mo379.572 84.6348 380.359 85.1231 380.771 86.1016 cv381.184 87.0792 381.191 88.4834 380.793 90.3145 cv380.365 92.2852 379.726 93.7969 378.879 94.8458 cv378.031 95.8965 377.026 96.4219 375.865 96.4219 cv374.637 96.4219 373.823 95.9219 373.423 94.9219 cv373.024 93.9219 373.041 92.4307 373.472 90.4483 cv373.87 88.6172 374.503 87.1905 375.374 86.169 cv376.243 85.1456 377.254 84.6348 378.411 84.6348 cvf388.862 91.8458 mo388.862 90.3067 389.19 88.9141 389.844 87.671 cv390.598 86.2432 391.743 85.1055 393.28 84.2598 cv393.28 84.7393 li392.365 85.3946 391.763 86.0391 391.474 86.671 cv391.025 87.668 390.801 89.3399 390.801 91.6866 cv390.801 94.0381 391.028 95.7149 391.482 96.7178 cv391.772 97.3565 392.371 97.9981 393.28 98.6407 cv393.28 99.1202 li392.12 98.5215 391.168 97.6954 390.418 96.6436 cv389.469 95.3047 388.95 93.7051 388.862 91.8458 cvcp387.559 91.8458 mo387.504 93.0508 387.287 94.1055 386.904 95.0127 cv386.523 95.92 385.969 96.7715 385.245 97.5674 cv384.891 97.9522 384.468 98.3077 383.975 98.6329 cv383.484 98.9581 383.21 99.1202 383.153 99.1202 cv383.153 98.6407 li384.066 97.9922 384.668 97.3399 384.961 96.6846 cv385.409 95.6876 385.631 94.0215 385.631 91.6866 cv385.631 89.3458 385.406 87.6739 384.953 86.671 cv384.666 86.0391 384.066 85.3946 383.153 84.7393 cv383.153 84.2598 li384.647 85.084 385.771 86.1836 386.523 87.5626 cv387.213 88.8272 387.559 90.2559 387.559 91.8458 cvf394.608 96.212 mo395.082 94.5723 395.468 93.1612 395.769 91.9776 cv396.112 90.7071 396.284 89.9512 396.284 89.71 cv396.284 89.4981 396.213 89.3604 396.076 89.2989 cv395.937 89.2383 395.699 89.2061 395.361 89.2061 cv395.361 88.7549 li396.083 88.711 396.691 88.6514 397.189 88.5782 cv397.509 88.5332 398.056 88.4376 398.829 88.292 cv397.879 91.3409 li397.954 91.3575 li398.442 90.4053 398.832 89.7305 399.125 89.3331 cv399.639 88.6387 400.133 88.292 400.61 88.292 cv400.942 88.292 401.187 88.4044 401.345 88.628 cv401.502 88.8526 401.581 89.1016 401.581 89.376 cv401.581 89.7061 401.495 90.002 401.32 90.2666 cv401.146 90.5294 400.904 90.6602 400.593 90.6602 cv400.455 90.6602 400.327 90.6329 400.208 90.5772 cv400.088 90.5215 399.988 90.4385 399.905 90.3272 cv399.747 90.127 li399.719 90.0948 399.69 90.0665 399.66 90.043 cv399.629 90.0215 399.588 90.0108 399.539 90.0108 cv399.324 90.0108 399.042 90.3067 398.692 90.8985 cv398.343 91.4922 398.05 92.0948 397.812 92.709 cv397.647 93.1348 397.442 93.7403 397.198 94.5245 cv396.955 95.3077 396.776 95.8711 396.659 96.212 cv394.608 96.212 lif415.451 95.8047 mo415.761 95.7657 415.988 95.6797 416.135 95.5469 cv416.282 95.4151 416.354 95.1514 416.354 94.7579 cv416.354 89.7022 li416.354 89.3506 416.295 89.1075 416.176 88.9717 cv416.057 88.836 415.816 88.7452 415.451 88.6993 cv415.451 88.292 li418.668 88.292 li418.668 89.5274 li418.939 89.1143 419.283 88.7715 419.702 88.501 cv420.121 88.2295 420.583 88.0938 421.092 88.0938 cv421.824 88.0938 422.389 88.2832 422.792 88.6651 cv423.192 89.045 423.393 89.7139 423.393 90.67 cv423.393 94.8243 li423.393 95.2139 423.458 95.4649 423.588 95.5762 cv423.719 95.6885 423.937 95.7657 424.242 95.8047 cv424.242 96.212 li420.249 96.212 li420.249 95.8047 li420.552 95.7422 420.759 95.6582 420.871 95.5508 cv420.981 95.4454 421.036 95.2032 421.036 94.8272 cv421.036 90.6612 li421.036 90.2696 420.998 89.9756 420.92 89.7794 cv420.787 89.4268 420.525 89.25 420.132 89.25 cv419.839 89.25 419.57 89.3594 419.325 89.5743 cv419.078 89.7901 418.888 90.0059 418.755 90.2256 cv418.755 94.8272 li418.755 95.2032 418.811 95.4454 418.921 95.5508 cv419.033 95.6582 419.239 95.7422 419.543 95.8047 cv419.543 96.212 li415.451 96.212 li415.451 95.8047 licp411.463 85.6592 mo411.463 85.2901 411.593 84.9766 411.85 84.7159 cv412.108 84.4571 412.419 84.3262 412.784 84.3262 cv413.145 84.3262 413.453 84.4571 413.71 84.7159 cv413.968 84.9766 414.096 85.2901 414.096 85.6592 cv414.096 86.0284 413.968 86.3418 413.71 86.6026 cv413.453 86.8624 413.145 86.9922 412.784 86.9922 cv412.419 86.9922 412.108 86.8624 411.85 86.6026 cv411.593 86.3418 411.463 86.0284 411.463 85.6592 cvcp410.725 95.8047 mo411.023 95.754 411.226 95.6768 411.336 95.5762 cv411.501 95.4249 411.584 95.1514 411.584 94.7579 cv411.584 89.7022 li411.584 89.3506 411.527 89.1114 411.411 88.9844 cv411.295 88.8565 411.067 88.7618 410.725 88.6993 cv410.725 88.292 li413.986 88.292 li413.986 94.8243 li413.986 95.2012 414.042 95.4434 414.154 95.5508 cv414.264 95.6582 414.473 95.7422 414.779 95.8047 cv414.779 96.212 li410.725 96.212 li410.725 95.8047 licp404.267 93.6124 mo404.741 93.6124 li404.908 94.4346 405.219 95.0137 405.673 95.3526 cv406.127 95.6905 406.593 95.8594 407.071 95.8594 cv407.508 95.8594 407.831 95.7608 408.036 95.5626 cv408.242 95.3643 408.343 95.1026 408.343 94.7774 cv408.343 94.4708 408.233 94.2071 408.01 93.9883 cv407.889 93.8711 407.692 93.7461 407.42 93.6114 cv406.158 92.9903 li405.495 92.6592 405.018 92.3018 404.73 91.9151 cv404.437 91.5294 404.29 91.0723 404.29 90.546 cv404.29 89.8799 404.519 89.3057 404.979 88.8204 cv405.438 88.336 406.081 88.0938 406.906 88.0938 cv407.265 88.0938 407.646 88.1544 408.051 88.2754 cv408.455 88.3965 408.707 88.4571 408.807 88.4571 cv408.945 88.4571 409.042 88.4278 409.102 88.3672 cv409.16 88.3086 409.208 88.2247 409.247 88.1153 cv409.621 88.1153 li409.621 90.6055 li409.191 90.6055 li409.031 90.0245 408.767 89.5577 408.401 89.2061 cv408.035 88.8536 407.608 88.6778 407.121 88.6778 cv406.743 88.6778 406.46 88.7832 406.277 88.9971 cv406.09 89.209 405.997 89.4385 405.997 89.6836 cv405.997 89.8868 406.081 90.0879 406.246 90.2881 cv406.407 90.4952 406.712 90.7081 407.161 90.9258 cv408.091 91.379 li408.666 91.6582 409.088 91.9297 409.354 92.1924 cv409.795 92.6407 410.017 93.1915 410.017 93.8448 cv410.017 94.4825 409.789 95.0772 409.332 95.628 cv408.875 96.1788 408.19 96.4542 407.276 96.4542 cv407.049 96.4542 406.82 96.4307 406.59 96.3829 cv406.361 96.336 406.077 96.253 405.74 96.1348 cv405.448 96.0342 li405.343 95.9961 405.278 95.9727 405.253 95.9668 cv405.227 95.962 405.196 95.959 405.157 95.959 cv405.063 95.959 404.981 95.9971 404.912 96.0733 cv404.843 96.1485 404.763 96.2754 404.675 96.4542 cv404.267 96.4542 li404.267 93.6124 lif433.901 89.834 mo433.918 89.7559 433.945 89.6485 433.979 89.5108 cv434.015 89.3731 434.04 89.2735 434.053 89.212 cv434.367 87.7686 434.439 86.7129 434.268 86.045 cv434.098 85.377 433.672 85.042 432.992 85.042 cv432.283 85.042 431.685 85.418 431.198 86.171 cv430.71 86.9229 430.275 88.1446 429.891 89.834 cv433.901 89.834 licp429.76 90.4395 mo429.673 90.834 li429.259 92.7393 429.123 94.0733 429.264 94.837 cv429.405 95.5997 429.841 95.9805 430.573 95.9805 cv431.319 95.9805 431.919 95.6075 432.373 94.8614 cv432.826 94.1163 433.291 92.6416 433.77 90.4395 cv429.76 90.4395 licp433.078 84.6348 mo434.24 84.6348 435.026 85.1231 435.439 86.1016 cv435.85 87.0792 435.859 88.4834 435.46 90.3145 cv435.032 92.2852 434.394 93.7969 433.545 94.8458 cv432.698 95.8965 431.694 96.4219 430.532 96.4219 cv429.303 96.4219 428.491 95.9219 428.091 94.9219 cv427.692 93.9219 427.708 92.4307 428.138 90.4483 cv428.537 88.6172 429.171 87.1905 430.04 86.169 cv430.909 85.1456 431.922 84.6348 433.078 84.6348 cvf441.376 94.1895 mo441.376 94.4913 441.441 94.7364 441.571 94.9229 cv441.7 95.1104 441.876 95.2042 442.098 95.2042 cv442.766 95.2042 443.416 94.4073 444.046 92.8135 cv444.577 91.4874 444.842 90.5157 444.842 89.8946 cv444.842 89.6768 444.815 89.501 444.759 89.3663 cv444.654 89.1211 444.46 88.9971 444.178 88.9971 cv443.547 88.9971 442.908 89.7071 442.254 91.128 cv441.668 92.3975 441.376 93.418 441.376 94.1895 cvcp443.873 88.2813 mo444.182 88.2813 444.45 88.3458 444.677 88.4737 cv444.809 88.5518 444.953 88.6729 445.108 88.834 cv445.864 85.9942 li445.88 85.9376 445.891 85.8819 445.897 85.8262 cv445.902 85.7696 445.905 85.7159 445.905 85.6651 cv445.905 85.462 445.844 85.3243 445.722 85.252 cv445.601 85.1788 445.43 85.1416 445.208 85.1416 cv444.862 85.1416 li444.862 84.6895 li445.594 84.6221 li446.166 84.5723 446.607 84.5215 446.918 84.4727 cv447.23 84.421 447.735 84.3292 448.436 84.1944 cv446.528 91.1602 li446.377 91.7012 446.179 92.4463 445.93 93.3936 cv445.68 94.3399 445.555 94.8614 445.555 94.9561 cv445.555 95.0401 445.576 95.1006 445.619 95.1407 cv445.66 95.1797 445.71 95.1983 445.772 95.1983 cv445.898 95.1983 446.075 95.0606 446.299 94.7842 cv446.523 94.5059 446.717 94.2334 446.884 93.9649 cv447.258 94.2403 li446.811 94.9122 446.446 95.3916 446.164 95.6768 cv445.672 96.1807 445.195 96.4327 444.731 96.4327 cv444.487 96.4327 444.279 96.3721 444.108 96.2481 cv443.836 96.0645 443.702 95.752 443.702 95.3106 cv443.702 95.2383 443.717 95.1124 443.748 94.9297 cv443.778 94.7481 443.821 94.5215 443.876 94.2471 cv443.466 94.919 443.113 95.3995 442.814 95.6915 cv442.294 96.1993 441.719 96.4542 441.088 96.4542 cv440.591 96.4542 440.164 96.2608 439.806 95.8721 cv439.45 95.4825 439.272 94.8995 439.272 94.1221 cv439.272 92.8965 439.775 91.6241 440.78 90.3038 cv441.809 88.9551 442.838 88.2813 443.873 88.2813 cvf454.096 88.7657 mo452.741 95.8487 li453.356 95.7315 453.91 95.3555 454.398 94.7198 cv454.887 94.085 455.235 93.2862 455.445 92.3233 cv455.663 91.3223 455.646 90.4952 455.392 89.8399 cv455.14 89.1856 454.708 88.8272 454.096 88.7657 cvcp453.223 88.7657 mo452.58 88.8272 451.989 89.1846 451.455 89.835 cv450.918 90.4883 450.542 91.3174 450.323 92.3233 cv450.115 93.2803 450.122 94.0811 450.34 94.7237 cv450.561 95.3682 450.953 95.7422 451.517 95.8487 cv453.223 88.7657 licp454.187 88.2696 mo455.25 88.3047 456.027 88.6915 456.521 89.4317 cv457.017 90.1739 457.135 91.1377 456.876 92.3233 cv456.627 93.4708 456.117 94.4122 455.345 95.1475 cv454.575 95.8848 453.666 96.293 452.625 96.377 cv451.869 99.8584 li450.646 99.8584 li451.402 96.377 li450.394 96.3047 449.659 95.8985 449.198 95.1563 cv448.736 94.4151 448.63 93.4708 448.879 92.3233 cv449.137 91.1436 449.675 90.1807 450.496 89.4366 cv451.317 88.6924 452.267 88.3047 453.347 88.2696 cv454.166 84.9317 li454.838 84.9317 li454.187 88.2696 lif463.785 91.8458 mo463.73 93.0508 463.511 94.1055 463.129 95.0127 cv462.748 95.92 462.195 96.7715 461.47 97.5674 cv461.115 97.9522 460.692 98.3077 460.201 98.6329 cv459.708 98.9581 459.434 99.1202 459.378 99.1202 cv459.378 98.6407 li460.291 97.9922 460.893 97.3399 461.185 96.6846 cv461.632 95.6876 461.857 94.0215 461.857 91.6866 cv461.857 89.3458 461.63 87.6739 461.177 86.671 cv460.89 86.0391 460.291 85.3946 459.378 84.7393 cv459.378 84.2598 li460.873 85.084 461.995 86.1836 462.748 87.5626 cv463.439 88.8272 463.785 90.2559 463.785 91.8458 cvf340.745 122.754 mo332.857 122.754 li332.857 121.587 li340.745 121.587 li340.745 122.754 licp340.745 120.486 mo332.857 120.486 li332.857 119.318 li340.745 119.318 li340.745 120.486 lif347.643 125.101 mo348.117 123.459 348.503 122.048 348.802 120.867 cv349.145 119.596 349.317 118.84 349.317 118.599 cv349.317 118.385 349.249 118.25 349.11 118.187 cv348.972 118.126 348.734 118.095 348.395 118.095 cv348.395 117.643 li349.117 117.598 349.726 117.541 350.222 117.467 cv350.542 117.421 351.091 117.327 351.864 117.181 cv350.914 120.229 li350.988 120.246 li351.475 119.294 351.866 118.62 352.158 118.222 cv352.673 117.528 353.168 117.181 353.645 117.181 cv353.977 117.181 354.222 117.292 354.379 117.517 cv354.538 117.742 354.616 117.991 354.616 118.264 cv354.616 118.595 354.529 118.891 354.354 119.154 cv354.179 119.417 353.937 119.549 353.628 119.549 cv353.49 119.549 353.362 119.522 353.242 119.465 cv353.124 119.41 353.021 119.328 352.939 119.216 cv352.782 119.016 li352.752 118.982 352.724 118.955 352.694 118.932 cv352.664 118.911 352.624 118.899 352.574 118.899 cv352.358 118.899 352.076 119.195 351.727 119.788 cv351.378 120.379 351.085 120.984 350.847 121.598 cv350.68 122.024 350.475 122.628 350.233 123.413 cv349.99 124.197 349.809 124.759 349.693 125.101 cv347.643 125.101 lif355.936 117.347 mo356.991 116.189 357.678 115.384 357.999 114.929 cv358.489 114.244 358.734 113.635 358.734 113.105 cv358.734 112.792 358.639 112.498 358.451 112.225 cv358.26 111.953 357.968 111.816 357.571 111.816 cv357.221 111.816 356.928 111.939 356.688 112.184 cv356.559 112.319 356.445 112.5 356.344 112.725 cv356.074 112.725 li356.293 112.028 356.597 111.513 356.986 111.178 cv357.373 110.842 357.809 110.676 358.293 110.676 cv358.752 110.676 359.169 110.837 359.544 111.16 cv359.918 111.48 360.106 111.954 360.106 112.578 cv360.106 112.904 360.018 113.24 359.841 113.583 cv359.666 113.925 359.369 114.299 358.954 114.701 cv357.441 116.161 li357.441 116.245 li358.851 116.245 li359.341 116.245 359.663 116.204 359.812 116.122 cv359.962 116.041 360.114 115.823 360.265 115.468 cv360.502 115.468 li360.056 117.578 li355.936 117.578 li355.936 117.347 lif375.79 124.694 mo376.099 124.654 376.327 124.568 376.472 124.436 cv376.62 124.304 376.693 124.041 376.693 123.647 cv376.693 118.591 li376.693 118.24 376.633 117.996 376.515 117.86 cv376.395 117.725 376.154 117.634 375.79 117.588 cv375.79 117.181 li379.005 117.181 li379.005 118.416 li379.277 118.002 379.622 117.66 380.04 117.389 cv380.458 117.118 380.921 116.983 381.43 116.983 cv382.162 116.983 382.728 117.172 383.129 117.552 cv383.531 117.934 383.732 118.602 383.732 119.559 cv383.732 123.713 li383.732 124.101 383.796 124.352 383.927 124.465 cv384.056 124.578 384.274 124.654 384.58 124.694 cv384.58 125.101 li380.586 125.101 li380.586 124.694 li380.891 124.631 381.097 124.547 381.208 124.44 cv381.319 124.334 381.375 124.091 381.375 123.716 cv381.375 119.55 li381.375 119.158 381.335 118.864 381.258 118.667 cv381.125 118.316 380.864 118.139 380.471 118.139 cv380.177 118.139 379.908 118.247 379.662 118.462 cv379.416 118.677 379.226 118.895 379.094 119.113 cv379.094 123.716 li379.094 124.091 379.149 124.334 379.259 124.44 cv379.371 124.547 379.578 124.631 379.881 124.694 cv379.881 125.101 li375.79 125.101 li375.79 124.694 licp371.801 114.548 mo371.801 114.179 371.931 113.865 372.189 113.605 cv372.446 113.344 372.757 113.215 373.123 113.215 cv373.483 113.215 373.792 113.344 374.048 113.605 cv374.306 113.865 374.434 114.179 374.434 114.548 cv374.434 114.917 374.306 115.231 374.048 115.492 cv373.792 115.751 373.483 115.881 373.123 115.881 cv372.757 115.881 372.446 115.751 372.189 115.492 cv371.931 115.231 371.801 114.917 371.801 114.548 cvcp371.064 124.694 mo371.361 124.642 371.565 124.565 371.675 124.465 cv371.84 124.313 371.922 124.041 371.922 123.647 cv371.922 118.591 li371.922 118.24 371.865 118 371.75 117.874 cv371.633 117.746 371.405 117.65 371.064 117.588 cv371.064 117.181 li374.324 117.181 li374.324 123.713 li374.324 124.09 374.38 124.333 374.491 124.44 cv374.602 124.547 374.812 124.631 375.118 124.694 cv375.118 125.101 li371.064 125.101 li371.064 124.694 licp364.606 122.501 mo365.08 122.501 li365.246 123.324 365.556 123.903 366.011 124.242 cv366.466 124.58 366.931 124.749 367.409 124.749 cv367.847 124.749 368.168 124.65 368.373 124.451 cv368.579 124.251 368.681 123.992 368.681 123.667 cv368.681 123.359 368.57 123.096 368.348 122.877 cv368.227 122.76 368.03 122.633 367.759 122.5 cv366.497 121.879 li365.833 121.548 365.356 121.189 365.068 120.803 cv364.775 120.417 364.627 119.96 364.627 119.435 cv364.627 118.768 364.858 118.193 365.318 117.709 cv365.776 117.225 366.419 116.983 367.244 116.983 cv367.603 116.983 367.985 117.043 368.389 117.165 cv368.792 117.286 369.045 117.346 369.144 117.346 cv369.283 117.346 369.381 117.316 369.439 117.256 cv369.498 117.196 369.546 117.112 369.584 117.004 cv369.96 117.004 li369.96 119.494 li369.53 119.494 li369.369 118.913 369.106 118.446 368.739 118.093 cv368.373 117.743 367.946 117.566 367.458 117.566 cv367.082 117.566 366.799 117.672 366.613 117.886 cv366.427 118.098 366.335 118.327 366.335 118.573 cv366.335 118.774 366.418 118.976 366.584 119.177 cv366.746 119.384 367.049 119.597 367.499 119.815 cv368.429 120.268 li369.005 120.547 369.425 120.819 369.692 121.082 cv370.134 121.529 370.356 122.08 370.356 122.734 cv370.356 123.372 370.127 123.966 369.67 124.517 cv369.213 125.068 368.529 125.343 367.615 125.343 cv367.387 125.343 367.159 125.32 366.928 125.272 cv366.699 125.223 366.415 125.141 366.077 125.024 cv365.786 124.923 li365.681 124.883 365.615 124.862 365.59 124.856 cv365.565 124.85 365.534 124.848 365.496 124.848 cv365.402 124.848 365.319 124.885 365.25 124.96 cv365.181 125.037 365.101 125.165 365.013 125.343 cv364.606 125.343 li364.606 122.501 lif394.239 118.723 mo394.257 118.644 394.283 118.536 394.318 118.398 cv394.353 118.262 394.378 118.162 394.392 118.099 cv394.705 116.658 394.776 115.601 394.607 114.934 cv394.436 114.266 394.01 113.931 393.331 113.931 cv392.622 113.931 392.024 114.307 391.536 115.059 cv391.048 115.812 390.614 117.034 390.229 118.723 cv394.239 118.723 licp390.097 119.329 mo390.012 119.723 li389.597 121.628 389.461 122.962 389.603 123.725 cv389.744 124.489 390.18 124.87 390.911 124.87 cv391.658 124.87 392.257 124.497 392.71 123.75 cv393.163 123.005 393.629 121.531 394.107 119.329 cv390.097 119.329 licp393.416 113.524 mo394.578 113.524 395.364 114.012 395.777 114.99 cv396.189 115.966 396.197 117.371 395.797 119.203 cv395.37 121.174 394.732 122.684 393.884 123.735 cv393.036 124.786 392.032 125.31 390.87 125.31 cv389.641 125.31 388.829 124.81 388.429 123.811 cv388.031 122.811 388.045 121.32 388.476 119.337 cv388.875 117.505 389.509 116.08 390.378 115.056 cv391.247 114.035 392.26 113.524 393.416 113.524 cvf401.714 123.079 mo401.714 123.379 401.779 123.625 401.909 123.812 cv402.039 124 402.214 124.093 402.435 124.093 cv403.104 124.093 403.753 123.295 404.384 121.703 cv404.915 120.376 405.18 119.405 405.18 118.784 cv405.18 118.565 405.153 118.388 405.096 118.254 cv404.992 118.008 404.799 117.886 404.517 117.886 cv403.886 117.886 403.246 118.596 402.593 120.016 cv402.006 121.286 401.714 122.306 401.714 123.079 cvcp404.211 117.169 mo404.521 117.169 404.788 117.235 405.015 117.363 cv405.147 117.441 405.291 117.561 405.446 117.723 cv406.201 114.882 li406.217 114.827 406.228 114.77 406.234 114.713 cv406.239 114.659 406.244 114.605 406.244 114.553 cv406.244 114.351 406.181 114.213 406.06 114.14 cv405.939 114.068 405.768 114.031 405.546 114.031 cv405.198 114.031 li405.198 113.579 li405.932 113.511 li406.505 113.461 406.946 113.411 407.256 113.36 cv407.568 113.31 408.074 113.218 408.774 113.084 cv406.866 120.047 li406.715 120.59 406.517 121.335 406.268 122.281 cv406.019 123.228 405.894 123.749 405.894 123.844 cv405.894 123.928 405.915 123.99 405.956 124.029 cv405.999 124.068 406.049 124.087 406.11 124.087 cv406.237 124.087 406.413 123.949 406.637 123.671 cv406.86 123.395 407.056 123.123 407.222 122.854 cv407.597 123.129 li407.148 123.801 406.785 124.281 406.502 124.565 cv406.01 125.07 405.533 125.322 405.068 125.322 cv404.825 125.322 404.617 125.259 404.447 125.137 cv404.175 124.953 404.041 124.64 404.041 124.199 cv404.041 124.127 404.055 124 404.085 123.819 cv404.116 123.637 404.159 123.411 404.213 123.136 cv403.805 123.808 403.451 124.289 403.152 124.58 cv402.633 125.088 402.057 125.343 401.426 125.343 cv400.929 125.343 400.501 125.149 400.145 124.759 cv399.789 124.372 399.611 123.788 399.611 123.011 cv399.611 121.786 400.113 120.513 401.119 119.193 cv402.147 117.844 403.177 117.169 404.211 117.169 cvf415.752 118.723 mo415.77 118.644 415.796 118.536 415.831 118.398 cv415.867 118.262 415.892 118.162 415.906 118.099 cv416.218 116.658 416.291 115.601 416.121 114.934 cv415.95 114.266 415.524 113.931 414.844 113.931 cv414.136 113.931 413.537 114.307 413.051 115.059 cv412.564 115.812 412.127 117.034 411.743 118.723 cv415.752 118.723 licp411.612 119.329 mo411.525 119.723 li411.111 121.628 410.974 122.962 411.117 123.725 cv411.258 124.489 411.693 124.87 412.424 124.87 cv413.17 124.87 413.771 124.497 414.224 123.75 cv414.677 123.005 415.142 121.531 415.622 119.329 cv411.612 119.329 licp414.929 113.524 mo416.091 113.524 416.877 114.012 417.291 114.99 cv417.703 115.966 417.71 117.371 417.313 119.203 cv416.883 121.174 416.246 122.684 415.397 123.735 cv414.549 124.786 413.545 125.31 412.383 125.31 cv411.157 125.31 410.342 124.81 409.943 123.811 cv409.543 122.811 409.559 121.32 409.99 119.337 cv410.388 117.505 411.023 116.08 411.891 115.056 cv412.76 114.035 413.774 113.524 414.929 113.524 cvf423.228 123.079 mo423.228 123.379 423.292 123.625 423.422 123.812 cv423.553 124 423.728 124.093 423.95 124.093 cv424.618 124.093 425.267 123.295 425.898 121.703 cv426.428 120.376 426.694 119.405 426.694 118.784 cv426.694 118.565 426.666 118.388 426.611 118.254 cv426.505 118.008 426.312 117.886 426.03 117.886 cv425.4 117.886 424.759 118.596 424.107 120.016 cv423.52 121.286 423.228 122.306 423.228 123.079 cvcp425.724 117.169 mo426.035 117.169 426.301 117.235 426.529 117.363 cv426.661 117.441 426.805 117.561 426.96 117.723 cv427.715 114.882 li427.732 114.827 427.743 114.77 427.749 114.713 cv427.754 114.659 427.757 114.605 427.757 114.553 cv427.757 114.351 427.696 114.213 427.574 114.14 cv427.453 114.068 427.282 114.031 427.06 114.031 cv426.713 114.031 li426.713 113.579 li427.446 113.511 li428.018 113.461 428.46 113.411 428.77 113.36 cv429.082 113.31 429.586 113.218 430.288 113.084 cv428.379 120.047 li428.229 120.59 428.031 121.335 427.782 122.281 cv427.533 123.228 427.409 123.749 427.409 123.844 cv427.409 123.928 427.428 123.99 427.47 124.029 cv427.512 124.068 427.563 124.087 427.624 124.087 cv427.75 124.087 427.926 123.949 428.151 123.671 cv428.376 123.395 428.569 123.123 428.736 122.854 cv429.111 123.129 li428.663 123.801 428.298 124.281 428.016 124.565 cv427.524 125.07 427.046 125.322 426.583 125.322 cv426.338 125.322 426.13 125.259 425.96 125.137 cv425.689 124.953 425.554 124.64 425.554 124.199 cv425.554 124.127 425.569 124 425.599 123.819 cv425.629 123.637 425.672 123.411 425.729 123.136 cv425.318 123.808 424.964 124.289 424.666 124.58 cv424.146 125.088 423.571 125.343 422.94 125.343 cv422.443 125.343 422.015 125.149 421.659 124.759 cv421.301 124.372 421.125 123.788 421.125 123.011 cv421.125 121.786 421.626 120.513 422.631 119.193 cv423.661 117.844 424.69 117.169 425.724 117.169 cvf435.949 117.655 mo434.592 124.738 li435.208 124.621 435.761 124.244 436.25 123.609 cv436.739 122.974 437.087 122.175 437.296 121.212 cv437.514 120.211 437.498 119.384 437.244 118.729 cv436.992 118.075 436.56 117.716 435.949 117.655 cvcp435.076 117.655 mo434.431 117.716 433.84 118.073 433.306 118.724 cv432.77 119.376 432.393 120.206 432.174 121.212 cv431.966 122.169 431.973 122.969 432.194 123.613 cv432.413 124.257 432.805 124.631 433.37 124.738 cv435.076 117.655 licp436.041 117.159 mo437.101 117.192 437.878 117.581 438.374 118.321 cv438.869 119.063 438.987 120.026 438.728 121.212 cv438.479 122.36 437.969 123.301 437.197 124.037 cv436.426 124.772 435.519 125.182 434.476 125.266 cv433.72 128.748 li432.498 128.748 li433.253 125.266 li432.246 125.193 431.512 124.788 431.049 124.045 cv430.587 123.304 430.482 122.36 430.731 121.212 cv430.989 120.033 431.527 119.07 432.347 118.325 cv433.168 117.582 434.119 117.192 435.2 117.159 cv436.017 113.821 li436.691 113.821 li436.041 117.159 lif308.844 182.257 mo308.844 182.557 308.91 182.799 309.039 182.986 cv309.168 183.171 309.341 183.265 309.562 183.265 cv310.228 183.265 310.875 182.473 311.502 180.89 cv312.03 179.572 312.293 178.605 312.293 177.989 cv312.293 177.771 312.266 177.596 312.211 177.462 cv312.107 177.218 311.914 177.096 311.634 177.096 cv311.006 177.096 310.369 177.802 309.719 179.214 cv309.136 180.475 308.844 181.489 308.844 182.257 cvcp311.326 176.391 mo311.634 176.391 311.902 176.455 312.128 176.583 cv312.261 176.661 312.404 176.78 312.558 176.942 cv313.318 174.121 li313.334 174.064 313.346 174.009 313.351 173.953 cv313.357 173.896 313.36 173.844 313.36 173.792 cv313.36 173.592 313.299 173.456 313.176 173.382 cv313.055 173.309 312.884 173.274 312.663 173.274 cv312.316 173.274 li312.316 172.822 li313.044 172.754 li313.613 172.706 314.051 172.654 314.361 172.603 cv314.669 172.553 315.171 172.461 315.867 172.327 cv313.974 179.25 li313.825 179.79 313.628 180.529 313.38 181.469 cv313.133 182.412 313.01 182.929 313.01 183.023 cv313.01 183.107 313.031 183.168 313.072 183.208 cv313.113 183.246 313.164 183.265 313.225 183.265 cv313.351 183.265 313.526 183.127 313.748 182.853 cv313.971 182.58 314.166 182.308 314.331 182.042 cv314.705 182.318 li314.257 182.983 313.894 183.457 313.612 183.739 cv313.12 184.239 312.644 184.488 312.179 184.488 cv311.937 184.488 311.729 184.427 311.558 184.304 cv311.289 184.122 311.152 183.812 311.152 183.374 cv311.152 183.302 311.168 183.175 311.198 182.995 cv311.228 182.815 311.272 182.588 311.328 182.318 cv310.919 182.984 310.566 183.461 310.268 183.751 cv309.75 184.256 309.178 184.509 308.55 184.509 cv308.054 184.509 307.628 184.317 307.274 183.93 cv306.918 183.544 306.741 182.964 306.741 182.192 cv306.741 180.975 307.242 179.711 308.245 178.4 cv309.269 177.06 310.295 176.391 311.326 176.391 cvf324.256 176.817 mo324.356 176.358 li325.46 176.442 326.234 176.836 326.679 177.542 cv327.125 178.249 327.213 179.219 326.943 180.454 cv326.686 181.633 326.189 182.59 325.451 183.327 cv324.712 184.064 323.895 184.432 322.996 184.432 cv322.46 184.432 322.053 184.259 321.777 183.911 cv321.499 183.564 321.34 183.025 321.302 182.297 cv320.955 183.02 320.568 183.557 320.137 183.907 cv319.708 184.257 319.221 184.432 318.68 184.432 cv317.774 184.432 317.115 184.066 316.7 183.335 cv316.285 182.604 316.208 181.644 316.467 180.454 cv316.737 179.219 317.25 178.249 318.004 177.542 cv318.76 176.836 319.71 176.442 320.853 176.358 cv320.753 176.817 li320.061 176.855 319.519 177.12 319.126 177.609 cv318.733 178.098 318.409 178.926 318.154 180.094 cv317.851 181.478 317.764 182.458 317.892 183.037 cv318.021 183.615 318.375 183.904 318.955 183.904 cv319.435 183.904 319.859 183.688 320.226 183.254 cv320.594 182.82 320.863 182.215 321.032 181.443 cv321.118 181.049 321.173 180.531 321.2 179.888 cv321.227 179.246 321.266 178.808 321.317 178.575 cv321.376 178.302 321.491 178.093 321.662 177.945 cv321.832 177.798 322.045 177.724 322.3 177.724 cv322.558 177.724 322.74 177.798 322.845 177.945 cv322.95 178.093 322.973 178.302 322.915 178.575 cv322.859 178.826 322.71 179.272 322.462 179.914 cv322.214 180.555 322.049 181.072 321.964 181.459 cv321.797 182.222 321.806 182.82 321.986 183.254 cv322.166 183.688 322.495 183.904 322.969 183.904 cv323.537 183.904 324.009 183.619 324.387 183.048 cv324.765 182.48 325.095 181.546 325.379 180.252 cv325.655 178.991 325.706 178.113 325.532 177.617 cv325.358 177.123 324.933 176.855 324.256 176.817 cvf341.666 181.943 mo333.8 181.943 li333.8 180.787 li341.666 180.787 li341.666 181.943 licp341.666 179.696 mo333.8 179.696 li333.8 178.54 li341.666 178.54 li341.666 179.696 lif362.97 180.048 mo362.34 175.925 li359.838 180.048 li362.97 180.048 licp355.962 183.86 mo356.277 183.765 356.507 183.663 356.657 183.551 cv356.876 183.39 357.122 183.09 357.392 182.651 cv363.673 172.613 li364.114 172.613 li365.738 182.376 li365.847 183.033 365.98 183.433 366.135 183.581 cv366.29 183.728 366.629 183.821 367.155 183.86 cv367.155 184.267 li362.013 184.267 li362.013 183.86 li362.499 183.821 362.841 183.742 363.042 183.623 cv363.246 183.503 363.346 183.255 363.346 182.876 cv363.346 182.75 363.316 182.444 363.254 181.961 cv363.243 181.862 363.185 181.448 363.082 180.72 cv359.444 180.72 li358.451 182.453 li358.384 182.57 358.326 182.696 358.273 182.835 cv358.221 182.974 358.195 183.108 358.195 183.235 cv358.195 183.468 358.265 183.619 358.405 183.685 cv358.545 183.752 358.839 183.81 359.287 183.86 cv359.287 184.267 li355.962 184.267 li355.962 183.86 licp350.648 182.257 mo350.648 182.557 350.712 182.799 350.841 182.986 cv350.971 183.171 351.146 183.265 351.367 183.265 cv352.032 183.265 352.678 182.473 353.305 180.89 cv353.834 179.572 354.098 178.605 354.098 177.989 cv354.098 177.771 354.071 177.596 354.015 177.462 cv353.911 177.218 353.718 177.096 353.437 177.096 cv352.811 177.096 352.171 177.802 351.523 179.214 cv350.939 180.475 350.648 181.489 350.648 182.257 cvcp353.13 176.391 mo353.439 176.391 353.706 176.455 353.931 176.583 cv354.064 176.661 354.207 176.78 354.361 176.942 cv355.122 174.121 li355.138 174.064 355.149 174.009 355.154 173.953 cv355.16 173.896 355.163 173.844 355.163 173.792 cv355.163 173.592 355.102 173.456 354.981 173.382 cv354.86 173.309 354.687 173.274 354.467 173.274 cv354.119 173.274 li354.119 172.822 li354.847 172.754 li355.416 172.706 355.855 172.654 356.164 172.603 cv356.473 172.553 356.976 172.461 357.671 172.327 cv355.777 179.25 li355.629 179.79 355.431 180.529 355.184 181.469 cv354.937 182.412 354.814 182.929 354.814 183.023 cv354.814 183.107 354.834 183.168 354.875 183.208 cv354.916 183.246 354.967 183.265 355.028 183.265 cv355.154 183.265 355.33 183.127 355.552 182.853 cv355.775 182.58 355.968 182.308 356.133 182.042 cv356.507 182.318 li356.062 182.983 355.697 183.457 355.416 183.739 cv354.924 184.239 354.447 184.488 353.983 184.488 cv353.74 184.488 353.534 184.427 353.363 184.304 cv353.091 184.122 352.957 183.812 352.957 183.374 cv352.957 183.302 352.972 183.175 353.002 182.995 cv353.033 182.815 353.075 182.588 353.13 182.318 cv352.722 182.984 352.37 183.461 352.073 183.751 cv351.555 184.256 350.982 184.509 350.354 184.509 cv349.859 184.509 349.431 184.317 349.077 183.93 cv348.721 183.544 348.543 182.964 348.543 182.192 cv348.543 180.975 349.044 179.711 350.048 178.4 cv351.073 177.06 352.1 176.391 353.13 176.391 cvf375.031 184.267 mo375.5 182.64 375.883 181.24 376.18 180.066 cv376.522 178.805 376.694 178.056 376.694 177.816 cv376.694 177.606 376.624 177.469 376.486 177.409 cv376.348 177.347 376.11 177.317 375.773 177.317 cv375.773 176.865 li376.495 176.821 377.103 176.761 377.598 176.689 cv377.919 176.643 378.466 176.548 379.239 176.402 cv378.295 179.433 li378.37 179.451 li378.854 178.503 379.243 177.833 379.535 177.438 cv380.046 176.748 380.542 176.402 381.015 176.402 cv381.345 176.402 381.589 176.514 381.746 176.737 cv381.903 176.959 381.981 177.208 381.981 177.48 cv381.981 177.809 381.895 178.104 381.721 178.367 cv381.546 178.628 381.305 178.759 380.996 178.759 cv380.858 178.759 380.73 178.732 380.61 178.674 cv380.492 178.619 380.391 178.534 380.308 178.42 cv380.15 178.217 li380.123 178.184 380.093 178.155 380.063 178.133 cv380.033 178.11 379.993 178.098 379.944 178.098 cv379.729 178.098 379.447 178.395 379.098 178.986 cv378.751 179.576 378.458 180.178 378.221 180.792 cv378.056 181.214 377.852 181.814 377.611 182.591 cv377.369 183.37 377.191 183.928 377.076 184.267 cv375.031 184.267 lif383.303 176.566 mo384.357 175.418 385.042 174.618 385.361 174.168 cv385.851 173.486 386.096 172.882 386.096 172.357 cv386.096 172.045 386 171.755 385.812 171.484 cv385.624 171.212 385.332 171.078 384.935 171.078 cv384.586 171.078 384.292 171.199 384.054 171.441 cv383.924 171.575 383.81 171.752 383.71 171.975 cv383.441 171.975 li383.66 171.284 383.962 170.773 384.348 170.441 cv384.735 170.11 385.17 169.943 385.654 169.943 cv386.111 169.943 386.527 170.103 386.901 170.422 cv387.275 170.742 387.461 171.211 387.461 171.831 cv387.461 172.156 387.374 172.489 387.199 172.829 cv387.022 173.17 386.726 173.54 386.312 173.939 cv384.804 175.39 li384.804 175.473 li386.21 175.473 li386.701 175.473 387.02 175.433 387.169 175.352 cv387.319 175.27 387.47 175.054 387.622 174.702 cv387.858 174.702 li387.413 176.794 li383.303 176.794 li383.303 176.566 lif372.979 170.036 mo367.33 187.826 li368.036 187.826 li373.685 170.036 lif341.666 207.873 mo333.8 207.873 li333.8 206.716 li341.666 206.716 li341.666 207.873 licp341.666 205.626 mo333.8 205.626 li333.8 204.468 li341.666 204.468 li341.666 205.626 lif359.62 209.79 mo359.928 209.75 360.157 209.666 360.302 209.535 cv360.45 209.404 360.523 209.143 360.523 208.753 cv360.523 203.731 li360.523 203.383 360.463 203.143 360.344 203.009 cv360.225 202.875 359.985 202.785 359.62 202.739 cv359.62 202.332 li362.826 202.332 li362.826 203.554 li363.095 203.145 363.439 202.805 363.857 202.537 cv364.274 202.268 364.737 202.133 365.245 202.133 cv365.973 202.133 366.539 202.324 366.938 202.701 cv367.339 203.08 367.54 203.743 367.54 204.693 cv367.54 208.82 li367.54 209.206 367.605 209.454 367.736 209.565 cv367.865 209.675 368.083 209.75 368.388 209.79 cv368.388 210.197 li364.406 210.197 li364.406 209.79 li364.708 209.729 364.916 209.645 365.027 209.539 cv365.137 209.432 365.194 209.193 365.194 208.82 cv365.194 204.682 li365.194 204.292 365.155 204 365.077 203.805 cv364.945 203.456 364.681 203.279 364.289 203.279 cv363.997 203.279 363.727 203.386 363.481 203.601 cv363.234 203.815 363.045 204.031 362.914 204.247 cv362.914 208.82 li362.914 209.193 362.968 209.432 363.079 209.539 cv363.189 209.645 363.397 209.729 363.701 209.79 cv363.701 210.197 li359.62 210.197 li359.62 209.79 licp355.644 199.726 mo355.644 199.36 355.773 199.046 356.03 198.788 cv356.286 198.529 356.596 198.399 356.96 198.399 cv357.319 198.399 357.626 198.529 357.882 198.788 cv358.138 199.046 358.266 199.36 358.266 199.726 cv358.266 200.094 358.138 200.408 357.882 200.667 cv357.626 200.925 357.319 201.054 356.96 201.054 cv356.596 201.054 356.286 200.925 356.03 200.667 cv355.773 200.408 355.644 200.094 355.644 199.726 cvcp354.907 209.79 mo355.204 209.738 355.408 209.663 355.518 209.562 cv355.683 209.414 355.765 209.143 355.765 208.753 cv355.765 203.731 li355.765 203.383 355.708 203.147 355.592 203.021 cv355.476 202.895 355.248 202.801 354.907 202.739 cv354.907 202.332 li358.156 202.332 li358.156 208.82 li358.156 209.193 358.211 209.432 358.321 209.539 cv358.431 209.645 358.636 209.729 358.938 209.79 cv358.938 210.197 li354.907 210.197 li354.907 209.79 licp348.466 207.608 mo348.94 207.608 li349.105 208.426 349.416 209.003 349.867 209.34 cv350.319 209.676 350.781 209.844 351.256 209.844 cv351.691 209.844 352.01 209.747 352.214 209.548 cv352.418 209.351 352.52 209.091 352.52 208.769 cv352.52 208.463 352.41 208.202 352.191 207.986 cv352.07 207.869 351.875 207.743 351.604 207.61 cv350.349 206.993 li349.688 206.665 349.212 206.31 348.926 205.927 cv348.634 205.542 348.489 205.089 348.489 204.568 cv348.489 203.907 348.717 203.335 349.175 202.855 cv349.632 202.375 350.272 202.133 351.092 202.133 cv351.451 202.133 351.832 202.194 352.234 202.315 cv352.636 202.436 352.886 202.497 352.986 202.497 cv353.124 202.497 353.221 202.468 353.279 202.408 cv353.336 202.348 353.385 202.264 353.423 202.156 cv353.798 202.156 li353.798 204.623 li353.369 204.623 li353.208 204.046 352.947 203.582 352.584 203.232 cv352.22 202.881 351.795 202.707 351.311 202.707 cv350.937 202.707 350.657 202.812 350.472 203.024 cv350.288 203.235 350.196 203.462 350.196 203.708 cv350.196 203.909 350.279 204.108 350.444 204.307 cv350.603 204.514 350.905 204.725 351.352 204.941 cv352.278 205.392 li352.851 205.67 353.269 205.941 353.534 206.203 cv353.974 206.647 354.195 207.194 354.195 207.845 cv354.195 208.48 353.967 209.071 353.513 209.619 cv353.057 210.166 352.375 210.439 351.464 210.439 cv351.238 210.439 351.011 210.416 350.781 210.369 cv350.552 210.321 350.27 210.238 349.934 210.121 cv349.644 210.019 li349.539 209.981 349.474 209.958 349.45 209.953 cv349.424 209.948 349.393 209.944 349.355 209.944 cv349.261 209.944 349.179 209.982 349.111 210.058 cv349.041 210.133 348.962 210.26 348.874 210.439 cv348.466 210.439 li348.466 207.608 lif378.014 203.863 mo378.031 203.786 378.057 203.678 378.093 203.542 cv378.127 203.406 378.152 203.308 378.166 203.246 cv378.477 201.817 378.548 200.77 378.379 200.108 cv378.21 199.447 377.788 199.115 377.111 199.115 cv376.406 199.115 375.811 199.488 375.327 200.233 cv374.842 200.979 374.408 202.188 374.027 203.863 cv378.014 203.863 licp373.895 204.468 mo373.809 204.861 li373.395 206.755 373.258 208.082 373.398 208.839 cv373.538 209.598 373.97 209.976 374.698 209.976 cv375.441 209.976 376.037 209.606 376.489 208.866 cv376.939 208.124 377.405 206.658 377.882 204.468 cv373.895 204.468 licp377.197 198.708 mo378.355 198.708 379.139 199.194 379.551 200.163 cv379.961 201.133 379.969 202.527 379.572 204.344 cv379.145 206.301 378.508 207.801 377.664 208.843 cv376.818 209.885 375.817 210.406 374.659 210.406 cv373.435 210.406 372.624 209.911 372.226 208.918 cv371.828 207.926 371.843 206.446 372.273 204.478 cv372.669 202.661 373.301 201.244 374.168 200.229 cv375.035 199.215 376.044 198.708 377.197 198.708 cvf385.479 208.186 mo385.479 208.487 385.543 208.729 385.673 208.917 cv385.802 209.102 385.977 209.195 386.198 209.195 cv386.863 209.195 387.51 208.403 388.136 206.819 cv388.666 205.502 388.929 204.535 388.929 203.918 cv388.929 203.702 388.902 203.527 388.847 203.393 cv388.743 203.148 388.549 203.026 388.269 203.026 cv387.642 203.026 387.003 203.732 386.355 205.143 cv385.771 206.405 385.479 207.419 385.479 208.186 cvcp387.961 202.321 mo388.27 202.321 388.537 202.385 388.763 202.513 cv388.895 202.59 389.039 202.71 389.193 202.872 cv389.953 200.05 li389.969 199.995 389.98 199.938 389.986 199.882 cv389.991 199.827 389.994 199.773 389.994 199.724 cv389.994 199.523 389.933 199.385 389.812 199.312 cv389.691 199.241 389.519 199.204 389.298 199.204 cv388.95 199.204 li388.95 198.751 li389.678 198.684 li390.248 198.634 390.686 198.584 390.995 198.534 cv391.305 198.483 391.807 198.391 392.502 198.255 cv390.608 205.18 li390.46 205.719 390.262 206.458 390.016 207.4 cv389.768 208.34 389.644 208.858 389.644 208.954 cv389.644 209.036 389.665 209.098 389.707 209.136 cv389.748 209.175 389.798 209.195 389.859 209.195 cv389.986 209.195 390.161 209.058 390.383 208.783 cv390.605 208.508 390.799 208.239 390.964 207.971 cv391.339 208.247 li390.892 208.912 390.528 209.387 390.248 209.669 cv389.755 210.168 389.278 210.418 388.814 210.418 cv388.572 210.418 388.365 210.357 388.193 210.234 cv387.923 210.052 387.788 209.741 387.788 209.303 cv387.788 209.232 387.803 209.105 387.834 208.926 cv387.864 208.746 387.907 208.52 387.961 208.247 cv387.554 208.915 387.202 209.393 386.904 209.68 cv386.386 210.187 385.813 210.439 385.186 210.439 cv384.689 210.439 384.263 210.247 383.908 209.861 cv383.552 209.474 383.375 208.896 383.375 208.122 cv383.375 206.906 383.876 205.642 384.878 204.33 cv385.903 202.991 386.931 202.321 387.961 202.321 cvf399.468 203.863 mo399.485 203.786 399.511 203.678 399.547 203.542 cv399.582 203.406 399.606 203.308 399.621 203.246 cv399.931 201.817 400.003 200.77 399.834 200.108 cv399.666 199.447 399.242 199.115 398.566 199.115 cv397.861 199.115 397.265 199.488 396.781 200.233 cv396.296 200.979 395.863 202.188 395.481 203.863 cv399.468 203.863 licp395.349 204.468 mo395.263 204.861 li394.849 206.755 394.712 208.082 394.852 208.839 cv394.993 209.598 395.426 209.976 396.152 209.976 cv396.895 209.976 397.492 209.606 397.943 208.866 cv398.393 208.124 398.859 206.658 399.336 204.468 cv395.349 204.468 licp398.651 198.708 mo399.809 198.708 400.593 199.194 401.005 200.163 cv401.418 201.133 401.424 202.527 401.028 204.344 cv400.599 206.301 399.963 207.801 399.118 208.843 cv398.274 209.885 397.271 210.406 396.113 210.406 cv394.889 210.406 394.078 209.911 393.68 208.918 cv393.282 207.926 393.297 206.446 393.727 204.478 cv394.125 202.661 394.755 201.244 395.623 200.229 cv396.489 199.215 397.499 198.708 398.651 198.708 cvf406.932 208.186 mo406.932 208.487 406.997 208.729 407.126 208.917 cv407.255 209.102 407.43 209.195 407.651 209.195 cv408.316 209.195 408.962 208.403 409.589 206.819 cv410.118 205.502 410.382 204.535 410.382 203.918 cv410.382 203.702 410.355 203.527 410.3 203.393 cv410.195 203.148 410.002 203.026 409.721 203.026 cv409.095 203.026 408.457 203.732 407.807 205.143 cv407.224 206.405 406.932 207.419 406.932 208.186 cvcp409.415 202.321 mo409.723 202.321 409.99 202.385 410.216 202.513 cv410.348 202.59 410.492 202.71 410.645 202.872 cv411.406 200.05 li411.422 199.995 411.433 199.938 411.439 199.882 cv411.444 199.827 411.447 199.773 411.447 199.724 cv411.447 199.523 411.386 199.385 411.265 199.312 cv411.144 199.241 410.972 199.204 410.751 199.204 cv410.403 199.204 li410.403 198.751 li411.131 198.684 li411.7 198.634 412.139 198.584 412.45 198.534 cv412.757 198.483 413.26 198.391 413.956 198.255 cv412.061 205.18 li411.914 205.719 411.715 206.458 411.469 207.4 cv411.221 208.34 411.098 208.858 411.098 208.954 cv411.098 209.036 411.119 209.098 411.161 209.136 cv411.202 209.175 411.251 209.195 411.312 209.195 cv411.439 209.195 411.614 209.058 411.836 208.783 cv412.06 208.508 412.253 208.239 412.418 207.971 cv412.792 208.247 li412.346 208.912 411.981 209.387 411.7 209.669 cv411.208 210.168 410.731 210.418 410.268 210.418 cv410.025 210.418 409.818 210.357 409.647 210.234 cv409.376 210.052 409.241 209.741 409.241 209.303 cv409.241 209.232 409.256 209.105 409.287 208.926 cv409.317 208.746 409.359 208.52 409.415 208.247 cv409.007 208.915 408.655 209.393 408.357 209.68 cv407.839 210.187 407.266 210.439 406.638 210.439 cv406.143 210.439 405.716 210.247 405.361 209.861 cv405.005 209.474 404.828 208.896 404.828 208.122 cv404.828 206.906 405.329 205.642 406.333 204.33 cv407.357 202.991 408.384 202.321 409.415 202.321 cvf419.607 202.805 mo418.253 209.834 li418.87 209.717 419.422 209.344 419.911 208.713 cv420.398 208.084 420.747 207.292 420.957 206.337 cv421.172 205.343 421.155 204.521 420.903 203.871 cv420.649 203.222 420.216 202.868 419.607 202.805 cvcp418.742 202.805 mo418.1 202.868 417.514 203.221 416.981 203.867 cv416.45 204.514 416.074 205.337 415.856 206.337 cv415.648 207.286 415.654 208.081 415.873 208.718 cv416.091 209.357 416.481 209.729 417.042 209.834 cv418.742 202.805 licp419.699 202.31 mo420.756 202.344 421.53 202.728 422.023 203.464 cv422.516 204.202 422.634 205.159 422.377 206.335 cv422.127 207.476 421.62 208.411 420.85 209.141 cv420.081 209.872 419.177 210.28 418.137 210.362 cv417.383 213.821 li416.171 213.821 li416.925 210.362 li415.922 210.291 415.189 209.885 414.729 209.149 cv414.27 208.414 414.164 207.476 414.413 206.335 cv414.668 205.164 415.206 204.208 416.024 203.469 cv416.841 202.73 417.79 202.344 418.866 202.31 cv419.681 198.994 li420.349 198.994 li419.699 202.31 lifgsave % PSGState0 275.024 mo283.631 275.024 li283.631 0 li0 0 li0 275.024 liclp1.00201 lw0 lc1 lj10 ml[] 0 dshtrue sadj282.492 137.186 mo282.492 61.0831 219.209 -0.680665 141.237 -0.680665 cv63.2637 -0.680665 -0.0185547 61.0831 -0.0185547 137.186 cv-0.0185547 213.288 63.2637 275.051 141.237 275.051 cv219.209 275.051 282.492 213.288 282.492 137.186 cvcp282.492 137.186 mo282.492 118.16 219.209 102.721 141.237 102.721 cv63.2637 102.721 -0.0185547 118.16 -0.0185547 137.186 cv-0.0185547 156.211 63.2637 171.652 141.237 171.652 cv219.209 171.652 282.492 156.211 282.492 137.186 cvcp/1 [/DeviceCMYK] add_csa0 0 0 1 cmyk@[1.00201 3.006 ] 0 dsh233.356 137.662 mo233.356 62.7784 195.562 2.00489 148.989 2.00489 cv102.419 2.00489 64.6231 62.7784 64.6231 137.662 cv64.6231 212.545 102.419 273.32 148.989 273.32 cv195.562 273.32 233.356 212.545 233.356 137.662 cvcp238.717 42.3526 mo238.717 32.6436 195.045 24.7627 141.237 24.7627 cv87.4268 24.7627 43.7559 32.6436 43.7559 42.3526 cv43.7559 52.0626 87.4268 59.9434 141.237 59.9434 cv195.045 59.9434 238.717 52.0626 238.717 42.3526 cvcp@grestore % PSGState1.00201 lw0 lc1 lj10 ml[] 0 dshtrue sadj141.256 137.158 mo194.225 59.6075 li141.256 137.158 mo219.608 55.2989 li137.945 139.312 mo203.052 83.3018 li140.151 137.158 mo227.334 77.918 li0 0 0 1 cmyk@gsave % PSGState0 275.024 mo283.631 275.024 li283.631 0 li0 0 li0 275.024 liclp2.00401 lw194.225 60.6856 mo208.571 58.5313 li218.504 56.375 li225.124 68.2237 li227.334 77.918 li215.195 81.1485 li203.052 83.3018 li199.745 72.5342 li194.225 60.6856 licp@1.00201 lw142.358 138.234 mo273.807 138.234 li@grestore % PSGState268.29 132.847 mo269.394 143.618 li282.636 138.234 lief268.29 132.847 mo269.394 143.618 li282.636 138.234 li268.29 132.847 licp141.256 138.234 mo141.256 9.61231 li@135.737 14.9981 mo146.774 13.9209 li141.256 0.995118 lief135.737 14.9981 mo146.774 13.9209 li141.256 0.995118 li135.737 14.9981 licp141.845 136.656 mo72.7842 161.695 li@80.586 161.695 mo72.003 154.84 li66.5411 167.79 lief80.586 161.695 mo72.003 154.84 li66.5411 167.79 li80.586 161.695 licp@[1.00201 1.00201 ] 0 dsh141.256 42.3741 mo194.225 59.6075 li141.256 42.3741 mo217.4 56.375 li142.358 139.312 mo207.468 167.314 li66.2129 109.155 mo231.747 164.084 li@[] 0 dsh208.712 161.213 mo238.508 155.034 261.444 146.862 262.646 139.158 cv180.298 74.0743 mo168.498 58.9571 157.768 50.961 143.963 50.961 cv143.264 50.961 139.746 50.9834 139.047 51.0245 cv141.256 136.08 mo208.571 161.929 li140.151 137.158 mo44.1416 42.3741 li141.256 41.296 mo46.3497 41.296 li@51.8663 36.9893 mo43.0372 40.2198 li51.8663 44.5293 lief51.8663 36.9893 mo43.0372 40.2198 li51.8663 44.5293 li51.8663 36.9893 licp@43.0372 44.5293 mo45.2481 53.1436 li51.8663 47.7598 lief43.0372 44.5293 mo45.2481 53.1436 li51.8663 47.7598 li43.0372 44.5293 licp@239.783 73.0059 mo239.783 73.4249 239.874 73.7647 240.055 74.0254 cv240.239 74.2872 240.485 74.417 240.796 74.417 cv241.735 74.417 242.647 73.3086 243.532 71.0909 cv244.279 69.2471 244.65 67.8936 244.65 67.0303 cv244.65 66.7276 244.612 66.4825 244.535 66.293 cv244.386 65.9522 244.115 65.7813 243.718 65.7813 cv242.833 65.7813 241.932 66.7696 241.016 68.7461 cv240.194 70.5108 239.783 71.9317 239.783 73.0059 cvcp243.285 64.7872 mo243.718 64.7872 244.096 64.877 244.415 65.0557 cv244.6 65.1641 244.803 65.3311 245.021 65.5586 cv246.084 61.6065 li246.108 61.5294 246.125 61.4522 246.133 61.3721 cv246.14 61.294 246.144 61.2208 246.144 61.1495 cv246.144 60.8672 246.059 60.6768 245.886 60.5733 cv245.716 60.4727 245.475 60.4219 245.163 60.4219 cv244.672 60.4219 li244.672 59.7862 li245.697 59.6924 li246.497 59.6221 247.115 59.5547 247.548 59.4844 cv247.984 59.4161 248.69 59.2872 249.668 59.1026 cv247.016 68.7901 li246.806 69.546 246.526 70.5831 246.176 71.9004 cv245.825 73.2208 245.65 73.9454 245.65 74.0772 cv245.65 74.1954 245.679 74.2813 245.737 74.335 cv245.794 74.3897 245.868 74.417 245.953 74.417 cv246.131 74.417 246.379 74.2237 246.694 73.836 cv247.009 73.4493 247.283 73.0684 247.517 72.6934 cv248.045 73.0821 li247.414 74.0127 246.9 74.6788 246.503 75.0752 cv245.811 75.7764 245.137 76.125 244.485 76.125 cv244.141 76.125 243.85 76.0391 243.609 75.8692 cv243.226 75.6124 243.037 75.1778 243.037 74.5645 cv243.037 74.4629 243.057 74.2872 243.1 74.0342 cv243.142 73.7823 243.203 73.4678 243.282 73.087 cv242.706 74.0206 242.208 74.6885 241.791 75.0948 cv241.059 75.8018 240.252 76.1563 239.367 76.1563 cv238.668 76.1563 238.068 75.8858 237.567 75.3458 cv237.066 74.8028 236.815 73.9932 236.815 72.9102 cv236.815 71.2081 237.522 69.4366 238.937 67.6006 cv240.381 65.7247 241.831 64.7872 243.285 64.7872 cvf251.938 67.7842 mo251.938 68.334 li251.938 70.9893 252.153 72.8467 252.585 73.9112 cv253.018 74.9727 253.748 75.504 254.775 75.504 cv255.826 75.504 256.555 74.9834 256.962 73.9454 cv257.372 72.9073 257.576 70.8526 257.576 67.7842 cv251.938 67.7842 licp257.576 66.9463 mo257.576 66.837 257.58 66.6856 257.588 66.4961 cv257.595 66.3057 257.599 66.168 257.599 66.0831 cv257.599 64.0811 257.378 62.6143 256.934 61.6885 cv256.491 60.7618 255.79 60.2979 254.833 60.2979 cv253.837 60.2979 253.112 60.8204 252.656 61.8633 cv252.202 62.9073 251.961 64.6016 251.938 66.9463 cv257.576 66.9463 licp254.829 59.7237 mo256.464 59.7237 257.721 60.4024 258.601 61.7618 cv259.481 63.1192 259.922 65.0723 259.922 67.6182 cv259.922 70.3594 259.486 72.459 258.613 73.92 cv257.741 75.3799 256.488 76.1094 254.852 76.1094 cv253.123 76.1094 251.826 75.4141 250.958 74.0254 cv250.089 72.6348 249.656 70.5606 249.656 67.8067 cv249.656 65.2598 250.11 63.2764 251.021 61.8555 cv251.931 60.4346 253.203 59.7237 254.829 59.7237 cvf186.924 45.1163 mo186.924 45.5342 187.028 45.877 187.237 46.1377 cv187.445 46.3975 187.725 46.5274 188.08 46.5274 cv189.152 46.5274 190.192 45.419 191.203 43.2022 cv192.053 41.3565 192.479 40.003 192.479 39.1397 cv192.479 38.837 192.433 38.5918 192.345 38.4063 cv192.176 38.0616 191.868 37.8907 191.416 37.8907 cv190.405 37.8907 189.377 38.8799 188.333 40.8555 cv187.392 42.6221 186.924 44.042 186.924 45.1163 cvcp190.928 36.8965 mo191.425 36.8965 191.856 36.9864 192.22 37.1651 cv192.433 37.2754 192.664 37.4434 192.913 37.668 cv194.135 33.7286 li194.163 33.6514 194.181 33.5733 194.189 33.4961 cv194.197 33.419 194.203 33.3448 194.203 33.2725 cv194.203 32.9932 194.105 32.8028 193.91 32.7002 cv193.712 32.5997 193.437 32.5489 193.082 32.5489 cv192.52 32.5489 li192.52 31.9122 li193.616 31.8184 li194.471 31.75 195.132 31.6807 195.596 31.6104 cv196.062 31.5401 196.816 31.4151 197.863 31.2276 cv195.214 40.9014 li194.974 41.6553 194.655 42.6924 194.255 44.0127 cv193.854 45.3311 193.655 46.0577 193.655 46.1895 cv193.655 46.3057 193.688 46.3907 193.755 46.4463 cv193.822 46.5 193.904 46.5274 194.003 46.5274 cv194.209 46.5274 194.494 46.335 194.855 45.9463 cv195.217 45.5606 195.532 45.1797 195.8 44.8038 cv196.399 45.1915 li195.674 46.125 195.085 46.7891 194.629 47.1856 cv193.835 47.8868 193.061 48.2364 192.312 48.2364 cv191.919 48.2364 191.584 48.1504 191.308 47.9795 cv190.871 47.7237 190.652 47.2891 190.652 46.6778 cv190.652 46.5752 190.676 46.3995 190.726 46.1475 cv190.774 45.8936 190.843 45.5782 190.932 45.1973 cv190.274 46.1309 189.706 46.8018 189.226 47.2051 cv188.392 47.9141 187.468 48.2666 186.456 48.2666 cv185.656 48.2666 184.97 47.9961 184.397 47.4551 cv183.825 46.9161 183.539 46.1045 183.539 45.0225 cv183.539 43.3174 184.345 41.5469 185.96 39.71 cv187.613 37.835 189.268 36.8965 190.928 36.8965 cvf204.779 37.5645 mo205.073 47.4278 li206.024 47.2657 206.783 46.7403 207.347 45.8584 cv207.913 44.9727 208.196 43.8604 208.196 42.5206 cv208.196 41.125 207.876 39.9727 207.241 39.0626 cv206.605 38.1495 205.785 37.6504 204.779 37.5645 cvcp203.381 37.5645 mo202.367 37.6504 201.543 38.1475 200.91 39.0557 cv200.278 39.9629 199.962 41.1182 199.962 42.5206 cv199.962 43.8516 200.251 44.9659 200.832 45.8633 cv201.41 46.7588 202.171 47.2803 203.116 47.4278 cv203.381 37.5645 licp204.753 36.8819 mo206.471 36.9288 207.857 37.4688 208.912 38.5 cv209.966 39.5293 210.494 40.8692 210.494 42.5206 cv210.494 44.1163 210.001 45.4249 209.019 46.4473 cv208.035 47.4737 206.719 48.042 205.073 48.1573 cv205.073 52.9883 li203.116 52.9883 li203.116 48.1573 li201.47 48.0567 200.148 47.4922 199.149 46.46 cv198.149 45.4288 197.649 44.1163 197.649 42.5206 cv197.649 40.878 198.176 39.5391 199.236 38.5049 cv200.293 37.4698 201.684 36.9288 203.408 36.8819 cv203.555 32.254 li204.633 32.254 li204.753 36.8819 lif229.903 145.138 mo230.231 155.001 li231.296 154.839 232.145 154.314 232.777 153.429 cv233.409 152.544 233.725 151.434 233.725 150.094 cv233.725 148.699 233.369 147.546 232.659 146.633 cv231.947 145.723 231.028 145.223 229.903 145.138 cvcp228.338 145.138 mo227.203 145.223 226.283 145.72 225.576 146.628 cv224.869 147.537 224.515 148.692 224.515 150.094 cv224.515 151.425 224.838 152.54 225.486 153.434 cv226.133 154.333 226.985 154.854 228.042 155.001 cv228.338 145.138 licp229.875 144.456 mo231.793 144.502 233.342 145.042 234.521 146.073 cv235.699 147.103 236.288 148.443 236.288 150.094 cv236.288 151.69 235.739 152.998 234.64 154.021 cv233.541 155.044 232.07 155.616 230.231 155.731 cv230.231 160.561 li228.042 160.561 li228.042 155.731 li226.199 155.63 224.72 155.063 223.601 154.034 cv222.48 153.002 221.92 151.69 221.92 150.094 cv221.92 148.452 222.513 147.113 223.697 146.079 cv224.881 145.043 226.439 144.502 228.369 144.456 cv228.532 139.828 li229.739 139.828 li229.875 144.456 lif160.287 79.7364 mo160.287 80.2862 li160.287 82.9405 160.503 84.7999 160.934 85.8624 cv161.367 86.9258 162.096 87.4561 163.124 87.4561 cv164.174 87.4561 164.904 86.9385 165.311 85.8975 cv165.72 84.8584 165.924 82.8047 165.924 79.7364 cv160.287 79.7364 licp165.924 78.8985 mo165.924 78.7891 165.928 78.6397 165.937 78.4493 cv165.944 78.2579 165.948 78.1202 165.948 78.0332 cv165.948 76.0323 165.726 74.5694 165.283 73.6407 cv164.839 72.7139 164.14 72.25 163.183 72.25 cv162.186 72.25 161.46 72.7725 161.004 73.8174 cv160.55 74.8594 160.309 76.5547 160.287 78.8985 cv165.924 78.8985 licp163.177 71.6758 mo164.813 71.6758 166.07 72.3545 166.95 73.7139 cv167.83 75.0733 168.269 77.0245 168.269 79.5713 cv168.269 82.3126 167.834 84.4112 166.962 85.8721 cv166.089 87.3321 164.836 88.0616 163.202 88.0616 cv161.472 88.0616 160.174 87.3663 159.305 85.9766 cv158.438 84.5889 158.002 82.5157 158.002 79.7588 cv158.002 77.2129 158.459 75.2286 159.37 73.8077 cv160.282 72.3868 161.549 71.6758 163.177 71.6758 cvf101.832 89.7579 mo102.49 87.4776 103.025 85.5166 103.442 83.8741 cv103.959 82.1075 104.217 81.0567 104.217 80.7208 cv104.217 80.4268 104.113 80.2354 103.905 80.1485 cv103.697 80.0626 103.34 80.0206 102.836 80.0206 cv102.836 79.3829 li103.948 79.3204 104.885 79.2413 105.65 79.1407 cv106.145 79.0782 106.987 78.9493 108.175 78.7471 cv106.758 82.9864 li106.871 83.0098 li107.606 81.6866 108.196 80.7491 108.637 80.1954 cv109.415 79.2295 110.162 78.7471 110.88 78.7471 cv111.38 78.7471 111.75 78.9024 111.989 79.2149 cv112.227 79.5245 112.345 79.8731 112.345 80.253 cv112.345 80.7129 112.214 81.125 111.952 81.4922 cv111.687 81.8575 111.323 82.0391 110.854 82.0391 cv110.645 82.0391 110.451 82 110.272 81.9229 cv110.091 81.8438 109.939 81.7266 109.813 81.5694 cv109.577 81.2881 li109.534 81.2413 109.49 81.2032 109.445 81.17 cv109.399 81.1387 109.337 81.1231 109.262 81.1231 cv108.936 81.1231 108.511 81.5362 107.985 82.3643 cv107.458 83.1905 107.014 84.0313 106.655 84.8897 cv106.406 85.4815 106.098 86.3223 105.731 87.4122 cv105.365 88.502 105.094 89.2842 104.919 89.7579 cv101.832 89.7579 lif69.9512 37.9659 mo70.6094 35.6797 71.1485 33.7149 71.5655 32.0704 cv72.0469 30.2999 72.2901 29.2481 72.2901 28.9122 cv72.2901 28.6172 72.1915 28.4249 71.9961 28.3389 cv71.8018 28.254 71.4678 28.211 70.9893 28.211 cv70.9893 27.5752 li72.0098 27.5118 72.8692 27.4307 73.5704 27.3311 cv74.0235 27.2696 74.796 27.1368 75.8858 26.9376 cv74.5645 31.1807 li74.668 31.2042 li75.3506 29.8809 75.8975 28.9405 76.3077 28.3877 cv77.0294 27.421 77.7227 26.9376 78.3907 26.9376 cv78.8565 26.9376 79.1993 27.0928 79.421 27.4053 cv79.6407 27.7168 79.753 28.0606 79.753 28.4434 cv79.753 28.9024 79.6299 29.3155 79.3848 29.6807 cv79.1397 30.0479 78.7999 30.2295 78.3643 30.2295 cv78.171 30.2295 77.9903 30.1915 77.8233 30.1114 cv77.6553 30.0342 77.5137 29.917 77.3965 29.7598 cv77.1768 29.4795 li77.1368 29.4307 77.0967 29.3907 77.0538 29.3604 cv77.0108 29.3292 76.9551 29.3145 76.8848 29.3145 cv76.5811 29.3145 76.1846 29.7276 75.6963 30.5557 cv75.2061 31.3848 74.794 32.2276 74.46 33.0879 cv74.2256 33.6807 73.9376 34.5235 73.5948 35.6133 cv73.252 36.7051 72.9991 37.4893 72.835 37.9659 cv69.9512 37.9659 lif102.93 37.9659 mo105.023 30.3155 li105.108 30.0049 105.17 29.7588 105.21 29.5801 cv105.288 29.2442 105.328 29.0108 105.328 28.878 cv105.328 28.5899 105.237 28.4092 105.057 28.3389 cv104.878 28.2686 104.53 28.2266 104.013 28.211 cv104.013 27.5752 li105.006 27.5118 105.778 27.4424 106.33 27.3672 cv106.879 27.2881 107.701 27.1456 108.794 26.9376 cv107.377 31.3487 li107.434 31.3799 li107.395 31.418 107.629 31.0626 108.139 30.3155 cv108.647 29.5684 109.133 28.96 109.594 28.4961 cv110.047 28.0225 110.524 27.6436 111.021 27.3633 cv111.518 27.0792 112.04 26.9376 112.588 26.9376 cv113.097 26.9376 113.529 27.0801 113.885 27.3682 cv114.242 27.6573 114.419 28.127 114.419 28.7823 cv114.419 29.3907 114.068 30.7334 113.365 32.8086 cv112.656 34.878 112.301 35.9864 112.301 36.1338 cv112.301 36.2745 112.344 36.3829 112.429 36.4561 cv112.515 36.5303 112.6 36.5674 112.687 36.5674 cv112.898 36.5674 113.209 36.3018 113.622 35.7715 cv113.841 35.4893 114.078 35.1426 114.335 34.7286 cv114.864 35.0684 li114.279 36.0293 113.783 36.7188 113.375 37.1407 cv112.667 37.8663 111.917 38.2295 111.126 38.2295 cv110.703 38.2295 110.323 38.1045 109.986 37.8555 cv109.65 37.6045 109.482 37.209 109.482 36.6729 cv109.482 36.3282 109.563 35.8301 109.727 35.1729 cv109.889 34.5186 110.081 33.8428 110.301 33.1485 cv111.398 29.5665 li111.421 29.4805 111.441 29.4073 111.457 29.3448 cv111.472 29.2823 111.48 29.2188 111.48 29.1573 cv111.48 28.9776 111.42 28.8516 111.299 28.7823 cv111.179 28.712 111.048 28.6768 110.91 28.6768 cv110.419 28.6768 109.876 29.0577 109.278 29.8194 cv108.679 30.5792 108.189 31.3399 107.808 32.0958 cv107.397 32.9151 107.055 33.7452 106.783 34.586 cv106.511 35.4278 106.186 36.5538 105.809 37.9659 cv102.93 37.9659 licp100.97 21.625 mo101.416 21.625 101.794 21.7803 102.105 22.0928 cv102.417 22.4043 102.572 22.7833 102.572 23.2276 cv102.572 23.6709 102.417 24.0528 102.105 24.3663 cv101.794 24.6836 101.416 24.8399 100.97 24.8399 cv100.527 24.8399 100.146 24.6836 99.8301 24.3663 cv99.5147 24.0528 99.3565 23.6709 99.3565 23.2276 cv99.3565 22.7833 99.5147 22.4043 99.8301 22.0928 cv100.146 21.7803 100.527 21.625 100.97 21.625 cvcp96.335 36.5938 mo96.335 36.3995 96.3819 36.0938 96.4756 35.6729 cv96.5294 35.4317 96.6124 35.1133 96.7208 34.7159 cv98.1973 29.3233 li98.2139 29.2618 98.2276 29.1993 98.2383 29.1377 cv98.251 29.0762 98.2559 29.0166 98.2559 28.96 cv98.2559 28.6407 98.1544 28.4424 97.9532 28.3624 cv97.751 28.2852 97.3829 28.2344 96.8477 28.211 cv96.8477 27.5752 li97.2969 27.543 97.9473 27.4786 98.8018 27.3838 cv99.6553 27.2872 100.26 27.2032 100.617 27.1338 cv101.637 26.9376 li99.7666 33.7666 li99.6094 34.3526 99.504 34.7598 99.4473 34.9854 cv99.3086 35.5635 99.2383 35.9385 99.2383 36.1104 cv99.2383 36.2813 99.2764 36.3946 99.3545 36.4454 cv99.4317 36.4961 99.5176 36.5206 99.6124 36.5206 cv99.8516 36.5206 100.153 36.3135 100.51 35.8975 cv100.868 35.4844 101.183 35.0489 101.454 34.5948 cv101.983 34.9366 li101.205 36.0801 100.61 36.8516 100.198 37.2491 cv99.5206 37.9034 98.7969 38.2295 98.0274 38.2295 cv97.5928 38.2295 97.2012 38.0948 96.8545 37.8282 cv96.5088 37.5577 96.335 37.1475 96.335 36.5938 cvcp87.3379 34.3301 mo87.9659 34.377 li88.0831 35.5518 88.3819 36.375 88.8624 36.8516 cv89.3448 37.3252 89.8165 37.5616 90.2832 37.5616 cv90.6856 37.5616 91.0079 37.4336 91.2491 37.1768 cv91.4883 36.919 91.6094 36.6163 91.6094 36.2666 cv91.6094 35.9483 91.502 35.5967 91.2891 35.2159 cv91.0752 34.836 90.8252 34.4649 90.5372 34.1075 cv89.6514 32.9991 li89.2637 32.5801 88.9346 32.0899 88.6612 31.5293 cv88.3907 30.9708 88.254 30.4112 88.254 29.8526 cv88.254 29.0596 88.5528 28.376 89.1514 27.7999 cv89.7481 27.2256 90.5586 26.9376 91.5831 26.9376 cv92.003 26.9376 92.4454 27.0274 92.9112 27.2061 cv93.376 27.3868 93.6836 27.4756 93.8311 27.4756 cv94.0176 27.4756 94.1573 27.4307 94.2491 27.3448 cv94.3428 27.2579 94.4278 27.1338 94.5049 26.9688 cv95.1963 26.9688 li94.6524 30.6182 li94.0245 30.5606 li93.876 29.5499 93.6006 28.8223 93.1973 28.378 cv92.794 27.9356 92.3702 27.7139 91.9219 27.7139 cv91.4756 27.7139 91.1495 27.8458 90.9415 28.1104 cv90.7334 28.376 90.6309 28.667 90.6309 28.9864 cv90.6309 29.2657 90.7081 29.5381 90.8594 29.8086 cv91.0108 30.0772 91.3067 30.4874 91.7432 31.0381 cv92.9131 32.5333 li93.171 32.8594 93.4014 33.254 93.6036 33.7149 cv93.8077 34.1788 93.9082 34.6397 93.9082 35.0997 cv93.9082 36.0626 93.5606 36.8389 92.8682 37.4258 cv92.1758 38.0137 91.3301 38.3067 90.3331 38.3067 cv89.9122 38.3067 89.4629 38.2178 88.9834 38.0381 cv88.5049 37.8584 88.2139 37.7686 88.1133 37.7686 cv87.918 37.7686 87.7696 37.8233 87.669 37.9327 cv87.5684 38.0411 87.4854 38.1651 87.4239 38.3067 cv86.794 38.3067 li87.3379 34.3301 lif126.416 29.9346 mo126.416 30.4844 li126.416 33.1387 126.631 34.9981 127.064 36.0616 cv127.495 37.1231 128.225 37.6543 129.251 37.6543 cv130.302 37.6543 131.033 37.1338 131.44 36.0958 cv131.849 35.0577 132.054 33.003 132.054 29.9346 cv126.416 29.9346 licp132.054 29.0967 mo132.054 28.9874 132.058 28.8379 132.065 28.6465 cv132.073 28.4561 132.078 28.3184 132.078 28.2334 cv132.078 26.2315 131.854 24.7647 131.411 23.8389 cv130.967 22.9122 130.268 22.4483 129.311 22.4483 cv128.314 22.4483 127.588 22.9708 127.132 24.0137 cv126.678 25.0577 126.439 26.752 126.416 29.0967 cv132.054 29.0967 licp129.307 21.8741 mo130.941 21.8741 132.199 22.5528 133.079 23.9122 cv133.958 25.2715 134.399 27.2227 134.399 29.7696 cv134.399 32.5098 133.962 34.6094 133.09 36.0704 cv132.218 37.5303 130.964 38.2598 129.331 38.2598 cv127.601 38.2598 126.302 37.5645 125.435 36.1758 cv124.566 34.7842 124.132 32.7139 124.132 29.9571 cv124.132 27.4092 124.588 25.4268 125.499 24.0059 cv126.41 22.585 127.679 21.8741 129.307 21.8741 cvf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (luca) (ETHZ)%%Title: (angulo_solido_diferencial.eps)%%CreationDate: 2/13/06 6:30 PM%AI9_DataStream%Gb!R&GshG>ehDEb!8dfV'P+EM/Hm+28ejbu_#\1\;'m1+3W&X4rTlHnktFani:EOeh>;tjVTI!')O%QA^HXfK%pQ_U2`pk3dOPT0%-Gb$hNqIF4`oHf#o^:F3;jD$dib58,NDTud<G%s[+TZN.d2:'rkV[A0S.F>k=_TX+[\qU0W'?_EPMU,jhYcp=1Bm26lLio[BJQO4%]^[BRAaBZ)G!E*QgIX'tRhQZnc2PB+/tnWdXhk'$T#--T#QD?`T$7g_W-'#$S@bq0krVUc.Jt:T%D:K(]=mHF;P3VO_m^b&]@n<b%qt4)2%umF\.-G.T*.2LNb;BmI\/*?)s#`_qj+7]L2Ve#@HL620^";phD`A\1^W;d7]d=V>AhpFZrW`mn7npo8$n8lZpY1o/@;gl)%JVt0%[Hg\jh8eQ=hj+%\(oT289)4NIW7E?Pp'f3tW'?%lU:I#Z7lU$*Z2ROG16l':I,'b:_s6Fd6Q;^4JsVPiW(EEZ^hDTJn@32h%)e7scB\]?k%(m''/$6f'mRq4ODC<,8Dj\I&,*R+4l*[lYMDJRiHslH=K'lu4q*uPqK:U9@6Q+nY8+gX]BFO2i^^,Q2iOo<X1lE]'%.+W$Re97@Y]GKu8GdIFoJ4(gX_m8dRoC//=^h59tPd2k<Am'B$ZLF)ia\tc_\&hi:&%-X'^@=>8id%KAo9,oVR7KT66iuX!ck!d[%83j:F!c#PYn-QLC3N/4d_4.tT4NZ]XN[2G>8`G#?>E[pT,a!9V_usBJ&*]3=Kf>:[/F2iD-e*`&_'d`a0e"=ncX901$$BWDn-S,U%0L=QL0u55bK+YpIZpaCO>)!X*-]B!n6Rds#qBX]=rBi.R(OSOi8V/^/IK4D?@tI.$-28a(P*$FA$1%dQdQ9^sb`PeUr'2hN++-CJ%A-U/SaYP\^n/H,YpllXC=<[.Mptuh"_<Au<_^C!T9&L@t_>)rPbT`_nJlgAboVg+:5d&Ip11p_RJp""\n>>,tN1<-DO;#,p^SGFP%^.8^p#O9+g'Zu*V_:rMMj=-#u5+racD\sS4$$d=NTam%,j&[X5i>mM1dK?1\Kn^=G;5apH-^6r26/`2_:'ob`F9Lp*?\14e>aZ18%C]np[V=[Md-h!8^jG,uq30R/pR<*s!dXm.%#lSMn:>YO9'lMP]9>Qf]qh2Nq]%?-VhUZ@2iH/q&'eF.l!"^THKXWgT.'P2j.fGNR%adY+]i?.hhU`qDj0FW6$r?ab6)#:?5-9iP9a,q#%2u/<Na`m,2q%3c#>nE77"o0O0+]#K&j<pEChmMA&a5[t);PO+:5P[G;Y5K\3%Pkmc.3QrLkP'JA2Q#G_B)BTX9`AgGb7J'TUiY_d>j'j!VcNkC3/s:^_>i[\5)>odge-Cd/P*e3B7rS"/NL9,CL:dP:;fP\OIaE#/%b9TuWd<^sD:=Ocg"O[quP9c0Ncs,^4U_3[<eeX!2j>+<\E4Oan<c3PBET'*+TIF@m"rKd$eD=&oE@go)O#nNF8?Tc`$GP$[.DOs_%"?XsXl<E<t[==%GcS=p5>_JEa5PQM6bm<f7m5mek?hR87>tbK)#&oV!ORNY[7\L?+>=(Iqbi1DA4!SE`OQR6TM`*=-HRu((7kTQ4%a`EKY'G5uTU^UoG7]Ki.g*Y.1GEd8]a:e[u9H9^*qUX[8rl4RA,NF?@14n5/QFm`-k4->KnU/=+p>s%#S19!0=;@h`r'4kQinuK<%]0[sB9kBhu.;k\T0^%uD.%uS81hm1H+`n/F^aKL(i:4`#>i6J5A#t^!"?_#T*S6S@G`G%g^^5E.W)5L'(eRt-[A8Md9)CBh74M*s%8VVPb/b1ig!t@IMXbeclel<bF[UJh>hU\p(e5p7Sb_LdE67%M"J3K*$-E2)0W6gGlR+3+FT#un+d3qZL:77:PD*WHLW4&3nrh<PI%28a)r_QuX&aP8#^4`Efp5n?3_0]-],N.T2$fYZ-*CQt`:1uSb;9nG7>"f)C=MpaLu3NL@dV8>tX1n_u,70dN(#*A/kU!*PrB]X(h%,=<jsgX]t4j'E2L7!$H!,0LNEY0\o>"Ii4qUa[%VSAn8/E]lXcE`D:).FlFgq,Yq>U7N]NO+KJ!VK0PYAA6,iBUX`b8Xg1^2hI;c%FA3k9ftdRlR1D&*,J5d+Rs72i$f-3N70U:-H*$='ThfqB]W/a.q,B5[UlA73;FR$nN.0pY\.uLg/Z2Dek!VYT.1dqM7<!.;"H7!K%G=%M\g'fE,&.W1/TM(+7,."@Y?7@1"6mu-a3h#4$ph>^D2&sRm:=;T\c]6-m'W)Y_Z%Pl/p*:9':_d)"$N6)JKV"kYd0<"mbPFlo%;?A0,)Sl]M11Q4@ejH@A=gX:sAH#."$D%R3B_89nF]j@6G6O1&+67>g-0$me=9e$4))\qO(/^m%U*U50b?RfKqDM>'Q3`g*Xm'Rm%)?o*I,3i$5;6UB,!NjJ6.FPlOI@;IFdkm'@!`4!;"iQq&l]b27[q/]Xl8'S8k\Z#P[@T4sUt3n4M&p+D/t)%hR*&n_S^Ucl>Os>b%&m_Nh<nnmS.c]#(iaQ+acO.'nes]oh.s.[\'HLLi$D$Kr9Tp'Y4;(ZFBTV2e3TY*`/Y*"le?*\i`hA:.+S(03)H_/<9rW/!2r:VW%DJ]jt*n+^qi@<L^ABaMAoe7-?E>)V08U;H@L]ij:KV2H3MLHr,*Q`BQ"4R'"=g^rO_krH!V"8-2<Qe/cF1']M0W*3j2NoiP"<K_&%)<?IL;3F'-P&/mJGuH<>X<MX0O\odqVKmpHZiIoh6g<^$_HiV,7'I-K=E!"EE_6'skhPDErY-V\C88LV7>EXW`lU!T`/*e*>Bk/<%o"fAt>@KFJ+/FO(fBGD)]kl0YZ!LT8#-_q&oer6_70murDH4)s3\Le6+rfcMd@qO<)C6uO1SGR?kGdj)7erkOG^(u]`UhSN^6gYg%\JJGe]\\+h91?7<73>nH5b:=>6k:5,5Tj,fMe+`5@_bB:Q;;i&K%D"YV)G#=R;4)^-=ZiAaDt!.FZBd*FCZtVf"?-)9BJI8AmA-p%HJ:l>7It%e99Rj1Bi4;&[A6qogT(0'W@L4PeLSE-^;&VcJg-uDJOUYMF=kuC92eW#f"ZA&=!5l@H=Y`/Hp!t&<4*=c/u2k!5Jo:C%dp!S]>\uX,n;V&7.e8AG[%PQ1XCgk<2;+^+jI4=b8t!3S$PIj*<QrNb1E2\$,f?H\YlqZGV/#^t_K1AGp&*&_)G.=<&^GG9%Me5h%hpj8HAR([(Ufj-9PY=DZ>P!iI,c4HuD:%3%O%Rs?1h23+AJJH"2AsmiAA4=o,bh%n7[Z2\k#JP*.fEtdEKctNqd3JpdVNf4es*p\%4[a#`(s<f;$kc&"?\ud&g*EL_dZCpoK&Re!Xif;Ab9NqH2K`&jVMTCU9(c1!m-.__3,Nit$-X52Hf0!>Sgd]9!I2WF^(osa@21pp%\-^bq9QbC@gZk<.cY/Ta1ofJu>)ZofW)>bo=.^oU.qgF[Z&E"pTfTj?Akp\FH7Dt&TXs-N2qMSRFlet@l4KOo3`i$(XV%V$=)D\`%2+HZd8h72hOD0egNVZQ#!JZkRV(QVmL<WXXb=V<'(A'&D0g;J`NKPd)FmJ\R=S9670EaB0q#1"s$hfb*?b+Pa2YEuj/ot_^lArO;%RJJjk;JFJ>A$RhL^OP$t;!m*N2SD74pkeK;lHdkQo>tZ0/dsfd:E\+)2;6n"luGmV[mTf.QT%!o:VXQmdAS/Z)Crmi81X1K1=Oi]%g'=WnhnI[g>&EHfrI1q3WK4f?9rmD.Su_hB]t:X=WF):)[5RMUp%Qln.ntsp.k$C<eAa)s=Pgq[K>skIRguf[FX>c!:)&7+Wo"l+%VJ7pJWs2\2pFi@^H"1<q1R\_o;i=<?_gf)kUTk;gC.Wj+nikVPA%Q=R\k[1r6<L52HaC.=dA+Mp!en:PYPK)n(MXQm6/86uO%<eA%j/i/FJinT\S(U%)p=+/*2&uRALqe1uT"k_#8U]Hf]`l)>2t]Jk)tk7OH@p4PX]2",[iS/$Z@W%IlDWXd@gp"qb'8#8r]smDd3%8E%khk6apY,N87X84:o]aYRgLtkm8p(9:2s'QN+X#-M$n`Hj#-?j@9D*`Qd3OICeF;+E2ZZHJcU)?Fkp^2o:6`1f_.O?;Vaoa`(iY1O%-B=tE,JkeSbl8n(UP;Hr2N>na.e-V/Q@Bl'hpL5r[pB`P;4mbR^->m>DapierY!k#a`S2<<+`*!XuGjB6%=\?7,VR2-mja@`rBKG%r*T-r>cs1X*YhMDL<$WM`q%TRb[aV\JmcrseQW=KblOKh"5mPZ8[%"76Y,$F^B'/jlS/6T@NhSuBn#aOX\!jff.iDiXs2:kP?q`_%"$jd!;0[(3a_;c+*3dB]o#/*\OqD/J`u3+:rc%_]S53dm6-?(1%VFjQG8c]#/5?G!OSkHWi?:7PrjN@I`Xm;\Nb_Mn)ET.p)iP=U%>W$ge9UYnK6^<*7Mo<sa21O=3kOB!O6TZjs?Q>O:rEiI=$F8U)R9<c=aZ0!.kMQ<k1uPauC]=?#rS`<,7e93XNO'N%/&u0'q&`*<%R04<@":EhMGO9_V^P:8<YuGt.UCi/-/TBKpfjOeh24/mf>-fm&!QFh9Pbm%-J(]Wgi"noVea@RpS?6WTc:?nG)uD9-Q3.$E\/M+[%Z4;f[cAZ;330"PiG'5_=mhsj=!<,W5/Q,=C+'5l)dl1J4?FTn6-'XA#9S'(Sl7rQMDtXt4_sY1oD0npNnU,-s?2R$'d[mlps(Zn]%mJkDCq,VE7DtNn>R4P%WNak)WK7p]tR5IJ,8^#kAln^<^SLAZPA'OG;Xc1l:DF:6/NeoKBI8r`=^p0aH!6;[1"Wb<Zbt,G8Ho@r7%VrKh,fB,;r]3`ZBmJTgbSL+O-$1GAfDGSWs_7Yhqh+/9HU(iFjQ#>cknU0K4X&!Bq8ah.J7B`#h-\KGWhRRN"^Du+'%.g[LP.-3]%eRr_UnhtZRQ<*u&,)^o'JEt(PYKZDffBlUW51"HIVW3%Sns&b?&1T@OcFc44a2ATF)9iHY1?.=$k$-kPe-'X%hj^'l#5.5AN+QD4%fXTed]TPt)S!hSl.e],&VfW>:GrmLs'3m3]YBFuA8>]8Qf8%Vi\Mh*P0\5\%gYNh-20UpUZcVE$iI0FWEjOXB,Ed_fS,XU[kT[Ao%]J3HsIe9i;A.7e!Wd$h.BoXOBG&)(9]LOoUfd`&jfg!pGf[6KPR7>;EN7j4tW)auM7l,9=AC_MG.H?jlN=p69idBC#W.OXXidd=F%P1IDGT5diZHrdAE$DVTVmSI?We3\4e'MG;15RP[bN.u#gB8!FRp*J>?BGHFDX-uS`)FY'-g!lOZCW8C#M?\70SG=n-pZ8`A.Nu'+%XJ_8fk,Me]<dW8$hHlfY:92^,<^O<ciK]e,FU#X9;nZSIW]+a<OWa\Uo#;S2i'DX=2Lr::eaD0NdM^?)ds5H7A7/61eK7RJ,?8&P%;&Q>k5h:jpm4H`A*W/;1ouYO%eEKAXq<GQf7'koZe=MZ>Y3YeD"g&uaVD=;Fm?SW)(Y*Y)];Vhum@p`alG^;h]%CJ+e0iFq)sU.>%Rt2&La2kLO%6Gf4SgV+3=BE<@Om>CQc?@"*FpGCKc98QN`jkU6W%mV_q?q'rMZ@3deEQXmYo$H1_VV+V*J=?qWn!WHU,-=g.i+Ec%#=4npZT2:1N24b/hu#uWV_$he<3,cJd=8^.pU,\@T[mf)<SCV[7rH@>^dFCWB\HZcA5EZYp\8M\q4HcV7["lK.NN32fq1Z4F/K&Z%N%D05BZfjY[Y/@fVC(T0W=2XuK5glK)SOgs4uOo^]@qKDodP1.7Ffe+qGuo>jJC16'jL'>Y<-hmpNSfW@Y\V7X[&^9,f6GGAWdX,%qmX1PqF-u%NB)k-<(WRc\6pnB;5G>(0On'i2?nn>=f2O=ApIBV$TM/9<'WQS>?-_'hS)E!Eic&M<,%KIN[;OR<H>P<VmF*BCHQLf%pB]=1*n>T1%AG>fOaX9aqLuLGoBhBC@;flSUqYh0ki.8sH9b*3ho6.hk1HQ\KboR:aXEFfi(7(]^5GaO*EPR?opGoC:QQ/JRC8fs%M>_suk4GQ17T+:%j!<<n$p\Xc[2e)cVu\V]]$Y6X.B$.Y<:Sh6>Yr<fLg6h`^+b3[6Kf:nWEQkC,/87aWOG,Ii4$eMLn4F:^-fR5%UBff/BC3?X)0FP)YA-7aD4QQT-Vpc(^k^7X55^u.LNg)-!\Gs+9VM,p:W&=Wom;$Q]Pmk^fP9BaX\7Ojrq*+p./LnP6"+MgG!J6+%M]D(p_^G<4%>o1'53]-!q_P$s@k6)A=/sNH<1C>Z4alGKZoRnOAuh;qZ"n$!fMrWp&;pl8XBR<,UGHWac=%#WT)<9Wl&A_j3)u;m%S\R`VIB9Qqa'@-F8K02;e50FffEhu>4L5i5qT>2XQO,FL11Nhi[<B;LqR7[Q1[Z]Z=c%`uPpi#&M1V-q.$u_cY]Iu+!OIfO9sdP^%BhP@0s2k\ebF"*03AiR(ianX[]-L_&8A%]_=!1i'Nd.aiOrbMC7dV+59tg0ke4Zu5^%=qH9<U[q["3O;+W=j#$-2`s)GVCubR:N$%)[h<=G9CFB'geclKY3g1Bepnc(RMLE6Ddg-A9ntWVX+RKpJ65$8B$g?.]-7@@VR2=VH0F#C)&4q$re4EUE%T_/s@7.?]g5F74RF?%4'@,l.2*FL-VMTU`K#qiUge'R.]2i;]YsSZNoiqc`?Qi@J%Ul6TQ>icM[$VUnR5*gJ0mhP!dG[,1X?YtlV#$,cW"q=K#!5Ah%h9>%pd:s,A1p(T54+/-Qd(O)/2N^dDtZ=*41kGRNBa^J/(IDkL\PYb0HG;3cf4jfnqCBu;d&>NTlEITr>Cs4X%LoaEr;6]TD?=0a+#*)%PX`/;e6csZWQaf5R:2jPQ/=V#*Fu;oo=L4.l2*`GSdo\FT@_CuqIn<GjWCh\Qf;/(.:e=$cRNf^FF*B0O%n<@Ep2k*`aV1qIM\ZY%!6@_V'-?%9VQUW];rQa20e/0S@h0W1Ie*>/M9f)%.\1*FRPHuQA%r5okr<oM7NG`%Em3C^V\ku&mkaLcNuD@Edj8_Cr7%)1CM*:Z%c8\@-WgC'&<p&q9d]9;(%(1.:(SeHHa-0(glqn2+1JU.S<;&k*ROZjai,$0"&&6p?Abe$d,Id8)8l$e5BbeH'/l6ZN4/jARQ+bAK%4oVE'boW8HdEb!`DBFTm?S6RB4"_n]Tp%S;C[sqhO/$MG_8uC`VUl*B#9eCM(!^=+DsA9i%0if_ISDYBqDro6IP'ST&WI[?7IS7R%\RaY^C>%kKhG)D+;ndHum^MK2j.B#*I=]M)p.qd03Yb9ZCM\bt*a3\I4U>CbCc^[l!qh1L*d?o>08qb(Hjq)Ph6LUi448IlpO:mN%>'3G/frMJ[V]J(fQJ^L;:4akE#`dHl.B.AeZ0q8>GJ$^YIT.m\4hkC)\5V>a70GEmVq"Su.=IRtjGgMB3-h'e(894,ig^3flq<r\%U.uqAX]*^W+f-BJQ,d&h3&#KtEJ'=W?)Jd.\$'5jVUKXXO%Xi,a)C6D-De&p41e6@p=MXqe[j4>hqN8IX*nXG'M0.iD)iCprS8D,%XZ?ofqT2[*::[RGZfgt_Ff2KJNKOq(%AGSXZ0k0=ptjhW\[C^eP2>%@Rnicbs3L0qBBg3(U3'V;cGQ7bet&C2R=fZ*?F*&gCc?_g%G?Tn-9^"XOM4M;*#d;\Pf,r*gf&pPC(m!%jl1%*<([Vfa=-#&6;^u5tC%:;qDX%r1,*+V\durST3YeX[_mb;AVhO#=qKm7(BA$uF%Fhf3(ZlUa4He#:'PYJ&/&ZYC6gp-;>lCr^unf/'OSU14FDBB@C?/&+)?ffUg?)Ql8_q"P7]$hkhp\=3Ro^Re"=<GPL41:\DI%9ZL%loMhV*m^uWX]%%l?+8F`q2b:@gRDcPDmqq7gJ5M!>YDBeoG'qjl>>79=HE.;HT\f4#cqU8+,.e_[aU)J'(Tb-Jeli,l91F$%5'4o%'lG3W^@YVTO#gjIAu:uG`'<<X)f3m>1`h/9\QD)7h(f55JICL?Mq$ou1'=)=RQ<m^IfClaT0G)T3Z[U[aIUW%6>0\aA+dOd?\5*&%ClL%a7:CEr]g)0UVs-X<</;qI4f1rE,)i?NG'MI&)1<5SM8JaAG!e(q]9g`I)*?ZD9^7T\FIG(JFHU@!'^Epe)DeF7mQ2k5R^6Nb%C-qF8W;TjF3ji8ni/Jjbh!`"=P#bA`7cl=<AU<iRp\#DGn`c\#5"22Igp_QdAmdifo?5RFC4E_QVWYTWIjf83Ig#AliRcA=mF-<Z%OF5TM0$M&F*8Z+t^+F`_h[aOqAsiP[VU\VuL+.k3B8l64`PuaBAc)+CVqJSaGq*(c?Q@s!'o[8FIM8TfmmB7W4RLKW8b:ENAS#QP%oK`oa9XL]*(jkm6NdS9R5JE#s'AKFWrqH2ZePd>qhm:c+_Y3Ah#:<Z`I6..c:>bH1,#jh+S;OSjkEem/oZ?f@F4dE*m@NbCp'\'Z%p))Q1B<E1jgUAi(ZQ7cfBu\3["d?A3j"@;.ae:KTA0>ICktncM4d2N#U;s./e^*j)N;dNBHj9_L9UrXuj=l@*bLu[h/_Bs$IUr?C%bfOSY@LjmQ0d(hdB?d63gGaOQ5BQ<DR;1:PLdb:?HJOJ?l]W-7-p*mSBP#8gXA>DuYaeA7K'rmO1Z..kMY;bC]166'iP"4YJ$c5i%^e8VVJ!CQOroAHhWt0*q.BIYJA[Wd*W,j-CSW80o]m-7RT(jJh;uFcs62Ht^f$gTQ]d$j<Fua,Iqh**`Hq._YS(M-Z:.hEnq_7KZ%HjB)`Mh4C`H6,rt]WK-CR^h3g1A=[fXG>T8`noO4<mTg8Xa0+pp5L%rjEKF?"o2Wt]AT0:(AEQ"lGH%Rs)%59mU@aF/h$CiM\Zg1%NG)Cm[l][lSP.r*qQ_,3?Oq?:n`N)/I,lDJNh'ZH-e+CFB<%An6sXi<6UE]8r.2LlNmSOo^Jg%rkF\6YSYP%5,KN+@`=(@;NpfbC%"e<bpId_n3@2>ad(cZm,0*`#8kr1Q:m7?oKIT=3"4A*1G/t'M]S;l0\ph9mOQBiG6[1??sSaZ)dJ3,FQ53m$647In2"0pM<Y'.8o%3(.7eC2^6rgjka;hb,He`(VKTZ\KGIf8b0hafqIkd'9"YOucG'"7BI]<(.QfNks)&[?8nrHTImD3gm<7b!i5Lju7IAXlD9#%4+NN%4ENX(BVCf=qCD:TqiKtER@:$`1#FN^H"C-`43oj$m3bf/aRLdccoOIYOu2XJ;ruaHX=Z3mdl[=43T32Z!eNK2,N[46'g1kEcXIeR%4j>&kBIei<@hb"#F<"sg9adO\du]]8rVat=mKlu!e4umhpJ%HrE-EQdHIMd$SX/t>W#&9Br%(+*b:i:k6t/&!aKe<CD:)-C&03m-%`_*o1D5$sY.D`n5@?Ei2%R\aJ.c=b1FW\tOo(0>Te>ZINGeYa0LUhFSGRaA`$9S^S%W-cLZ,kith1180'N:j`ih^$Agpu"-1AeK^%7NZhb\7G!H@^sLi.P;gGB9h.0fNFD;A=:(a)s=$u&9/L'BpV@2rXt^*&&N&?r4[hHVgUf/?k1J\!WZ+pRjoqOYJd3Y06"KHEf_>I%cE@W8)psGoDi(2%gio2]5D'-K+&LQAW`0ANWo("-`"$@5`(L;h*Jie>AD0;tP_ut>TZ8(^S\P/AJj@R!QVe$3o(0j0U*5W?4sqsk%h9phjPn7UPdI+(]R`^o'nCW\2CAaZ-:SQqORWAo_Z:;:BanaINoR(:3qt\juR;&h6nPQ#kRO]rG4apT9DeS[WkFtE@U])M?JhCkP%s#n]rV65]1\_93NS?$f^\hDBf"ieiNjm2;A9FSJ%aaK4$&$9E\HQEq0*_lKRFc\_7!%R7L-jPiqcW[XVa[0&iiJDRVBbWVU9F*0V%#esUs!A>7;=c0J4bnSQH04):j_"@CRpp[QI,&&_=.c6Y@n[qupY@M3H=\QJ?>J8r1jc),bHQGCcnLTd:E^`S]-$,W]QB>jj6nkZH%LM[kAhZX-ue'EPZ*C\J%Y*nBR"F`)PKJmrEp?Z$)qH.N;W9ta4T3#C7>83WVm>B<'qlmNbO*a>jh+okq,jS&QS[@12273-8?*<3M%IKL`SgK?bXCj!A7j'UO"HomXeWl9E"5$'>-1_)B,YbG="Hk*4SQY)Y%dd1l,$cBW)m;@8W&prB)Q\6mXAsIWR-:F1]R5EiT@\h.Y%f=?m:D4PHCX2i!)luF>HjQSjX(thXoP0*$oiPU81=c,h4hjFp$FFEW9@M;_0C`%h!G8BNpW,,-nM`Fto.m)nf-8hauq\VE$;ch8@%4#?Rs1LhG=9Jc&fN=@63oOTpAXcVMh3??\W5<ErJ9eL!O'?8=&M%=gUo7c<hDi1gRcMhu@FujanH;nftd6]3=$mLJub&AZQd2&OC%I:R-&!C3ZE<s"6Fn6,qU9!5Z(l!r_1pPg6&SPe4VYV<)DXH0>%FsU_THFd%D4Uu#^n%L4A2JluG?h'&ZG]i\K<AnW3Vr%ZXF\pCo%A9e%?ST#Q#A3nLZe"MBonG"SSEaaTan%ss'V#]]KgOM5(0M>HpHQGEC2Y4O-!@p+`1u(MIgWc1Mm;1!5#B#+a\=!e^6+C9E"\A+<%(hE2?5b(s`M"QVnMc'4T=4)pa;SKA_#u,=e\L$FhQdDr?CZ?N=!q@Jg-4%Nk:0gY]XcGu!-iAq;>]==\/tlFNoNmt%dFMQN@J>q9%4Zle:N]Abe\_qAT@aqKK[ItAJhiYMUQ`Dd5fjN%6Lpf4]'#2p?^T=bJ27Rb5K][7^'YDI"R_6g2J?iBI>8^5,#pc=c>gU,lXi*Kp%aDGn$39s^Z3liHl\%5;PZXdc^[u#>5FIm]eU?K7=O!nskV.n@TZB9=M=/Ii-)n'_I11RIT/\]K9=)Jia5*ft!p?Xs\0[1?</ZkAf%KDSaXfO6>@/W<iriH5G'm,$&@mdRA(!"_\lKAS%\O:44-N^0#Cbq2I5Iij2E:q*m6Z.AWU@K(XT4'&eSA\I5CiT^O@m&!Gl\gGIh%.^lFjcGnUaBgCk=VWT:qIuV^C*.g7a[Z@NOQs6*hKRMq8\hO!FQF[]:4E7^8k.nZ\2YQL2HL5VDS^8,\33U-0iB'^P$`ePja(JX#%5pKX[`,8]p-8DGZDB%&,E+*83Jg*<p[4cFFm4Os?4WTMbm!ZPH0%mitY705:3fi0PWe9!.DR/)oqT&jX<tUjL#E]>[+b"Fd.s,OR%@Sm6oc(J\7Gl1$H-\is6dNr,-#Tn?'a%cu-ad_k@oZ'85WKcamB*8NkeI<Q:MiGg\0KSP3\s,ta^b=I3<</iAiqfN78BA#>6)6cI%9mH@$W@NiQ_H:'2>YDgoN3Kq",oR.Car:5i!02^hDB(a\9gG3./rsGqf]1h2!A)rB*.qG#T.n.Z/+%TBd"B2GV-1-/:I];AgOFKp%fP2*$K$^mo?kl,gNcXcpYN?!f>I8\RbK(\upK!e$cnC29(=s/M*1q?RO-3k\K'[ig>!6,[`n$$\ZW>7/K,\"$fkoAPY5q$n#chNt%h^Xd,$(%AZS@DG>32Um=X+p[6m7tO.=3Ie^/#d*@_b('I(u&.E'++9?-+/[sMHHihRlu\kbZE]4?7gKKG(g'YDd-uPobSmt2V&Hp%Z>A'sB#C^MQEB/Wm*me(A0o7ASQc#[/5aU4J9u"p7P,kC?C[PYp?_e"dS$n#=FGM$M!SIeXf1c5-"STj5:0UdqbPtsq]D":oY0.-%Q#XD2Xa8t<2rquff<o8#ed%E*]F^gcNgg2:ZG5kPqedT`X]GCflr,Kg=8b8\`LZh&g3-Qr+APL4pTl$q'gkR/KJ8<*Mk(G]Tqm"?%a?KRh/>#LZB>jJK+p-9]U9\Z>&RimqCD^HLR5b,9%2heN7<lT0?6d'*h8[rT?8%;F?P]@=\3"^fY@YjR=*gE_5Pt*3\B(lkR#\Fb%eGHQ*dVOeWZM,Dhb#H5RUWhPuEKuLhUY>r7WFon4:Wm4E?!h,Erp]\+HTLVRACu*5j>)ja';mJs2.-.E]*]WW.$Ge(3f!=/i<5"t%9]]p6aYt<fRP:$iA7X90HKDL^"Xb+j]Xi;0M*I+CaJ+^:Q4ccn/mVFLq9YA^f/,(/o%b_T)j0c%ZL,oiSMjPBlBRAX6f+klc#U,N%U>BG[)3%bKoCs,;->>D%mmuo5/M>Ui*P!-4NqD_Ek:u:;/9!iikGlMm84$D(/lQpK9noOVF%GX2H"0WW7J2$0]0tN9SUbQ$0C2j*%VM'u@!&&Ga)Vd=Sa7&Hqo(,q"kM8>Jpr-O!p:qi&>Ws$aP"+!%$h3kJmB;gs&p2k2*:dDfo@n3+:G-TVj_nJN>th??Db0f8#Htd`%@eAX$OcIFdk@6k;G&!jK4au5^iOkk,3fO;9Uf2PQU%jjI9)cC1"5-?,LZ;#'\2Sbd[dWg]_cAU89:nAAZMBO&`*0Ge,L%Trrk@M)%fN[iG:/bkV?l+P@C0$lmjRAkd1s1N"7\fFMgI]n5R+c24/hEp1!RAt`.d\lsff;pK(-%C0$OL%,"Rq<b%[UkSXC&g*.NQ%EbAild%]4_k\7OlCuhU;DE?&U`UHL=[s6S$)Z\fj8HR41UXcp$dM@RJlNJN2M,=k:'_J7L#168()$(Nom>?k?7EfoccU,m^l@BXR?V:86jl%M4cI`<Hf(X(:Fq$X09=Rk>u#`+dlSYqsC?$XTXq=Z_)`L3V^.fegP;Gb>>io0XghLN-1pZCo"RHfl>5h7P)3+>u:UDjj(IWTU_`%%lrSo-0kS0&Z.pG0ia+D;$NE#OOWFHoRrGQ"$qZ(k'cudh)l:C=\;jF.Oh)jtFZh7XPL"lh==J>uA$/IB1ZCP56[-c462#KU-A/4=%Y%@)RcP^_pF6]-W+ZC_9-Fc[4FCeKVg23-qIHN4YlZ&K<l.WR&npu4,Z"4!35pj3`0+@HXW-pRq(["/9<h1%N-L4:qipJ(b<O.n7%gK(OFZH;'!OKIl>alHTa%:'mUAlPe.c!)o^]/,"CTMi4,!1AkZO/o!Qb@t.OPIRo.5!/_N;M/00X'$%;n!MErc"bUc``1FDRLZnF%/%HYbR48TNJ)O;@Ko'sBah3,WZDN4.$hnp`kBV5_<qC*:$qG&N"_6sgO(OI+&]5<mE`#UcnJpp^>1lES"_r$EckT*_'h&ic=)u7`%8=Il5SG/!a[`o"&CbdSqbZM'0R65;`@rB:,qdXO#VHn6SK?*HIKJ,oKFu`8<QYEb?B!68%i(Q6$hhC0cVQ6/XW')hUgn"o:PeY2M%bl[Sd/D.-T/]lCH7CY=r>!pa/3\*H2h@5UhL#iAFp#2@@&BiOR/G.qbP[t[-bd5CM9+^=&ijK-"ZsX8BfpO?7csV3Fr,Qs-I6"]V%_CmiS68N6)doQqFa*N$E0$YPCM7ZWCc:_glpXts]8_SR1_-5Mf#\+>n=me)>h8`e\V&d1n_H;9(+_3oX,I,GP#G<u96'XaA=[H?O%ZkNE9?-X7I6<FldVFK<$`G%KgD^%M?W68Ee=6oT^CBcT\,9i?t>1u\mP3\kScL0]t$YS:sFIoE[1Y;=KK[k*gY1APA[_eEhEV\-r%-FA(5Jo6?fc1Gg2]]O4#T"SP<Zg@,_:i:kM?&!l9=moIp(eJ?X\6Ks)>3Ko@FT'*W2SM8mKq-Sig#uW*PQ65\V/7_gNg4IMBP$56%ie:(bXdfS(BM6\-cFstGh!SHn>bs)lRSQ>QEL^k3qOD$89^`-4HYj[*l!spXF.t=pkW[8C;O`kV()),2gB$&u&ZF:[M46Uk:!oqd%ht@2)n$_8-ac>+M`9L90ADH@;CG"9&YG:fO>bBb\gS.^IqS^P-;,9-)'\.mp/1\/J'g;\6;R])r8=9)@N85Q9m!<:IZ<`C[2%:Ur%9]<t(Q8OkQg$P<`KTh`=ei0]UmG4Qk4!+K74$Hg<C['$&W=#da]qa>W0q4/4e$cN!QcD*]+0rVOnh;X_#saD/VO/KQjn.&7its/B%3itDe<nQq%YDq/(2=l-7DPd4A>igGTr%d#c,08HWmMMZ(>]EMU]XX]Gf"#b1PqGLE9O</b\b5`f`j`(VTh)'T_Wp+62!00AJpU8t%[n!WE?]q0fSqWK$"c]V#D5q1..(Zl?Q;c2+$am'JEOo,moplV[0lqZK]I[!+4),Y,NSD`]C,gKaM-;g.4R&*E]V\k==<YNFb?Ilf%optD#SNMakjeS3Yhd7u,';98S[Hr3.Z*Z'R$R`54;9L#o(Ze7@InWnhqm7E&0c,)BBLSu7cNT_qC,Xl&>3'#Y-NgWUl?rfoc^n@S%n)Di8aSB-cn'ct<r\8C7`+tS2.BiF'r-l,CT<@cL%o+0ZBAQu=dabSef9i"-r=#8$Up=lXeW7g9[H<K^%^-^A$AmXu`tdf]7dLX:%YT\qEeEsQ9ldP$3gHL%g0m112kiTC,>Vs.rn%24q?MV5Aqak,e\,mJZO/RQWisK>1:Xk[W)c$2aS%0K7le-abC2b/e`-2Tt:bShT%]TP<p[hjgYkmCrp(Hm4S7#64m?;u>Tc1#LT<,K4Dg>i3sMlKM'<+F%brJR[MofW4<\Z"5(:%e(^XF3sRm9$fC;75YWC,h(0%kalj%]'4S=(KHrToD&@HU?[j1RVF[F^UU5r"<:a#h>TjnVJE2sgp\kB<,K4D)PYa\i1asbVf4`k+'_bS0^,[=<`^$EHVq1Jqrh,>[s:jD%Wfb1/Bp:Ll<Enf8l7AD60<2G_cKljf]r9Y%!r:>O%e"][<L_]H4KHrYj`5E>oh%6WmOkM_-5A9Of,%H!:0BJ];f*Upl'D)q0<02U%\(pVMC't0uhXnKjnG%#,_O4]4%a/t;+=!pKG-!Ic>U+2rl,;hN!!fuW=aKe-GBn#QZX'Ze/_hbf`Ui].jD;<71H7gh/l0c!AI[3;%4aS3.D<JuF;f_RY]:s=lp(jB?>bl#E!"$upB'Iu$P-aO0[cX<L9ld[_U\$GT='//A[^jLnQ1SnE0o?pHB=h8CZea__T:YEo3EtOd%[F;Hf83,G0\51FoI;AXJl.Hi9BMQj][p`<Nd4ojm8rKg=Sunbk]B&<)oAVYkH\Hau+?eHlMoNGbXiu]uot03dSQ>".S);$L-9^+;%Z(^!r[!$c(Mr\^QDSi9=me4cUl^_d.8C)I19"XlZ("0Eo,\O<n/%V+>m3:*5.^!^/oP>>cfad2^\Ok+jOdp9I\lgOHHYn_DQpKu(%SF+6J0%,bcBPEN#TN9:N1kDGlgTI0?]a0cih"\nRfe,)H2b_P@:<qG2>/OIsk.j:7,IKRX8%h"=lATWZmFgoKeX,*_mHQlTf4j8g%K#s6ejVGKDn'6*6[,90bfpYC=^--i1feD3PmJ8*ANUG*#Z='$\;7eSt(5?UO2u8lQK3TB0d;]pZp@m0@f3@Y1Cs0.G>pI^e+liQ,%Ks-3S37l3;+EL)_c@>M2)<3V&[;J!7gr1bu(,ElGF%-*QA)&,8gWUMl_?kuM1</.AE4B&j\3B'?mkVo=gh<p;`jj&4i+P1ij,4L;%IuuIgB%U65)fI6:>g!hA]4A9k1<.qZ_eul@n`:VB<lR,;-a0.(jYgW(]_D7])<7$Noio`ZGCLCE-5kj`XL,ab(ge%?]"O'mQ-LFU%4(I(>[]HTCN,L'saXL_IKtO2j1<(,>i;Y'4Hj_dn,%KEg?MeW%0lEYh5KamNjj*_q1WF;"XP\'<3'Iq=EP&ioDT93,^Ner;p+s^t%P[ig:0s79^pShjWB8i%^5!+s@>8cJ>\mW"$2Oi4'eam,!aV_Kn]@_;Hq"AB;EA)\/m(jE8doO[0pT3GeXICq^5-sQn1</]WC>ELA%\=3A<i;3AZ2)<013U=\5`jj(.L"De5)p5;E/lGk2a;DCuQY3oJj3).Q0k5U]r,0F:5aIa#CbK9<mbkO2QelW"34U8Vo@U2,)<5<8%o/@QI*p8fE/S'g@&r,7_HRn>!)<5M(%CKZbplZAT/S9qdCL#+%s-&C]XHr6l!81u(\97tq$?lZWS2'G@B4MAfitbtL+(U>jfsa['%hH%Y+0'h3XK(U$"j6N7T\8'%Y8tPh3)<2KF7/T?j36i@ef]M!\L/gGuA)-+R^>aUR)<5B]C<lV3AW0j]N,1Xe>h^-9]r\_5`]0"E%Zb>@I>8cHNn)pG8^WRI<LpZ&;`qW0hO0+s-DKGg0nr3*-4>"YlLYQjYKDVjX_mS9=`;>%M*NmopN;Zb"\5pr9s1@Xej^ZtEG.:T!%j8ZaXE%TadnYYdBAVY'3iEFgJp9VXoi!d(KD`Ko7?"X&4g#8gPqEN+4GKd/G8p7_1VN#Ek5KaPgEl/Xjne^!<Z:a>)k6PRIQ6!+G%L9d0<-e[I%1%<rB%QE&pJ!:sk?;p]im-sDuPd`2*I#WNY26t,dhHme$lu4O8I#XM"f@f-:E%Q"QfMZn&77?klA;=AYFDj<(>hd8A%aKsMI45@tOg0/[0Jig"qMa,8mf9"s2Uo3ml_\[?<s!0\]?2W?Pg#;cUK"oJ=?d*iqMsTqE0oF`/%X6Xch+i.'Q5f6'D7`Yg\/iSt%RiSZnL:`9^?8jt$-@0XSg#8C&Qa8^O,Wf6u[-:hLX_*?(_+5XIhdqStNb,9EiEC-/RDu\'*H#f5Cbn0.8rION4+,/_Cb\"Vb73@s%]\$NG]tq@_E-:mfO)O(FE,Dm4D#UPJLMN(_HfBO?*U]02\Xi)+K.lq2g#9*Z<M2Clf]uF7lIHF*Ja<&mFTE*r^Ch_FB\QnPRsfTi%r;t>t/amm:[["r"nl-&mgKRj+BRE%ID?0ZHhI5NG=*gS]81FH.CH`J[V,Y_DN3/JiBnnFPk?U&WD"6TD(!c/$%*d@W?O8!jPPF)d%*6J#jFB`0b+4k.`V\PCd%Gn,lW&7=iZeO]\2mBp=pN0j8_akSQG@73NS);(]\$u"U!oh/DdP%!coSmctc7buefgpR9ftM5R3ng/.%Nkek<MDn[[7.'eO\=(<UdBR)kkdW_bep]Le<alsP0<)24Od+$ElRbH?2S0#q<JV^r2GR$B=pT%*,1,HnhB`G4'"De:5[,03P1Q7V%_d"DtH@b."-\"J&SV;g*L_u\+QfPlcH\o"sbQ`9,Y_,TLfj>sRn8dj(r`sF97KXn^()VD3e7UAiHW,k`?MN]$h%I#k[rb.*-'%cW%4Dl-kA.e*DF],7J4?9Q#)+4*g/rs:o(*p)%GWi(<3bh3/A'_/2d:RN8I'mRN\+LXjHZgJdT)c4C1aU>fY,G8mSQkcY/DIMa)CJ9e%XWHD;Mm8K(<\WZ7o#3KqUqUj]7-<pW:B5-nfP]Ldhj)aG`gV--m2@S6j`*'H+a)U831spW"HDr7J-AK'[:%dt:Rm/f+kK:L*ktWK%YreMg>iQaj8&"alR[7705:?S2f+m`(mI79$dr,-%blJ=rQ`8W?'X'*FCUYubhYK-*M]c0g7M]>)<"5A**o7rtXf?fOFKaiAi"d97%Bl&L]n]DDRZHYES/G-GEj*"IFg?_mq[`9Pn^5WR5*blnJdC.Q4BU@k4>?lKUNlUU_7EaK9_[L`uQNVAJ\O*V$?78^80%?B2%<!B!%,r`bT]5YNPB7U29gTtNtjea)28rI<mY*D3E0Nt';C7'Fi<:%L[h'^Zt18^*!jJG9?[B`oGWIBE"Fm%OZ[ksCS#`p_n+t\^<Ydq*s%6>i5.6<keYW>jl"-7e8$+?U_!#)gq*f:3eXct^hAE\%_O*L4#hUY+\a[B=_uOScZ?1[Y7_e]rNG^E<8[V=V!Y-XnUZ[2U49?l,PJ%l1$dkFM?&cK@TpcOLMsTTikF;Z8tM'C5LI%AXLi=h=cU=NNI/17"+7rbYB`SC22Ef>.R\VYJ892nd>5i^@UDt<RXPlgRLW_B&>2t%\P^O0n$TES2&ANIX]f&$IE0OC?!I.DlWMBka/u=P8A@W/GmgN`P-">QC3_*D]66<p_+$"0]<cs5C3a5V&[ku_[V?\rGjiX01T=s_%Yrk%IA_3?NR[<Y$EAXa4mQ>^=?Y?gLpHL!/f)*R>gB/c"L7Q7/l1Mq'O'4Adi_M'UKZGb!im+n>iZd^A=\V6^\hifea^DS[p&"51%>P2dq/g4?bM7[!blf=cM4sI)GfGqH+/>`0cl+dI4"KoeaR0L'YQPC=^;7)3Pg0e'gAf5Ntp?BISFks`#G'Dd<O_aPlalTd)>F(sO%CE0iljSbO:FoGCR8PNnb]O`f5[9$RNe#pUY@.H";h$[Z`?LO(J[f*bh0t6OG4]+^UE<JB>X80b4F-%7t,GP\!T3n(0!:D>kDt?s)%puh?N3o%JMKM+,-06Y?$3cjuh>ZBl(GtD3%^!&q-lCU"=FfdF@eWOoM]Zp-R+.^#h/@VJ9r+d"+mkGpgb=j8]Rsbf4AdWM_eC(\#%">,qfWG6\gq9^!F`4%tW5@u!c7cl1Wc"+MQDgphAP6j%ip^Xp"nkm>tgh._4\I?N6VI,%PdCeo;+'c1,`8TCmhXcc20FR_4dbW;G%m@@&@<???Qs3IoI4D95(,CH?_q[rjB't`_&c^V,=FsW9\H+j!$W6jS*:?AP3lee<V?-aTVc@^\/O'F+.?/rY;#Gk7sj7/0tcfs-$%?O7]G-L@=BB@ItCq5M'2<:IHNHjD#bf7DE.]g4BpI,:E)W8lp/alG!Unf>H8?i-5WD*O8"`mU)>SXiYVohhI/G=OUAq<cGYAC<Pt%9]f][86Sb!_DdH&>>-:uQ/1j/:*E-fHd,(?`Vj]uI[7Ugp>b6G:>SGbX]?#Bm8h<f^]fWU#;VJa^ZCRc_-T@b$h\"@kap<q2p'P[%b3@s-7>rM!+(TliXE!$nA!O7p^#)D-aPV7?^;l_DO9:C&T@(?iIK*5[:It/br_hkUo&-iP3/JsTYB_t)X=mL8C7ISAHo6"d'R9i>%ip"tIHXFDo"O?N(fX3K"Iu&SJVVTF$MCH=.B&[an[TFB:4f+A&[q!lZ5*D&[^\P)fN@%8ajdsW.3]]cWTp4#n_W+_MipBoJmhF6C%*Tt03gDZN]l$EWZ`M9,t(V`u)B"T5"8TS86lh_"6]6JSHqngsG:VK)i^&t9<>f'"R(Wim-?fYo#*N&)N(E&NGIA(70!U/GsGLb;t%I"P&1ESL"RQ>5BB0CW>Jp3Z$38`.Pg)V+71S-FAgGn\qr8N8LC'rP_EO2"NBP&a^_:AT;re'I^P7l3Y/5PN.:mDhpj#`hKLr56te%Wr05Vq?q]Qq?tNf74V'Zn%8Sci:]m,Eg_294eC(2ji5VF^)>3TS%FI?eE%3Mql?b8G+'gk52/e-G$C/H7-NN)oKf^NWAG.JRI['@%O;X%P75.^8ptF9f.\45sIHNg>h-'UL/ERbT`J5e!-1::rT-(Q&9N?IP&@mQl`"#e"@m(G]*\2X:9HWl?$*Zip/K5Z7e&=qf5<O`e%A+q[@>k[>>l-GYOH[I_0$b])^d3gMh+tpE-npeXj;71#_:/1)f4iXi,FJ"7&nU?QQp[ut)-a,o($dc^)"s/n.jAO--57!E*Hm_K-%_3Z[$2L[<Q\N1*C5^\.SfuLUR7eIGtR=%"*V,Kf)S?%"H.pcLe`6m>O;+!Er"(cMk#n222jk>i`ClB;;0aT7LqW,tN71-/Th5EQ@%bqnkgB42#G5G1AQfKY]((PP3H-9H\h$\e5e<gN#+[@cg)rU?0Ga38<21s"7.<eZ%c^L&a?SaJo4*:818S%Cmt\19BO"@,f+s1ThV%_dGIBmj=YVq.BC]@Mn/8K0%6en^<O(A+o*^mKh4VlNGKWaC3aKG-[0\,]_3>,,AC>atl=o_s#I`m!el.g$I*Fq+>kk,6Vk$=#ZeQ%kOXfGp_2od!m_dRP*^3817&I^1"76mf!cl[dG$;d:Em*b3ePpgVX1@+d4jRHioT?F+6gD$2i7pNqcQ,]pl"eq7?;23,at<:R9M^M%OXI%a0&ubmX(31:oL%g@&IHs>@^]N'V_Bk[NHNSVh@1s_lUA(L\]n]$i`3hhYje;Y?"34c#t2Y&I'%XcQJUAC26kL=h2%WLjHKp&%2HAGVG+ZqgWQr/@"2]IT]FW4XX=Gj=e4M*>3V.NF4:]l;cX9Y(mC$4:`g=T8I&Qd%j*,RR*t'4]XVmRoZTZfY@0lf%JB.6WG4KgA%58(Sj5U.NCnYd_aWaURhp^>'b;OKqphgJ+&At+k0g%;p&I6Q.9aI'!IJ>KQ>8n@BOGC;6jajQndS7]t+g\Yf.3.I:X72U2TfmKRm%"Ld5gPX"3#c?&fnfM!WCX'.a>H43#qSauCTK^c[>V^Hh#\Gcj\G`ISMp#H!]GBe(fi8OfIH[6HkET`6+Yd?p/--I!8dRX'U$"e!V%mkuT.K5.>J,.^GS0Qj4W3`XJn:qL#0;^qGU^QR2[6&m,Q/6,")-2@A$A1hr<TDHK+5f.&dO7:G+[dUD#F5?96LHrQh!&>_Tj?A4d%LOSbuj-'1)q5&s4#'K2*r8eoV0O0pVl)&dKhRh-#&*SPfKW'6n/).bbbIRZNofM'0juKOu,fd4br)8%AJ0u4*Z6H`LJunhA1],([%p_;7uE<$6X['KYo>mU6iDa@?gha_c0b9PjS[*RSaUT`E>g$_f[8V,Ie9>4`q&uUQf1EoB'^3KEE:X03dC'_P?`TUTk_,$&VIL`1F%>H[j'rBU'uk/>]":$NM3O_EH7!qh!qSJhrPg"TYXRVF5K6fN;)VPB1D=e$RIYlS$r4CP/&""Z%q]?"69+!gSN9FR?,^CTS(fqB6T%E3WpFfC<GKBKA=E&$@S)H+e<X*h8`lM7pN%md5&h!h33[LWIcKoQe+lQ^8W2RAe,o@)F*uL-TA5q<%8T<f)#kG9'J0.sirT"_7Y<%/7,R]5-JEbMl3">&Q?Ajk`G9&-f9nM^(EpQE4o66iWqZ)>AANpKLST0q1*=T3WH5@o3q,k>_r-HEnH=>g`6bF1&BYC-H:&d;]9@_%FpX#Q;(#;1NTZ_1kFd?^&!t,c[SV9/r-?OGp('A?:0uUD@KbTf#+O<#q*>!KfS.t'htah8]fV9!g&CgR`rZ-2J]mK^6Hk7K4.)?h%"X9P7_FHGOn5Ih9JjHt'eEcNHl$[N-k4a'AR4ks5k,pp4bVt$#'?KU`7%gS%<_S;e_Ttd:Vfsh[i'W2nJrcTH7LU=jpANoIUaTQu%VU+.p,TAn],NZmPgf2b86pXn$!<a&.Kaa]HYA>I5mLeufINV^rm6_?<m:=?umI*`M4)\R@^lk>2B/h2&(l=T7070XSp/ktn27#hT%"8W\9O-dK=n?_m>M.&TDe!aona,a,+s/hW+<3GBZ:b`=C[opIjQ2P5*=2)-:\p3qBPXY]s2++80XY8(gR]i^aIB]&TrpEHjH*Oh7%Q%Gi=13=Fa\B'*tA.QZQkPSKZR!nYV8]b=@+7(,$nofm:#X7FOqhhJZ/"I-%HlbI(M>],*J&']>IWdS1OZrV3^2u-&.V06lX,&OG%i=W@T\oT;V8;<BcO1Mg?."YHh"o[D(OhLBDpp;8P>s<c#kki1qnf:aTL'O8%RW/g?YZX.`5=(3ofcRf^'W'FIDEd^crX9eAM:\/9%]l3lU=\=bHpk6?EAW+m0-cCqb=/<RFp5k6GM5?Cp5De`DC"u(19QEAf4n65,KS7?<X:$N4+,hFtFZ$N%\_3i,PER5QEkBD!l!2W'%ijHd^S$LA"ZpV*58AX-L8ASI9ffH[b.5iZ4I`[,P*Wa$/dbnHuD\CLLYYG8u<"IrolV%7iG15^9E3"\RqSF`c]>+:A=u.9e_C.RI%rKVKfDV=!%S9U=R43K^FoU38>XXIA5<UG(`EMT?sgQ@(@VAh&Vkl'0t;.hF5p/cE!;BK+f).5)uk(T1sh6I?r[.JH8X,B^*,h"a<%JYuNR\)A:l1Fs'$#E:6t[_km>?(_-9T+(G8AG_]`"69l^Ej3iVKe!=adV!S7P6)%SR#cniA'M>@l@kG;MpI7PA(eV,q<iSWmmgjJ%.\?"g`%NBE5h:P0%tOE`V`NeYF0>3*GV/g'Vti$VCC0&eS0KRCW'.E7.C6&K)AJso69%E)FaU.1dCZ9F'=SM.>Nu*/1]i,W;;Y4K%%t8uJ4sDYpcpI,a34oFsV^s%8Hi3H+\Lh,MK0`k15+)gLB^@]9\>,FLgUVPmMmp$_(jXIk9f6jmOWH!3^kTBne<)"o:'j&8%%)Om%\hj=BTWnF&#O,fOoW/3eBIj97EEZKH<<)q%"19=DV>UE!$-D63TZHA[2n!rdSl'`b4K"7rFE/9;_8K^A6T:biEbB8"1SmC6/*34D%3O7B1$nTH[H7.C-AZ'_Sk$;+6(8p/'k\rI"HXsG?E)N+HFBCgsFYl%90?p5h_)]pmQVV!<)7kOPVcOnrl.s'[R35MPLs6)a!0e.m%(@"\m:=32+T1R`TXg?L6eRr(RPj+JkU`p,?U)!)P/m=rK)4rKY;5`[!_`@u.Z!$kXo[MoV'1uU<;!#UEWtfn_bqu_[I]i''H8gE9%nQTG=(+;.fo5/W34FTi%\T&#,RNNcA]F%K>gDO7%*3$U>:*?[[q[i<$N?WgSRJIYa",<=;YEk_/%,&T(/]*l`,&0"Eq,UkBkD8(r%5.?p82if'CpCq5S8aL-.o-\DKmH1lr+aVGl*2#raUs*?%M"tji:RQW8U?^g6OgW/eU/')%Dc<@"J'G(uW^2Op+fZ3q7Sg^X?-$a,%aHk*)am%6on*8n>nb8A8gRd+W91`:ceeSG<*N;]RHfBt.NdPUl.fuaT]4thY?s%X>qUr8ffBLTV72@fh)VL9^CI=S'Rib:lQ+eiH%!5p;.c,ter_idiDd\BFFlh$*22DAcV+]q(3+JY1T75k2!K@m0;*TT8ZkBi#?!X5mb>J6Oi!5i*XL;U"%p$h;;'+;949>e%S1Q^l6%mO.`DHJVYf`GsS]:-*OjeBth``ha>[h(HI+:-Ji-fn_?HiY<7qkhRA.m,GDFRPXEDYY6X)$tsOGl^W?f_!NG+grJBapkT/H<aX@a%nPm-SIoP$JF?W1ZC9Q4<=l\FKmN"jXGNUd>4S2Y#=*>\]\U5\FnO;l2YO%eo\>&n1iVPR;PWdo4dp?o!r/&_75KX^jn+ZBI5)=GJ%Hi<ceeSWpB_;R$;C$t`66N?:;o-]Lo1f'Ou`Sn!-HoCk#r19#C1"dFh*+f#L<\RI#GR>W5.hqCgbIn\(C6\%sSOi3f_&$B=g>lp2%>Nr51UQC"DX!=.n>*WI!@:GjU8gt\^=)j$%j5ED\\B-]'#C`Ta;9ORSl-lqU*Tf>oGQ*Td5i"AM<\=Gu*s4??V:6'U]e<FNl<-A9%*Ku$,^X:h:r=6uh"+mt-2h^CjUe6R:/>(lgA.Jf]@5-fp83U9qStLAnVu*f*qt9L^0uI<o\'c3g]jGG[L$EII1&DVpeK)].!9-Uf%b`;jKQgQohIqapS@R(uqa"JOjs7lLcegU.)YC,X#q'UqGoQCHe?XZGm0Bs)`$%r%H5qEEK]6]8/SNk*"9D1l<l%<0u@F'OAB08)8%6%TShB8!?i5K=9RACJTo+TAusL>f^EG"_U%\rs\:bM:Oq/`'-_4o\(J'7!1Gm@*kR@8.$K_>^pTUEaB#QtXQe_kjb"7;UW!MapS)%\-XEh*+l']?@KhF04h?Zk7qpF*+&ioo&lFM\&TJ8;E^;mL6-A%0Q"SBL<Fr;k;oujmmnO3kqFO4GR53[R*95k;UMpZn?recrNk`=%Jo(1+(WN)mG+8GsCi^:A;9YG-au>?Pa/4h!rg@[fkFYtF@C"jBW_>sb!n4@JoAN+,4e8;gp@/&/15AVgZ5/W?L(QEcf/oN]#hQW"%9<`@bK=VC;mqB5p'YG\Y\*J7L5Kd$gH[B;.+3Cd[FK.)H+mIc$Hi2[#[+@KkHPX1hWJ?!R;4,CE?h:nMFE7:#,V.'BOTO8cGBf$8%[l"NI2VJ(F,,pGR>kY%3[ie=8g[[`4b]CaCZB;-KmQ9+9YUcXl\-(Me9W&)m3G%eMWb)'t^S#rpI,Yl>GmfWsg./7ZC?!W90^eJ[%NFF&%0p07&F*fdXb[*MS,p_6k'-tXmHVfY`5GsQhF)n?+7On)=46qaj_n2Hj_t6S)ZV"2Z:9fE-a/X9[oSQ>nq_)%g/K+4s&[i0F%1;cT[;puk"a!qbE[5+Slju(go,]NEh8?:8;hagJkG4GLhePU'7'753])JXHYl/2.2=MB$3kdY9<fG9g7e0egi"0n%M."S+>:t/mV%Y,LI0)sftKaAO3j'>a30=Z4;XhgX*mL''lD-Q'8XL[62*[`@VcCbm'sFu5S,,q>bK?RC$H"3h5=/;7'>@jF2H%O1(bM='9A,i<&&%R:78%/D*I0@Ol+R/@X;`PjJub430NEgJc409"HJdT(^+J;7<*rKSq)-J!p2JjNJ(I'8K;LNc%qXOunLK]+T*m7jUe)`uRQ5mp/:D%F+Ek+mQ3MnjLlgM.g5<k64SO/#QUs<%kbmQ,*:%7!XTu3BsCPcqt-`2O4#*LpiFoK6]:1*2X2U^9[,BDbihl#H3]"K]tQSO`jkG=%gQP6K7u;uQrkA:r_l]+K_?>?@I-$7)eo/!]URuVOhYdf`WMG5Vpi)<7debutos/gf4JEB;ATk@d2jJ!`GBnTG<`kYMTQC+iHn0J'%5g2aUM+@5dg]5s\I_$HB["6ThA@k1;O"l-0o(ZW4^R`':#/A7IS%Jb7SR\e$mYm5Zci8(OM$jCJ'f[B)4h@-WgQUA`YM1"B_k*+U%-rZf'qdF7c:"nuLq`clVe=7''_jNIJ4j$`E8?F*SeJu!NW4Llj\^BbW;1Mh@dY^,]`i\T?IddcC!1F<V^55W[+o3sEk.Nk,G#RM9%eC4/C<';8YAj<Jk`UqQR2'\TgB-F.6.98X5o"8.3"m5rO'`^7.AA[ArbOeeDH7E/>5=VKsEsrJ;am1`/5"i;`FHSXu.WdTBRkq3X%gJ)"8?O;XP'VU(e[D*\s*+e`c72fY`h79`GA1mZ')cup[=$JJ\ciJu<n9:`ogjp3-&$g,$s";jte+(V@c3f(Wfc&W^AdVf_-"\Wl%`*9pDY=")Wh,@!WM#bs6]jpTtlM)LP52])\h[A'Y7H>!g_@YU&P(R"1&A_QjadYO7_UUp4me:5sUgHWH]Qc^SnO$77S%=HAHYH-`%CuUQC;.)T)^/sYWnj[LWJVf^P[?WF-c"GJIP#q;'Ohj0]qkJJM$]\0\NKZP$1NiS.18@omI,7)ijVss&jC164Y)U#9TR%RaH#G``%NLZ"#U`&"/<]V!HMc!s9CNtl2^V'i7\TXfk^Z`5l[`U(#Y)gVq]WRUILk*lbqXJl:^q^mp%+q+7qph#B!XDVrq&37e>Z;>/cUYR[%Bc=V.aHSo?^pSV#N.Q`!b":u3qs>r**o)e!nn(td3hc/DOR^(]@^YkEC%2L4K@CElOTXZ;Y_g>Y"Gg1@_#h/;Y2M4-T(JI;"h`&I%/4e)Kb1GZ%G16*dCB"(Ua*[7e)0e$En[?N*EO6\l`IMoHEY4^ORQriHYq8TF_/big.*iUf?al=,qdl\HA2nu7PlcZ;4*>SHjY5%P%\q'/c2#FM0Y4r^]L5M"Iii;c;YbG9ZpqdP:0(O@OY=FL9Z:i12G`<UCfA>/-++$E`CHas=#H*+\I?hi@8*ku5l6K7:r&3*k3R0QZ%hfdE2_bVV@OHM4\O*_F2(sW$_mY7*9?pg^557[6]IX[Vs07#7SD^V_I\J$F@lo$#7m)J,_i#jk*Q_kgbXt)^f*m8%Q)k1K`]&5Aj%oQu.33fo.Geh8]Fe#B\L9QQ>Yq-J<q*!_,PruK8UUYWg]WS&^%>SS6mTQqf$VdKr8MOK*$DgG+;*!0WMW9MBfXDHLLIVs!a"lm_O%mDb^fVt[Hc%!=\)C46lFaOl]NO*7GAU&3>m</SGu!r*crHji?aeGWH/7dg4)Y@hhpX>^GM6h\BN/Ae']4c2*/=+6*4he3igS@4r=%SNH-k2!fQ3HWH_K7$,:L1B45"<Qq8pGF6i!"@aLQ#!G#"^l$o4%7iim4b'uGOJG"K<:@XA.7gQcg[1j6$Yl^HX!q!<FMk<qVHAPC%q_+b>`k/3np%&YBg\S^U[XnB*7IP$6*9>Pcb;f^5*`"-,Cu6$k^5;Y07gBP9?7u*J7,_7-2Eug!QbMtXp_Fp@61B0C(VY@0n/_Mr%:=-XY^Yq$a#f%a+/SC<)2=Yu?G#SeEN?Ml4:B.sWV7YtnS\IU+)da!GjH-[coF0VkB(4"ka#K/HIQPsKjU[+CAHWYE@Lc[6[Qm*e%<m#e[jcEbG0,tuTI_h.O\Rm.%Npb&tkB68Mg3D_FaZe74q*qaA`blOE"%TA;.Q^RmLN>J)4.GmdO5i(!`2!S1jhQJsrCX@33j"Aa%%W(l=ENpSJ?rL=i0`6impBPH\*K9g5o3/_f)4pXnLsYp&OqGbV#@\RRFaft^m<"-++UGcZ=d3H+pVP#`GZUY6ol9FSs2g=k\>Du(%3kpG8P!I.YhdAE<A7J71+K;TfDU_<0hse)nB'G9D,V#3#_1:Cnq[&me4EbaZMV7smjFcpo0%.)VC&YY+gK1aoa.GQX^3^D8'01;)%n=69S=W&OK-pPXZ#+$KkKON?OH?#>NqRh:%p+ihDq*qolg(\RTRe6B#>0ZbbL(Xtd6dAo?$#sH$'!O"J8+GV0rWD0NHP"8&cA/Hk%,9:<67inD^?TFtk7o@`lb\-eI+r>sQ;K<2H4M+2G0rKf;?EZE]pp$Xriqch7nju.SEoa)qYVs<8!CQ*RC=-XGT(iNd`39WSm2Lh3%LRRI_C8!9AKlWZY_Fj*g0$JST?ZJaO;?c2h69bEE"X^d6[jO]Z\SdhB>CKY+d-e#fa2#9:+K(:cln'<JZMUX->95G_G)Vc&md#;+%jfr65I:[\<][VRlGU[oZdH?u&VY[r_`HWi3n/@<:)na>qlK4)SYA'f:pq&k/R&T8>S^Xq:V'EZ4>Q_Mn2N5d#hrYqKg>:eKCe(ML%4rHi`kh7J]mUH2_T/^t:*YP5FrgBkL@spg%"69]J=PMeF'h.#BkCXf9S;?&J,#"!k3b7t`0/O/+;hNH2Fahje(JU<lag?7TIe#BP%DSM=KPh_T\jhXpPD/.M^mp-:bSG*>WH%gY8^+^k1/M]QZ@!fKpfl:lAQ`;A.5[`<DP^/sN8:P1-Ofm1[I2hcIm.Y%YDL&'A=X94(%c_HW1p13'`QZ!Oi^V@1d%U5%1L='oRhe]qO^9Abe$R8qk'*5@eoNH\+]O2'gd^GG^",QRc3:#A6S;ZSggMLuckdCEG-K,=j;%[c6%_8`14G$u]_`@@G+QW#Dr4T:UT?.OsVd3%>F#:`lFD&e#"JHX)VRtol`N0]Bsjh,LP,dP!@1@b@uVq]iu]8/VnLb9ZBMS!.AVTXkC%XWk?X6=\W-l*?<4!f`.K\rqX6ho.1JZbIDU2=/5KXMg&hMeu+\(eL`e=*rLEW].P/-8VK%NQ&V74$!8M1oN-'<j(#([^dq]Wc_ie%e.f>nHa.@pZO(4a687#%f<d!,f0#A8nt:"7a1iD7B#)C/gIQnL.iF7nZf&TGapUQ1r_]Q`m$hRScg,MNRn6Ap:%%3c0:Eid1Z#L?%IlU&/H/AS@=o[akp9M@2NO/W+n^%bkru5VLHi,Mer^3/erSn$'VnE%hZi2+iaYE76j/d`Y=G^nOs2J4A3%Wo8msjB!IgEo4bkp9W%lQ901*:s.sRqDW:^6iEes2J4AW#+X0s3RWGrt&5jR.n@8eit(2F5Hr:=o[FKYBnj:l<4/0C<t>@s,FAad9)q1r\r.!f8bemP4u_2%ej#u&bBa+'W`>DC=>ZSKK0q-uJX&cU+DRB:LOihD_2s"#Kp4_.YV,Q[9V"t9L$$L0<`9GV'/GjBc^kp78f$0)C9d+&F3EI[9?CkM%L9dO@H;>[(hu'Khq;S?^;qb<j-9fpJF0%&#g,?iXFP#P8_m?P[%+et"o"%*^F]V;G-[QbC8if)%bdD9u:^!C]&c;d<K@#(,1j4""%L?S)'&q[bL(btRoddO$>\sN6>1r#[[H=au3l?")f`9$N)Z"Te@Rs?h8,D?'c>i%t7.G`rW)#^VUBg/9Z9$#Ue0]@j!aQLTGc`bWP%Ed8JCV7tX_WMs)F3VD1]I:Xo30eTsU3!aGb"MS1jqX+,0b6@]u4sC'KMa1Z%KD-bO/?]kpSUW[c8C2s]*s^5,EPs'AD<EG(]1Pl\%jZk+B*Ye5kb^L"dSO\g9''W#>NpmNMndX4bpQ#i-N2FOk*E-5'l3nLYP%42\5/l`5qLl4OFfmj"_O5.f^P=%!`Ql:'.g<(2RL*u$%:?IV!"O/jMLi%EsG8ld;N5nE!H7)Z;1"[u!o;c\XaDp4Dj/=!02>TP8SeNBD!_n1*LFmp*RE+bd-'e1?%`abI\;tI<gD^pos0O-p%g.VF?d!tO&:O$SCn1ku=^2QnPCj6#kY*TWEMaNR*j!Z^OM7r&Q2]C6ps*0`(oQ4BO08SJ\Qdkt!F]7,sJqj+e[F(`l"L*:s#X:G9%2hV)mrS'+uruKD4hm_fVf0dZ!TP+:t0:1m`DcH@IDp3RqI<hU#/U6[.';LpC-*Z6n^d`$uNd1l>LeZ7/<X'j4:GKA4')2S^&VPBK%Pq^SgQgco\CZlY,i,Ff$:f%J3ca,G\M/rt(Qa!h._^273a7%!A<1JZ^\S-p:3,aqD$1J"\,rjBW.RDW2O%VHm'''ZhL.cddK="(r%1eYu1f=3(q9&_Z\QqI-5YJ)BN-/qlDf:k5?#0<QW!+Z4ZJn91),+pu-bQ:L[\;]BK11m+POBP>0`W\)#8>l\IVW&;j();ftnJK+I%.2/Ws!C<A-"Yjh`ZnCiI%)XM*N:P@!)ETG-U58/,LC#^sKZ"^,(?0"bkW#`/LiFsuTd^`dJE!>ON9>-d_]js\=GaAO32e5=B+t>*%!E""kSj3g#!We3m!L3pf1o2b>E"(k9Pu+PCAcWQF*5R_E#VEu?%SHLE(PbT2Q_8i@r17*3-34!@,/e1n!d"N=1BK"5&rb6XT9+sj%L<N;BTbF5TNQLc@0JT[tV?8:[e(9IG)1c9gDfLM.'Lr1@`W9X;9Z<7O('9Xq)&d'+O-`Te(lWMc_$[[t`lA6oB&HH_$T1c!AJBc/%)rh,%J_K*DQn;9(`<Z`c*,6T'k#Ca^"@+Ie@lT&T<"E<p0Y8[a"F^GS7f8d4CX6HV!e6&)4@MkE=tW+J`QPG->"mj0Q5?1r)A*sn%(b4JJbVNu?iXghfo<'`>!'F)pJEQul16c%\&VP0=P>GR!">XL/5emB(1b"On*CL^1+NP3U:4<_Y[+lGA&ti?],nif]HD(q&@;Z*o%0q&X^Kt?Efn/.INH.bReJXHKld7hQB=Fq.i!Mu&<4`!GM4A#qV=ot-3dPr7;":#)E%6TP@35@2[(.[A@-Fc^A0mfT>-I@Et2ullY%&kCEE^*f6RW"r1h=p]b<@=AoPCrZE"&i@[.RKrsM4B4;7p,IYW(m_Be+`G^1\OGUVoQ61\'0UjQ:-h#FibG,>6PC0/#mtrQ*YY/2%Oo\27JinmWM443&A08r6`\9XgPcSGH$PE-l&seFH=pZ'F!ec60(7KV?(,64fL;\$J,U(=ZZ63TjnWAoE+NRlLM.89,^sZ(3TFmIn%<G!amR-/DpOqG2L_:"!)'0Hg3_D9*R)@7i[*buO!.[k;m%toMsK&pNl_\,ot+bUiujL4,QBKGB;R9(YmH&NI`Z3:Xr$^uZT;htfL%4sRnhG]iTZKG`a_MmJbVQr05d$I(GjA1Wio4G-&;!6ZdFPpJhg@>IC0`;t7_6st6`ms%<qE=b<%h?bokYUB!iH)u3<5p16.:s.c1%(99>mJiFk<=W.\[5uq\j66J!SZa*ogQ`4F28H_FQUe'l-#1]@l&W[O8Tf=/E)Dl&X0RnZu)?c<[kX@6n*i'_aiusB+oC*b0+dRpu%G_*>GAIO4J!XK?;-$\.P%)30]1udni^&qQdCETOJ2@VF',%qcX#SY]A=:YN'=H9-hQ=XVJAh(SP6JbUt5T7F>MC*Y*iWL<h0H_=.%KSpE_K=f!h.4uPIW!&6Y9NsW`*.Z,NM1ia/&S>=)`Yc6%/d![A=3@1+[>a5,Z5+`+KnqH,9*0[]F9^eD,PhOIGYS)W<h;]h!_Yk:%//hW,VWnL*?n;%)\VO-i@TZsV/lD9ITX_)q"N"PC`mFi"kA_9%-n5gBL8\TGNdDG6$njDh65o\UKadUTAQ:(@"qeF3%ge7DOpd+W%Coc$Xh)Jl3o8*<`$OFpDj2ptO(@OSjL\J_u5]&<U3/0!d,X5B@1H@f9IAN5EF_+)L;962`A]hVcA_Oa:I47K,#Y7<9EgaWX6niU7%_[J,#Q)X63;8lXD(:J2oCHNYu>))\oRQsifZa(*/VN_7)""R[XX-:Qpbp(;j!=9*@%"Sn"'/I*)TWg\H`$cl7'?#.8r.*YQb!>cb%=[6mLm75;I:b5Fp30LY/GSOTtjS9U$H5L*nA7;uWU_^i[c\biR8cb=@+=kN;U^0gPdWAgDN++`oEUjlR1h=>=knrOj%$GH%+J$]#%$.pA8j2e*.TmLp$EMQ<c^sj1*1iX;XM]@f."=)Z;/1=tD:9u_M+Iig%oE$-@6q=RkilOfD"s1RDQUh\0*bSjh$WES%R!).6Es*I-%MgC*)#.TUj$qfMP`;iL2;](s(e4bfiW5'/j+uG=tYb<hj8/t[A6k.1==mH@#Cn9f`Y^.S`WFZBf6rs"Y@1qU.pd!TdE'Yd,b6mfe%XM>K!,mH1UTjtAAbqL9W&E)2,<(iZ$6Q)1^705P+Z2WY;hJGcH-G'b7JprKh)8Nu5+QJh$QVp*P%$Vl=ZlfF%@15aQb/Q8P%k/0@%HfmHVM"mub,gKX3"NeDZBBC#nfR*"L'_74#W.q;VKTb#@o]"bT"A<(U%gF>P&8.[pMp"rsWLqf*@(ep.`#%stZ_i#!4[X@#AD`7.%RKn#FD!V`7\djg\7=hYI2&O+Zlhf#YOM0YMf@K-MTIu,AF5K/P3u_&_Z[:HnYK[sj^Ca8Pc]ID\JHsR=d:JsJ%lRYCI'msf;:G7o%KY*C2+]n8//.ASQlh>"n6>D'jJ`#c\6]cUNZd!*ePXC1[\)O4hI@T,oAHNj8q18XXD\=?,1*Q6RaJ2]"R7D7SpF,?"$>*Y:/"13"%OBI:I!Db5Loj4(mI<gJJXYX4aU`^_[gmXU04N3$/*Jidc#8qkTDmnUBQY;!]8g)X@T7nE40G(nKh:;+r3j2A33e:6jl&V]CCA.M:%B<`e&H!0`72nHtnrQNP3)Yfk]Z[tPRnu93gNQukO>DT::jHrSLg4NNKa-"sJ:rYGj(+(1COZ9/n^,`]JO1+HirF#"6lm=`s'Y4O;%GJ4U=Xp#WH=h=p5;S5Q4#C(^!+/I_FoQ&1md]P`+EH#o8ddFpm<Mgb3*=s_#MmO]ajpPl.9K-:>G!u0d8@o\VUtplaZpUn(\/&fQ%+M%';gn`bY-"#Qhm%+]5A"0fO!-)54Zbnbb?eLt*#mFssDbE[VSDAg?KIq,jY!!DN7PqW6#"^.q2T$Va/oi^KMmVf:ACjQ04U?n.%K<oo2UH![BG#&5&Fbq>>^E2IM.,>,@LV`$g*1S#RO,*2`llP6!c)Z]-4-AIf:/%/u&00D^ZbnbZ,$^WYTTMQ18'g`&,iKLX#@uD<%`J\<s_X'.MSA?mVODb\e0<7A#lnD>fh\'Sr+A:nF5/FU2>lnVWG*nY:Q(KF:fB,u/7+l"i7I6GJj!+9:fqHGb'V.3FX?/%Y4S\iJ%@1[)Gr;!9dnS_6ZP*?)hFq)<iOl5T[d\MN%COI9cip8S/3P-)d%0TQF7roQYK;CD=LYia_(8Mt4>(h-o@n@*0kU,]NZ[\mf0%0/R%H>/g6O`h758tS=Dd]S/umQN<jg&];Q9:-tF=5+s1d3>ed4(&RucDM^$BlqT0=Z[b&>j:Ffg-+W?o=.;OX;qk/$,P=9aC=NHbcDi!%DS=W&*SU/,#kn^Bp[gpl=KEN4U$(umaM2$bDr4e198.1iiB@&"m1.@Q*=stUMml&HbZumYNaj*17(aPo)da4&pE2V+Bd9)64D$XH%!^Up$"VbtNoUtk#(*SJqC]L"L6/:E!mM9q9ghgF4G:+`sN`TPZ#B>O$-?4)?GIT0F,VS-epF-OUMj!+kCPaa$]*GrcJ'1VNf--RC%7GL&DEo/dVR(*7lFB"#PM7[8,9\b&e^:/$XoTNnET70Vs_C[W6hfU>,]l*16E1`.p1OX/<:;h0<PAL-'n\Ks9b%a3RaDB9[SqB&h%4n?ag.jb)^itf!7c`a5IP'\?.EMI_Km\XqGX5LC`EM[ArCYNr-/sj$2Q107+Tj\kUHd>`mEB*6_7rZSUG<?+h&Lj#.Er6uUB:+P&%;\)d.<F=DIGYO+U=`Hh'%mD&'a[g+6dsug;K@aheCWNoF-jq?5#Ff0sT^1CuS[>IU.A*O+,PL[!$THBBMWWX5^dKJR'%>]oq4&<H%+b1h@*[&X%+m/d8'FkT2URu5`#>WDHGVgum^QK8%p@la0-P=#BK"tSd[G[T@$_o?q4R^KuK[<C'*c!kpYqVfQMct\qNPj`V`mstS%n_6!t5iMK`;RS1t!Z6]"_HN-A+o;f^lK[#d,^OgiBlGV*YlH+$E4-eojM&%`;k&5S?GjppQdW+F%pH-rrWf1b"Ju@#_1PQkiW]KV%WV7%7!skX`I;qn8/JI\Q^I+DGU>[U_Q1Lt%Kn\FCdF"H*c!dI2K1k]g!&VQeq#Ek]e?a#s(2PY4K#M-3I5A[2:)oei=QCk*#40c!%I*Q<j9j+I`2:KnXHj%qhr'CdjoiPsD.>sGUGEK_d-FDcrkD%Bnn\f_P;n=b%X2,IE"B/U%J)-bd898?V`H^d<;bH>!2W8hsHqCp&%X;6nk2/WQc*>n"EGCJhkrPLD)5Q;m8'YG?\ko5PujI<Zg]7skEioGY!@(V@sif.cSDdcbG17dAs[.tLWP437HWlZS'fqqCIPN^';%mR:!Uc39>UFuTcRGC?M<Xgq>bqR*Jf>]!a-F:K9<=7R&hF9>5@8ms@pg`U%KI9fZfh^gPNrSW66Q<mrb"['S^GSIeDjK^gW$sc6l%M"J&6/Dg+]ASRaf>-^+:BX0XChi2L0(VCN%WAUXL(A3;;n.1\"hlTBfbTR5[Mgbj"k!^!*\JuA#e1W[D>H^HniqF_hDX&%?]"K:V%rM&D_q-$Y1X+-W84e\Nt_(90Oc[u"IW2oS5e1\ak/298She+:aD*cVe1q9Qc]0X[0QUuZ'B&^]@0M:]dc2;$-8!a?.L&;h[A]GGV%40Wmd7QdX,&c0MAINN*a;7]L4,cKT6'D2aOMdFU\-@M7?%-Db5R<1@YMaiOc%HdCNA9U,&h\-C[Qf%PF-0CO%c]XcbhZk$&MOXEq%E0>eX-1qXKK_Eb]rJoXDcbZlH/og;eI^'t5PgG'Y`P.Jd;)#c_=P)E8D#J0OZ8)[V4,3FN`V_p@+DJ;Uh=5=>'O"<iCPJ2)n^Ih"%=OcfP_D>Y"^CQXdB/..$kSCOmh\-=YG@SJe5):)d@".WeoL@NX0A=o.b;u*\l+:qt\mq1X4K.-BP=T^X-)[/"rBB6eJ"2/f*CDsQ%@Xc?OPI[&f+I)R0k')>2ZD0uF^LM8/_>IcBFP6rj$R@R7@"*[[Q_Hq_niU#\!k%*KkUk'4Id4A@4:_7>'<pfp%c/"\>."m1LgM^u%<e\':cjRGQL>[N#mdl0;gb2buY,B8;Jr:l\H>pXW24I$@SjabmL\2K'PG$S*iXbJObL%'UXSM3Fq-)RJ[@T0k6Hj+SA+.?^MRHp`%B*m=52[qia=Ld=FTc<gD7^;+YeX+tE>r7nNRLaGrTpc"uCH*g7b>TNPR_C&6QO0P]&eY8]"RXS'h+"5jY5.</5Yd!8E-UieB(smn%O-"WNj7dN%;0mi57DIHk%o7gB]@R=#Oa#gW6uaoWUL7&sUHD2^MY<Oi],?Of`qk*Q=T1!u:qSS::>AN7bk3MF7UQ7;K4@N]d4TK`%-SgG3?oI^LhXj9`^*F>':n]2^LB1/aR\"9f))l!eR^`jo2XoK[P;Co[?6k-sT!dA:I6N?*E9U"NpL/`sWfV#-ZY.;@d.;THb\%3b%\25TH:?^?phMC%SoU\(8]'CrC`cY^BcD:a]h/[hf5#t+r5+LV1en`dR!U-K!T"=UGfWGn+hG4R>b>"EI?e7aBJr,r3_1Q%=*cb%?%#^K_b_UVt0Z5>-=jPV)Q>)NF3OcXtmbtsW,d6q+-4J#1$`a')-XJ*sX.LNLU[[^(-U&]60aOWsEOk[Wo5]lrbQHO>Yf;]!""r-6:%Q)oKo-!rRaLM1nC/MCNCTQArLqlHP)K-K14P-V4[/[pGRqlZC9YgnkR``1&Yl(6n325PI7_<RN-U(33!o(j<9ji+<FN-0@/60bht%BYbG*h^ZHOKLg'/$;'(jD%>eFMcRh%dQ,(aB,mIir-YMu5:Te_T"!:;.#R4G$$F&W*_uFWV'c'^4QP.jH,jHmQA(HkeZlN0H#)Aa%[sXn.OK?4On=ORmbd+8T4T-lQ2)ZsBbK:J:\=5lSn'PP;nl-^5q<+5r^8J,LJY\OeCXG[uio)/J9r7*Q!E-j.*TOaa7q;#F>aSJ+%k;4i=3&\W>2$et4FU[];U+1#iBlHkM?4;g(0q`nsUU[J)NC4Q*NG3])](Gr\@J:M*$P*ZWI+F4p>FR_c&/0]BB!2n(*mDY3`Y%$g%)?U_)f2-Q)7nAaX^G/C!piX*$q]>NaU#d*BcjRkE!RY$jNefqiZU&qgp%dNmnr^n1@V7VfM9p#J6]OqDTo[pd550Y_X5#^dhdO]V%NWU'Jj-uW])sY!S3QrYr<H+6h>&sZJm;eXM3W$WhM`[rT0/o@&J41DBQ+CT2Y<B?]Sc*pcHP,]W4d5,4P4`UX^AQEVCkqW<mY//l%H>d4;,*+B7d?XUl+RW)@45*Z+KliTP8%Yg8XJ9u/e2n,UH>&;dqTp/(j6,!LY;YcnEjIu)gtUGke-+g!CZX?p^uQPRLKXZjd^bY7%,VmL^?D6GoJ]T0t]aTIo+X09Tc.^>GZM&<Hk?_Ism,dAHgp2BWfWh/7lBQjim#RYgghPN,Z'QV;m*>%4Hsk"/^!/NcM`h]gF57a]%`$_sUiE8G.YeWPj[D@WbQ>joW\-MMm,=E9&=TqSqgG2*)"CdC?ad"G@CE_G,92DBpq]]8@>Q@#=4f$Iq3ICfGdo$\oo*0,C>5Bu9%nC0O]8*9$r?T*(t?RM0"c0#T-q1X/"8@E@a%f-F1iLP>5%iL1*RTO,MLH`%?Y7pM!L!cBlUd'_3o\u7H50ici3TGFRk8F+e7CP.V%FjeQ`c#PR"(Lb;/i"]U\0"$.<A._^\)iQ(soF\XHNbZ04FLtrR<f4Xk'oDJip=6MgEcrEp)Eb^Kg[r#gXfGLGI!mJC$m]7^16F'm%!a[W(>fZT[C1Z#Mp]tSE8P'Kc6,Y=O9Jljh!5+q[#77D&lfUOi%Q$18q[QMFc,m;I_M72uK,cpY(<-BW2/jOHhdPhOPKBZ_'YRfW%hNi4B(`I`h5atNd_#&qXcW2PL#$t^'Pbs"uL^_0ZnFA_@FuJjTj8C\$!kIHt;]I>lBMu:NM!V`e\GX=_^AAmkiBUeoD+esIjP.E'%dZBE149\NNG1_"C$Dh4dGC_>'Im$f2-ec9B5g^e1^5J%FHO0L$OE'S]UjX%2iaHfYGL>tV;bkthdCZ"=F&"pF>hF8j_:ksE+o<lG%;)R+BMjDRn%f7m5-?GXC]6\)%fQZkf'ZOA0G6(7b$d1+lrq:rPI2>%CW5O">II_T,Vr_IdkVhl2CZRV$]0O:TgUrHp@1W*DhYfJ@%]]jLiM7.\r=OpV?lRm`L&*kh[nKQ/f$V[GMYjN.O7,#4FUtm]T>qU$*GhBS8`-]VW?1,Ki^K>]2.>T:O]0I']@)FQ#7NOMC]SeN<%A\=VG7%>n$/nSmRn"n:@^d>i3Go$SZXKoaVbA!<(nM9Q^*T1#jDC\O=m_dHE(U5^]5Y^UU!M9<F-UWe;&=J!6o-kgXH\M2C&0!(c%I0sKf6XoN5<iXu.[eD5U@;ZfQMnl]JS^+,u3eP_do;SsM,3R3O_Qb8S:L=^W+t#kC;uWAILitrc@L(HFHj\(uIs[dh8Yp=N;Y8TU%I<_B)TR,K*WUI$P]he/I7At+m;db5W8pHsla*Im*fI7>ep5bb?!SC4[kL8UAIRZ@b>i:"`arMgnjaE$\Ej=T=hP\01OG39T>;V5s%/1>4R0KB9jq31t=9\n.Fakel[?LqiU60s!qK$jCYaKY7`lr<n)KETKoPYei92SC_'H-,2^Ga/nDnYYk?eLJY4T"7?ig%Ua0^[*1Y%hc#P6%M*R%-)H;3X*mcp1dskdhc%fncg_]@BKhb,NZO&ZOOUA$K;mdbe,OJNT<cMg\p87)T..XSnII?1oKD;JQ>[]@mFf4IM:;3`%]0?]=p-%Ld@?Q;HVZ?'UCY.#;=g"[+(i5d3_S);=VaTUG]Ne6h75-r3:Y>aE'&IDh_g#hG-bGrO9B8U[p%4B\T?]D%n^;GL8&V$)%:S6t>\WTW]5m%3s`PAk0Z\Zh-/oD"mQ;k.2)LH)[GR?jaBA;qjQk%Sa4DjoN_9XsP*lr@a4g5M2(>P"K*!5>KMDcpMF??(g1[A;C%j!i"k(j;J=T5T:iDf1=!42hH.(jc(M*gln$JY[#s&Di"(o'K#Uh^M&V+t;`"b3$^1kYV[T2sp<#72NmHm\aGK\a846[0#Et=CSa<%XF9o!L>+.QhAU9E4<#*@geM31d>#=#lo%9AR_,Y*c`u4RDoq/"/tUMHHrbR(-[",),;`Zk3/e&j.,";1:8_@&VV1?X$7HlKk]2!n%M-WlkcJ7/5Zh[0Z5j6l.Yelt-b]X/b*8r?n?s9ZEA<F:%)WGV>6Vf=36jV2^2QJP,!Ji-C>VTX.JU%$hUftH%Q\>7%D%OHO9:k8a%VcKq.o97^uh\]ObDl`eHT@"HZ,+9^CSk_DkcGVrD34sIgjEW+5KAp.-[Zqlco:0jP`4L?@W`&H0Pd-4aZruFl>ukN_mUGbTE%JWG%;\_8M\"hCuS8.f6+P`.*Z,8CSIuP^7LDW8LS5RrR7\ZL0_+37hSI/$j&96u^66SdqZ)@Of90j&"fYA2+&;4`I1m$&LAXsbtEeTU1%]"*ocblQcWL6foi'd@rE"DiQ]$3^1_-qhLhU`$M*ne<dGcABX$QP@@1SBjf]11Wlu_YaU;Ydf[R5a#>&*^1WJCS(?>Hq8kV@KW3&%k3RV;bgP7tmS`#CMp"9(^rCi:W\IHq#VN*7]*S[LT9E6r0_-ZgPrn6i`,&+;rg*se%6IS#@YUBl)M:H@lT2$WR-s>"@t/7GL2HqM%%\p"\oC/8PDu@:7$R-tAXca=2-hL>u5BOR-ChYD(c1:?K-54#)97]4+e\-PqgtHhOQP\g_5aEY]>l&+?+TpE.'M,g9]I3)Og?OVS%@HUN2AesH4g(<1fEIsKt.56qpeocP>1?=$ji]SVnftO:1,hGqC>fsBY9C_lhGd;*6gIMcnq3Ia*7g)ObkMuUT^82(?S-_+i^8:[h%]b5H7:[qhJn"SN8_pPQa]65$t(Zal9p+5%HE\-==mVmc4@jr>Cj[CK9dQNlMYnUsr"fnbJ[FS)tQ@<+6Dr7Y#E4]Pe!ChcKEnufC%"Ukkqp3pIR-d2D_mW[<0pHK`JJs'Pn4F\Z]o2dX@<SggSh=%T@m`prF%?JlgU(Dn]dNs_m@bPRZ&HOs*/"G<1Y*=j\EgQFENuneh%Vice)$qh"#'=*Cd7=KiB%%/1r<,@W82+RK^&R*)e5Np&[+?B!2h"K]>bg`bm8-9DPrfVke!mu?&;p(A7pDsOd?q$E<94:d/P=1?8%%Ra,m>8\&eksSVfSQO#kh:No#*@(\a'F9nc;`_(31__1#TpI2qJkT&QQ=/KnB-mf8o<D>@5#An"e6R5!M$K/%'#l5'MLnSM#glVC%4r(d[A[MQd`'k?I)MMCI;4#<ZmVns+W*jQa(7#X;>o_LKkdp#;#EB0CnrA#^(_!SAN+I?Oi_,0aK>*`GA$hW^#_sh*2Ms25Y`#N!%%AO;3*<3!!ThPN5c-_Hi6^4npaf"q)AA\fe#C+h@]7Z_#h-!h;<jkq&9fAF0VWmVW<@i!agWR4%VO<[L,QO]q"%)GebSiK[N.=%M%!%D.d3c+LWd3M>;5idG1Lu,aWK@s%+Ft6$<REFtaC@TC<l4EqfBC5jNg4d_<>?jZ'np"!:X3B_c`N008:<2rK/IIh]*R7m1llrp!%/]ul&oNbTN,25j1<]4`;BEog2anKm4]mW&FGZ6HDrmKM3-FdEAcgN[o+O#pH0&E84KZH7gF@[3e'a:?j:bs1gA&*eCgYKWI6fiJR%ejbCk6glU#NBr^1qBdEkQm<$Q:$W5iN0P"^=U`Ag,Jog#6L6k1SoIFhZ=6E87RJ*i@/"8Nj*V3-ZIrS_QA-/Pf9<\=?;n36,0q\P%5)<`1[Lt).R12,<$k?>h,>QY5]2F2Rs-h6#k4#X14Dn)3'BC(KJFsfu)IsWI0OA"Q"AScGgpD!#H`75-d;:P__":P'RARsCck?8B%S0*"'AW=-9'.c\O6:%BgIV`Q]";hBpBNdf%%Q\Yd:n%\UQq<l,5o4COV\kkWWtD31/9bi]=A,JY_@6`X1Ccc>,.7S(eWK\U`^h@$%dqB-n4#,gp?os=P'pQc/[Hp*"K=RE=p!@f/8kXi.k33QYT9.LboSKO%Y.0QSjo-<_>+dPLgm"ouY79s@mkF4XOJZtOF1A8l&1J;r%Z$:i5'9cX,%@\)M.fM8'Q<_#YDMn>H`C]U3c-5$#VLu.R/#^*%iTU]Y$:OEr53n6,'Y&a9@sD=fR]Af-'ec*QO(cFM<3^IS?kk2r%qEXK:A-iX]Wi>j+N89lMik-:(5);36jhPP?*orROG]7aN`_uArW=r&1;tVKh\7Bo06EIW-jYMA3IjLZS4Ol/jat%H,(rb8aV?"JW%<d5Z<HgW9:**R.>[h/gOC&U-n#MC[3b+3(OVH^)\aT-cP)[YF!#Lb\ifk2Xo-D)O\K4=A5drsf3HoN@eh9VuQX&Io<%?5AhAU%L?%R$9W`i@/4RQU(-lp65si\HS_:B#n2*C,eX2^;K!"M(abCUCQj7jOld+8B<ZdmQr/)dqm)S&06<%U"9u_)VFqD-#)ndS/:2ho+@64%A&TJ/?]JIJ%KbdOH1GG+;t=EN'6rSFH>;XHl;%3rLfU'5Y4bdgG:t>SqfJMR2HN<>OFhUJQM%qJrF;"sj6nPZQ<l;?TF3B:/D7$!%*;*Dp4fD]XqT*XaL7^)`R\p%K,rR"Tner%0n;uOSF'9Cjcm=`.V43kcVaSTkHlu\p7Co>:R53u8?`3KS+[6:B+ET7W?jdk#Im8Cp%@$e7Gn_6$YC3T*9@VO!U3u4iW\C-pm6t/.Dl/AC)3Ih4ZDS"gj56ZOS+.tYd>DOLh]$^eiaS?!r->>rbY4M+]*UDcr%M&5fB2Xh+%l<i_=ccQJ;G7,[bl%CnDcI52LjDX-D2$D,6`f2nSg5&ZRIa*-fQ7BA9Yr^8!R`rCcg!=oul$+/p7aEj\GT5TB_^3VOb]@aTI;&!G%RlaO$T;H[`<JM51_#:Qc33XhlCNWbqVLFrrV<fX2#@\CH93bXWKlfDU5`2CkDue\0HA`=m>ubk$Jr1j#I$l.]\0Hkq<1@fheeIh3%2AM:Kdc9sMDYXp3D037T3rCsl^fmd:*@M]i)[L;9=2lVhd+&BBYa!EAo15!/'nQLdJt&,QTkhk0]tIO\Wf`2E3>.\a-0@Yb/Z^p#%e1lC/5^ZLe$mI&V";'A2^J=-=e,`%1;@UQ?1(O8'*%-bgX!p3b,g726kKJQX7SVifi*u&pY![bf0Y%@$M;tROa3=LYlqCFBmhMbW%fW?VM1NpqXir82UKup@.^XR[)mb_e8*3,QI<AU8P>M^pXmJ\!N\9J^JV`[lC95?YNhclki>'8&T>Q/pIhS,CVc#aEFmF]hZ=]SR]%j\aBoK/pK=R7j;86Co_#?9't^Gg.hbq.ZNtY<@:VCJtI]mcoM.D;Fo?<H:>MQCnm+[^AI'dF-"@>tQZA8,uP+6\r=$m-9St/aU[Q%$W(C*&u*Gp2X,6o%@UrYZa/9CTSG>99&oBhrk?$4R($YLX`Ff,pLVsH6_q@Jk:>@a-(f-L0tD.;i*@IGmKN^@ge)l&AB3Pg$VT_P%&sZ_8-0R>):/!Q@&P#HKkmo3ZfQ#?WHm#8b9/g?g^)3eN@!Akim5VmVbbnI5b*)KNio:E.(%cW2:B/?u6Dq`nNe@$8(IRgaB$nfT%jEP._<-9=DPh6hp^<G]NYoIWa=3---SBq?6e$Q23'3Z302eSR5LoTZ3pZbb-@'#p2NK&<>GDhD&ql+!C4R$ZU=cW]>&@1bi.jcuH%3nhAG8g[ZNFMTFS-WWC>%FUDj62gS`Yo&2h=%m+X]K$ZIf6I#Y)*P14iA;'lDP1t0I*UVgLA:@d40Vfpa'&*F[&u@`$RfoClj7a:%.mJZ84#!Kf(t,'-'?MBHA2jT.[?M3`B8D1DU+c'g>Y/+nW)5TCC''dG>d%<#?3qB?CpDq-3SD,K+EHV#X;CGa#>n<g-WP'2OF=Ge%8@LO=@rYqOXPOc8.?B]V!M;*N8L%m/]-A%+\Lm\Bh9mF90]n[Z+Vbi,EOmA_&TXmDD@EFaJ?Hk&!S7iS9qC][DbM4H=BR<kdn'd<%<j)8n4DQH''iVamXjhIC`XFCCZ?RQcK0+.A1^)c&Xr,/jVoH-2cEQSojXiNVOk2rf-22T\RTSck2t_MY_/peA587%5+jA6uQUAd_%V.+@d]),p_'o'NF!ii86;jc[C,qX&im.rrogUD)jJ6+khkABFm'3BI&)h:>lT/COH6o[uf@RB:Po>07VPd!,IaDfPGf!Z\irC*58%[H?b`7+3sd>Z60F)3lP&O`A`CFB:p#X>CgAF.F"K!VI^"*SOAl6McF)OKbnFGij$U21-^n6blAkB<d[3V7Hu,c=J5tCIKt[+Kb3#%<GN$#^5V?T6rXHh%+?!EDl$%HOb-Af320#Xf"e(A'NHWlE#]e*%U2?01A(aX&g'X9X-26Rdt8(:2*#YH-3Y:H81KK^#=a24&1>s\%JOk6/8HU,'1Vos`>O#saOQ[U9=1?$2"hEf$mgYJHls:-1ijRp&87H0IC<V1r[qss59bAMX=H),(Y`2d[;AjG80`N`/pK*;fAMaZb%\;g(^U[cV8kNik9IRV=KYZ)BU!p1`;9WK1:-U^T;SYl`@&"?#M;IsNjQu/i;:W-M]U7+J!Vu^uL+a$0&&5AmW::hJtL=,'1e1#ki%NKo[/_%q#Jbl_8%FdghZMXVt?HQ,n(K.=>t0ucY'XNG<DY.B(C4B+K+7U-\3rMFb\DB;?MKN-9qRO&r$SPGgg,.W75[B`V;XElbC%6uca,9b];2,Ub?(Zl4Rj^1S_bn0(#\gJhZFRZin-7`D=Th1AZ_c<ujD+d`X]3RqN=MAKX1K6`&L1kVG27-i6tSDu%QW^(67S<6F/%Cm=/!R@WaW`"!="R@TG!"A:b+H_hoM0mWT@8>8g?+f!rdDf&,m)<`0;<?,LD0*39P);i."?((adD"_P;ZM%-jcndF5@O.)"U!BIL%`FT.fCF^]XO'E0]6V\H"LFbm5[ZfXIOFg#48N_\@6k"BS[XPgK%6K/p.JH1IJYr66&X:B06[]=OVmU:bj36n#Ckd0lm$S<4)/`D!%9$1bN<t:%%T@B%W0FAH:f9u['@X.cr=0.XschEYRLY;DJd%$ISk!4[O(+&UDQfGh?4X*3IdP\O;XbP#a/u[!6m#s6e#GO6-8,#s?%ZF(_dh=tV;)cNX9rB?bOa#Xf2;XkZhI4%OnWrleOPV9Ya`#\FF1Gpgm7j.HOUD+o)"Fa/2JtG,i@?&oh61W2>RMTqS2r^)br@L7!%,/J<.8'ur;<ZIF%'M5k'FQpH(O_2q_F>fZ8PP=dqKRWJuAd-4q8@o3T[ssGn7!:NHW`2Lh=<:QO8\76#gXnfGKLfi^*s&%9UK\nh%\*\\hVrt*u,:F6=#)"arBe(HB\;7Oh8D9o-9</s:doX5AXcB&Z=HDL(L[T>qRnuW;nFernOm/gpV2YJ:ImN9C1]0?FI0AG.)Yq`M%<k=:;8!kZ3RTPb?_MeSjIS_1rl@RalV5NAFUodHcP`B8%^9*JNnNaP=dKt?!F8%;@"NB\o!+]dhGUC)`XHC`b%mhN"c\:fpFU]We%)"Z6JQr`2=U$PaHTo^s*#!I[K7Y4qrKJ#(o+KU^6<"c8@9A`Agq)S_B1Ei9PW0%X!&8#T$bWTpAXcO*MjO@4$Lu%d!UI%9moFG[^%9YHOjYU)cYK#n@-Tofo6(6V/(":7\Z*uYGM7/(\:,QMj5(CZ;6MW=2l7`'6aobtk,;;KG78\8#DnBa]+fihmFKNTm!h?jPhj^edQ%jO9KF3a#>ikHC_D1mY54ARd;L"j8QQ"NX2RDhS=]9m9W/J4L^eK`m3k_,a)@n3#m5O:W)mBSD+q\n-SK8@-@$'bXqrlQZPD2&kg*%YDDh5"-Yo8J8'['*s#j.[a7ME.5OQZ,NtXJ='3uQZIB^A,ethRDLLT!XH)N1DM$CN7Z_9K4&e`fA_p_9JPm?sDj[A_!4/M+$410X%7427\@2Q.(cD?T[/brL$FT`/X[VL#=9bN4tFbF8F6.kH.7o,;QeIctCM'<@g3t\M<Y8Gb$,-p<6*?danpoTSGpQBs24>j?ahVegn%e5#fmDKSA5Vl&(D<+mW.&]Wii]?l7A3JZll>9..*rb_B\W["%$C2YH",E.Ql+k,]^0R6BH3l8'V^K@EZ=pV>.#^_r`SPpWhij3qr%7>%(Qg]sS(8CRQeW64QgPS!oLZ<J1IVA-k?MuXGeBk??*Q88#_;&LNt>=bUca\U+$[+#[sIY]`iJc"<H#g]ag$EpfK@+&#UNO4Ak%GY>Kp7Y&QWDJLIfN1s:LToCbjb2!P/"JgJ1<+iWt!_afqId/\('A<_R'$^g77Y'`B%;c4s8OW<.2KBp5)`]Tf,Q'UI2PH,'9hN:9%[1W%C*RieW*!Kr2gB[`@CZ4ZMX($cNTorojl^md3(QA1r&NVV"5/QqM[c:R4iD;>>_-RZ*VQ<TNR,4^n?e=QK]-*mBHE*@>$%7I7%RB]4c+2RO"GnTrZDm=81VEXR&=<Dh)\-%RA.PLE+,0BO9lQb2:BknsKIc7+m4[Z\sI;q7K7N(H8.cN9P)r\(;<>sQs#Eq.X6Q8$t%7G>i7WI+MS3^:^p\XHF36GPI:F;N13,qO7m=K`]n/Of:=,(EU4Jjq:s%/G(.,)f(FLd:%8O)@3[!Ff9q[F8F:%`UaW4!rk,iMk)d%`j(r$%5$-+G!FX'`?H_!.S%Stm*Xt.)8g*&lB*>Z\g&F5P`[=@)qeRQVC;)+n&gjAClmWT"6-A\HZ,g-0P+#&JP7F$OJ/<W5j#Z.%@AM=J/XJUO8FRganK\-i5H"'Ufs_$gTetL,R1hp?:djlD;J'*oCq8!C=i(EfPQ%80OBpqEX10lR=?4#im.5g3-O6sL$qFii,5jr(%"Xb]B3d$<bJfq$K?UW2uJWV1k&ZL+D;kPjs4XEIQi0MS$5aNuuT1eEh3^S'*oC+!agP),Umr>g<-Yq6#/Y\D_=6>_ZqdoXMRi04(%L&el7dq,A;WCg%\BcpA(-/O(uVF2F!%E@Sm81@U\,lhJ1'Z5Uu>52QFd3m_B\LAaPHAr"C)sFl]ld.U%R0F5nAe*FUn4D[nWt#PH%Z+i6sfHOT<3=[>/g<VeXgu4;q6O>MO_NDDPb@m^](+LR,&H`)"m@_\E>=s%:&-uWfe7?Vp!#$4Xm2$-PLtY,-l8]?*0Kn'D$I(qa%5WS_?+92h\5_sR<]g/6t!)^$*,4-.$`-MI%bmmERbs\QDP%5rgSK%RHUb)WKHNdrcrYG-L3-5jHT65;B,`3BT4d$n;^I!H'W)o.L%\IcHoR$`T@^LF9J-4GhD+c$&j?9F%j_VDP8QX'iPOIj1V*Z9e*/HRGO:$adjK=_fDoc:%pb/$/^V<ZSAN,dE3TGEVjJ*+dpU.b#X%"b\4`/e$UC8tImcG6;uU;.%*Qq1m6]-RrVn-p3W\Xr+0mM;&"39aHOVXaqTKSk,.pa5p8A^uPk-"9J]<>RX\3I@C5L%_/Ce1M5eE%o=T9#B-:WhSMctUeC7$7>[3;;7sC@BjYCHM+DUXU[`e4b#DQQn%!)i%UKu/noNYPEkeT-lrn\jQgg;$e^_HU!Kie(VGKhs\>/\90%7(\c4F>$Ee+N0Tl07u%?XrV_^$,IgZ!spYbNe,R8^fEbD4:kTReU%\!KL"VlJF\BS\"U$I$jo.<M*X*%7L*`R(_.$:N>Xk$nhH_^%%nXq=.E&On@.?PmB=bbYgc]u^iO,B%+7(c<m!(;$[tk-?!sf0"S/-_N]#(2&Vn+bk5(l&=3)k0X!c\Pd?p3g!(0N03qV=7:aP_4a%Y#MCPKRq`mHAE`(fUJ*B$8_%ThaJu2n<tSL$S)3ra1n/;0DE<;f./&@$D+5^]sUYcY7hj=@'![Tk)'D(V@ZJE?/-bt7bZ@`'o"`f%<\3="4l=trS@M`9H=fe2#66j.V:lq,T2oI8;sMC/M>bH-`?RM"P.lIPl385)Vr&VIRpRd+;?4NsK#ud(?-IuFX\iqq`bs8bXUagQ%GHDIZ=W047#)'iA)c1ng<NWGUfth0#Gt4kmm*#<gUAd2`Dr8duqp)`KOhJ-6/^2]Ba9S[mmXXW>eQe7m6W-6YhTo^sL,+AmL76-B%#@lm@0K&+G^mI:m#csT^(N'C1RF%qc.mtBA2'/K*ZGN/qrP*FmA0EddEcLk<K/T('dj8$?*3M(-3rgZlF6*S`V'PJI5BA8,TFM4J%,3b7\)Y\>S7@&$EA;$FU5B]V,jgq?S"t>DsTeE^9+IQu6hAm:rOZ=-X'u'lh%>e$"A*W6)<BJ0Q)?i,98P!nA]A:R.46eg&#+JR3%7XCp\_1dUL@e\u3bWNk0;5H$Dne<Eg"GhMUg8!nQ<i^;un1D-nm+I*W$o7H]!1,I?S?%<G=mJ&u&pnsX2e9aA4DqeY23QJk.@9Ha%7u=sOr">9*A7<`&(c&i)q)(4pZ3:m,fn.(0kZFYH(1UN]MPmE"jl]l^AXAn,eJ5F2%EN2p%!_O:3,ePXIA2N@opK:i6&%0j8#Ya>%5HCZO;ViG[`/#00%EQRg6WU)$l8VKYVM?VpKrqgd@FM?AjVm14.6gNgs!-h_4<3%@H,U%F_uXr']hJWd#UBgjI>LiF`eE-ChIB6;%j@W$W1ChncO+u_s6Tg^#jHnNgb_TRrQf9kZ02l);DRM[ALC.N9kql;2l1h?t>F9n=,t/=/X3Ll^f3;8.cW$I/lQ\u`82!2m`0hVT%9%%a@7OQmO?b2Oc:[%f^F$"h(<B[1aSNM^G%:koIaO#\B_p*1&c\dh$$gp=%`cC'DR/nOQA^@LaP,[X<$G^G5niPGp\s-$3Y9pVj%SuY]d/`UDJ-JR=9VdLc;1Il!O^obJ;+8`hs+_9I]U+;fs'cm'_\^HLiIJ1+-.dpcIOoH1aVi2>J<2!0.>3Ko-6Cc4:],]8k)rIE%%?>%*N7eLfZa*I4:6Mte!1D?cSjG3)%S0B<'S?fBn'?dtmhTpD\_q)I"q*;u"N844ZJ\D!(V6X_e?i1,_mk4Y,b36m<#;]2I=(b*_%293321B<lH1l^,pPL#,+g=/B1A\_"Le>9NiC&eR81AC@:#+.e.9=W@i%\sggn"L#BE(t.`!*BaD8-.$H8);\1M$,\T@\O'W+<G>t%"4^CG:20dN[6uI2)F+?<8VfYA+=ELnaA!+C'7qShE+2*Bi:ANl/.QOt\[jQZ2n4EB'lLLkJa.?M-T?R'&3?M:*2q03\_.#9BR%4.%EhM+qs!.iL$qQj,5b#,#JfMSq;9(]L!=YX.csR+*^GPf'%\-(o"",F=!!j!cRiMJA3^KtPpcYXUM]De<Vlah:@((fB*E^L"4nG0[%V<3CNW)X0$:Nc`u"Sl]:"%\B$Yl2NN?rhk"$$H;o4&VM#li<2hKFT8N!$As,H&<VEX5I@jf\\CoG+dR\EU3SR,plB1!8EuehY@k\%B/_of`&`**f`<GER;HhbJ4XgnD[uSfDe-*T0:;,3:@#UG!Iic>Q,s%n`S.*8/-3:K5UAE%LY:eoP`WrCG+Pc\*dNkMbbB19jWk(]%1!T23#FNX?<eI7B"(<gWK,e:-)p)RT.G&rRli>I30c^$t#FOL#"F8O*7r#1Lb*_(7!K.q"OLYC@3NaPE':p;Dg\jDI0`)BmCMJCA%VVi,q:]/g;iU+fGZ+MHP">dNN*B5aX!s#-ZR2fVKU!W[2%WHZF?R%W4KU9m=MO3n>TA0#GJMj#jap&RH!*8MFa%6e@7pTtXTK7)i%jp*fM$%`g(6\%8ek'\!R6$:?GP9OD/`g.-m!*_)=6i#?1S,,\gTIUF-4eB5Y\!1j-\7COY(]k2CmVaf_06<qnRP2#@p<?9?N_'c>%,jSXKZnMDVQCuTY)2P[2ZJ5&KOZ05:i4B\_)jsrV*&pTR/q4XaF]s>H1aNo5G[@..o@=p#[4dpsD:DXg8eU1odhFs&e0iKRVqmH7%S7Kd(b:p9IZB["3@K>!)@p^kcX7=1KG6Ii[c$e/+-6GHY0Nb%=j-T<:r!A0t!_]"OnFojtOMc[nl<BFJ-13U:dIJR+c6t%J$K_*\%'@L-op;BoeJ`_5Vi)KRGD2Xmmr,Dbf>KWW[!gBodEb16mAr\M6dj[h%GHIAb@nM'SL`;Z,'1NdNSf?LW8g5Rd(a9lKiY]:;U&nHj%a\a([a>BNP(aA<$OQ?2NNSP(o@lWkg%t0-l"8n*N\AJEHq5T5r7Fb"*\'kKEMK<X)Ql!WEX1fca)*VSnO6#FXT;4@C+srlfd2U/!%V4:9)8pF5"q:A\DhQN9MZD\4i8uGHfM428ob#c-XZ8#jkX1ZLK8Z.&(OEg3LRf+6mksIrc]o,W.ZCRPR6MDAR5,?.JMA7l8<)HNC%0ImV8n`S.D7ciOlNe[Y09,9gm>Ub5Or-6$pnZ*LO.C[h"ZJtAoFmIg_=khe5/"X<]ilpqp/u&N,E&-]:h,YET>i/g/Lj*H&Np4Lo%3KdHA#[H>Db0>*?!ZN%Hm:Un.2BSXR'hJ$SL!Z7]K2K5L9k/NQ&ZRqenbQrB^6a"QDAU1H:Yh?]S#PZ"L]5"5KC[bN6gHn@(Y%GD%6i@AJW&jio,=P5<h[<+HAM+Y&<7mUZqm$n=EQ-U$dAUZb=eVWm>j9pZ.d.lZh*=.<TIrD-G`$3gJZ&Q`G6r75D8^d8G*.57"T"@<%]+k"=6ipGq,f'H,,gb?](ipA*$cB7s<Y[@7<.b>;!Xkh$:=%4YeU?.c>i7Vo8Fm]i;4r3<Z+UkHdt_dda"nA..Jl-LI*"AlGP,1*%#:U*:"p@R:iXHG;^Tc:3_G4;J[Jh$g##($d^$CEhD4nBQm$hNA0$.qC-Sl!<!!_au^VS)^ic*G>VcuY29Q+:a.M=%O<i%3^3ZLT'%R*`Y:!Stjc+%00X$FnN>$u(sF6ekQ^Z-94^h!$s,KHW#\1$D;Z+L'D[9K=hR*&/`qcVT?5(h#$7g,&&RpI^gIkTdrFYmN)L77uM=%3R9Udi\ZB\fJ$YRb0&_h&(0(tp1flo=#(J17Sl1BEH^QFQDtk"X6e+Ygr68Y/`nPl8EhR&8Hj5TPr2fL]P7.M/0h$Bl0N(]oC!LI%Q\!7^`EC?%_e-)?:`'eQ/.djpVeeTJm"C''Z$85`XtscBgac>3N.j*U\IOTsBp5\"oP::7(VoHGP5Gg2[B[<um)Y;Wl!7?^-7<l6%0JX8Ylh2:WP?%GPdUH+sK%n"rUoUAqO;lSG6hY#G_s\t+=BHb,MVAFoA`bhD?fsQ:O27U%Ma^^FQuN4qo![BJntt63/mKs85n^?$%BS515!G^t,"-d\1#A$<;P-kV2_mhFd"t*R/`7,scjHjnIM-_XB<SiQeo>6@Wlu[^Hme`'[HDP04g-3X,^eV2BpQaf[^\]%[hE<;j%UkOD+o]9/5^&1K.8NZXXhdPj,7ELi,-(%r;.<G58+6eJ>]/;):!Mb@2<!-hXUe@E^!BPf^F3f`gP(KV9d?Co>6:$D%%R_j^R:a5:%OfhDs`;LCWD`[<*B'E/1[L+9i1;R<2"!uS&o/?6:"lNeL"/1(ShHH9ZQJsuJ1?c\I!;'^-W3#lTA.FRu]gPuoATG"F:.+XV:=C-+%`JW$M)RIB7K(g?Z<".XdbT(,HOMMo9#,F`0MO546l?cIh-]p/>p[_k+oG2"NX>ArJ4qZBe3&"Qa71)>]mP`7/cGA?=TrgYGP<9,^%q'[S%VV;LmpWVTTc[I4Z%$o;V6*d)^@7(.6W$TY8/c60<S.cJK$XF>?#Uf8?!)Fe2XHIC%$KP^[h0sWAEWm#R?qJ>8fGBe=&Usjh%84'aK0I20c;@#TiM%[8o^)+rpDJ`hN-ar<<nS=@Z:+XLA'JiU"J3n`69/5<6"#H-Um%Nf?\>g.3jPqpU8i$:&.0&?35mE73:*@C)%U]VhV6g=eP*dL`IhX:5Z,Z$$%1BOGl(-o#qN?n>lK&#M-:J>oqJIF1ol-&ibMO.W=F)!&n[IC7k4sO/R%g]LlTm%1NHWSK%%gg`)%@*XUieNuh8@\.TN-9EaNk%#KjJqdn%E9A."MV*ms_5\9lJU"j\Ue#D]D^R)+_WYf'!)=Xcm9(3DSm/0H`gL^:4[m"^Z@T_sU56=7%BQjnR,;i%[Xf&E#;Ua54%=FbWoLdY\Z7@%dSPC!u%hN0l6DR[96Z$iI&ak-0!Hq\2F`Oa-'/<P5.(8UXTi49teM/7XV/I`r0<Al-%nE:H>eHU'i$dmWRa5HpGD+@"&+D'/NE1b>0r#/;R*+Bpf[n%)&Qs#JIOFe\/3Pt*:2"ppnXf3$*7Fj<P:gc_A&Y$:dLa`pHeU[6\%'RL-T2QIk*L<IS(!M:/G.t,5f6c,dsP4\(trDm6kNSUV5r-i+m26)2R[>&t;\@/FXf"'m@NY^">c1?W-*Qr?r4m.K&4WZ8R+^n;X%j[qteN4RnV=UkM*YT3JCB]JHZi^K.cHX=bbhRRLq^ke!c)0fjYd'm9]=h4"3d<c7rl2LX(%_opVDA3N+::Ok"qK5+gk@LXq#m<sl%LV'=7J?51G<=U^uAoQ:SMB:7d<F9_Cm6\`@9"<SNFm1?qQWtd2jnE#Jph3[:\'/ac6I\/>T)k5:.!0qeBj-Oh]2hu'h5Dieg966<%<XO$EN/5=E+KVKl5cl]AiB2R-%Jjhi0ir8gVqHFo3h`#(Ta[;AH[7(lYp@`<I,DV(DOoY5Nd+g,Elh`pD7+>_9JY'DQ.XR+heQ"@%m+Bbp>C1\=@23!M+(CH>2mf]@aSVHT&<Q`u7hBoCK&J`$HYho"mEOBjL&$)^<j7T<H.VPaER>ADHr/\0'aVk>6U6D)eXH)$9'fIR%S/hKnr.nHt3[,YD-Hn&`4P3H;\=7*k!cG:/a"!^sC*#h,T@7:oV5d$u<c2q&een(OZ$h@tR-Lt8=%UG9&5g6M*g]YWV^4YD4n;-9%;o77CC5StI^!<(if:JnmM8b=j5WsVs43XT>7ocj-S<GNE):hrJ0V=M7:L*$bKqU#WAX5:okJ;Qj*#cR=XHQ&$5G>"UbYY_s`8Q?f%->^n[C>H4eFb]\U['GX6Vhj&s/OU`cJS8JSNdZ217;T>t\eZPa\oJtKhNgJc\TcjUDb;<0M`gFoaQR%g1Nk=1"7o&04)_4:9ZgE7%1?-FDaEq7!G2=rtfjr@<3Y#u^B?-G6*ObAqEs1=hR(++af`.++JT=n$jEmS<(1sJ8U77P`*sX8_,X`X$hh:@r<$kFepH^B@[9gMc%kaQH/SVUc&K;'u'S;T5%/.kRm#kZs@O_miM"\kDi@%\+!AfWcV\q*0bAq`^Mj+[_V+Wj<V?+abIPcH/$9+4RN4@n<<^R&-b+E*2U%JP&1rKNZ]@OYf\OM"c-W6+L\];JJ"V$>1"MfshfdmST5\l<+,s[gRWg:Q6UZcB1r8asU]Fb3-<>aYeEiWWsX=93<AkJUI2a\OSDf%MO+mlN+8r9kZMqV_f]PH>A]\Ip<C0T>fB,POEn(BO;3S9bEB*Yb4TKZGWeu*caBj-gU*Xh*A$h2ehkPZJZ729h">PpC6''o4X?6T%n(Td2+R0M`8U,O;9'l:F(ek&k!15<f2MksI4"M1'\6u_iA[rXAK"R,Tj-?"3=5Qkc=1@L_Q93:(i7@2!0]"9*NqK'XNa5dO.+5X)%)RX,`;9AW-691p=8&'!36r]*HdI?C8fM>MZKA]Dpe*9qV40?7J'%o(>^"ea1^R%c7?kn>V!tq[OP8P@a[r2KG;m&iZCc8',YPfYU%mF7Ng"Xi-mWq[C<c$>PP/go-!C5*slj,RN@*Yk+2>7$-7(j-QP6IBE+LuIhm$KsILR%t\f&.lEs!1?^NR9UF5osU-#QDu#\Aa(Hq%oQ?WX%`Ak;-T"aa7-@uLl0>S?1''sA%#8B&,V"AM*oJ%^#rj<<bHWfYa[.g`nh^mDr=u*:Re,nVCC`C@"A(C[@8Y\?DYkFU;&VYE%e"uI/2F[2QA@f(L6=#H?XpnABWR<I0?rFoXWhJ;?_-f%MX94]ViglHGC;BEp&-Qk8'T&jm,EOsRhr7g_MX[<5Uu\qO:[DBr#:bhE%r/+GYSt)0gF91W)Eh=g/%i%ErE8P/#($sTu>m=p1o'NV9,'S;)"VPSo']XFq>V:NoNo\Bm5/^^(*[s[P=_&\^82C[BKdg\GReGma%ESR*<nHsQoai63T$7is&ACktKoOu2Y6"cRm%]BVt41]5K>?-XN+R)eV9Q*#K#,9(M+lIV1$Mg(_:n.jK[uM>f+fUBj`P0#rDUK+f%"t%q8af;55pD0Wh<icp`9?*7e'F9-_\jLSVE"uh79oNaOZ5#b>s6DWp9/8p"D-BYZj18VW`?,Pd%?2S@-ZX*V?#Q1_:q^Q]HV'G+%rHC?Gl(kQOU81#o;d%6?3HR*T@"S\9`N*>]fgQN/@j0M+YAsBNDksJOE#XG27FPkW0-5<"<%H^b7%Z*B'VJ.jAJn#n(:S(\*G>AL%MrF'h?*PB;mOBT)>&^LiA8a$2<9IQKeCpGrJVN.<gPAA#c1OusZh*g^Z,=5=pLA?)n[WG)A"NBm?!`p]DHLcdMc`qY>tJ9uBKF@h%9&>VMR%^[E(7<HX,PR?b:Q1VmOit&;Uhad)qC#7tnQWA58OqrpkGg#;!8Q9:-I%N`%2V&CmACl5Gqg%*JD".;T^ko72^,c0UnN-1%:]Ru[5JPM!gGcJ78S!?YGk7aJ3m)Crcn,^ES!aoCdSUQ]QsMT`pn$T;%Ma]=cu<Y0nWlqaXeNV[r[KhX;'CM2A(OsY6\2:Fp)45H%"g6Th3^Q1OE$o=smX\OEbWToY.&0>]5+]o;@bhq0;Tt1?VbE":oFqbDL4ZMmi7+'E16tDB'bhpkB3aiP:lt7]+8X*XWfDNX-mN9q%V4\7K4Zhfeo?8cq"go&5[?8g47Yub5CFC$WYbk#[)%Ohq$47m>^=99X^u/!QVbg2ZFU!Cn4tuELQ]MrHVam%#j-ad$Y,.d"B1tH'%'EgA9YRq3Lr/YsCY8mDVVT5g2Hl2s]ruX!tSGEQP:8S>TaDdY\#7CE_&J&>!69Q3p!,VUE3:5PM:Vs=.e5,:5mupoNa\YjdXe#r*%%8Qk4\@UqU:Z)`+quTO_(q7sC*;[dm-%"o.g`nXj/H'*9)n?IWA2FoK><P9g%NWWaSm]irlO!7FbP6N="Y`nrmaP%0PGmo].[&A#%r<.R4q=6OTr<1DOoIaGGaUFfWV4YQVX'1:`IY)C0<nWdf67h"u4Wtqr_<M==.`tsY&S=a83BMf=!$1@H$f\Nf-UdV1Lr>LRShR#.%]O0/%pk4?`7-Y(afD7JV'7,3%oV.p2;!b><lH+m:H8;Bj/8k-6WDtTe0iUr9I5T(qW[H#l)k)f;'."#]F/pZR\.:qi61S*;d%R)i%j,+0#qFOnJ)F?YsUXCtR"T<uu.Oo9#-Q#-p/VJS)rm@oikpIhkqT4Rc5FKf8^@W)9CUOGPo"`R'Kh=Q1_PmeYL=;[h+oB1r.fK#h%DUm*0R#F&(EiCE)W-YBi5c/m$m6h8AZfFbp-_-KJVk8`f_K=991C3B$,HdSSm:7l&6T[U.JcV3e17b"RCE>!ubFtO^,'&-YC/Ku=%:Zg$kF6Y+YkT#q<:\kB'5_HJpITX\B:JOU[#nVAVKmkepnc-s3n9^lk6U-u^L#)UI50pZhJs7`6Kc&#RoXA>'Xe8?8]f[$ofc?]h%'GMmlU!=[Y#HL2<?Ek4ZGja,Zjf,7ZkZ^?@iCA5C.'0TBF/^P.&7;NW8NkbJ<_kUhlH/[I>NuNce8JK>69g$fA!j6kT?N*73R@WT%S)Nb(gL=4dBI[8-C+(#/%0cDZ0$gOs'\'fEp:LbJ7K/]Z6%T&IZ03Rc"9+Xh^![8O!CLl#;rJ?$q?bqNl)&so-ObXMEgVu<JnlpY%<TtkMg%rgI8O)2,a+f@u!^oeCTqC8pjAHZf#r^[`.NZ6Ng\?&o-Wn2nHLt.FnfDWG"RD=he'_#oHXo[)G>WuM,GC`WRCBYDk43R:%J>'9V>QkfZO9W.."&H$DUk,@@26VI?>J:erc11$Cda_sW=LVNKPq7)loWutYVr(gpD4G&=T+VeH0906sB4^UQ?)Yc--T+"[PjBB@%EQpOu;VX=MNZ/X_p8C#[@pi3UUl#nCN&m+n+osd(MA'_Ss1MahA)2oWW_B<s[cr\g&eIJRTV8,M>':Rt71M+Ie1Q*0H[N@.h`3/[%@okL-SSo671E>5pCUpJ)</G(.Y,]:)3R/>ERNi?d>b6S8c-+OF9Y#mV2G2P+S@Z8J(\GX0Xd55q'5:rk%r]-o/:MT?'i@WoOLahN%rfK8HV`4p-M7JLd!G6NY45$m:pCM@ZaJq@W2.Xk;NM6C]hX%CX/nE$8NrPn3rjRn9HL61J\ei"EE'^c5_cJFN2BXr2M(mQ.ZeiF\%ZO.0NVhoa@M.s^Y^ARstP@2!Lh;[p5Z=)a=)@i2&H0(g9Af.n4A8gneQEkk.KIF;,*#iLjd/Yqc1k92Q7HQDcCZ;mBq7OK427afA%_Cd]\kmF$3cQ.2cc2V!\beJN((]T\JlMpn/^O0)+s7nHJ\,W@ul2(3oIR$l1DGa&d)eWZ^Y5i,SH(GYN3C?-K,At-I;]m/H&kq9n%'b?6(T(^^mLDCH9p@2WYajmWHB:,J'<rVc%$i0S&R^B<Tm.f#\cFs2OL];OaGm70QMXNJP-*Yn&<\3=qo"q+_lU1]3/f3U<LM_*\%-K@_<=h9&u+\.k8[[OnDoR3'Klhj8t4MCE;rbpE7s7E'sH[%clRY9$p#DV/bUtL(^4?,5Uk#n:rgb7_+#_ZeD<HDQIA6ig53ua#`%Heqt/RUQ?lQ]cbWp[=s?nJQ0NA@FV6o<iM,I&-:D62Q7=[AgFO`jkJWr]N2r&cjlnm6QTTE!ung[?.<R8-b@i.)FkqPpt][$X#]L%2.I&Y2K1RmLGB$#/@G8\KqQJ(e&#.tf8%*6cEe%4j20Z&p3lo8Dgq[U:B.OlJb;uBMMQWeFQJ4iDlcAViqN-2K)Y94C[XLebE)\m%j6qHp00eUFs5AJ*q)A<SM_MC^s.#i5kMb\7=N]R>T&ujj2<'M1a52=D21([P1n=)D`PfWs+*g>/8`]``dp,YLo65SK7k*a2FHoAp%;buQ7i)hNn48Sra%UG0np#eQ1O'E%j6W7lN!K#UrIdt_^bh>f_*3X_j,o,#i6+&!spq&-p$:*f+U)sUr@XQe\]X!Po@Xdb*5CCqk%pLfJ1jF9;?UFY#`+q=2_*%D[sM.')1^6[7JrsS)fq/8L$T\hm_k\pIVO4&?!]t8OYdh^G/@4B-2+7OKGpiHd*3qZQ=rp)fKk.L2!%`sPte[BN."QXo&^/",X/gpTFpoBuLd[D*T>F+TPn>NITmi,"3GjJT8Z.6D$,m356pqp>GKUh'eCrAasY/g[[<emZ.V?U)tZc=```%Ym9DEDqQ5HH.N/imuQ#icQ/_oV8f9aB_A4kP(Y*<UfA(68/_#&_DUbbrg_C397Q(7?f,C,fA3V0bJQKNWg\spLm3V-jNFe>8CL^S%h\36'rGd.,a$?:9*;GDX1Qg9=I"lWeG1ErZ:9s>\r0+%VQ"&QBqoo2R]#0^q'mpo7>QWZ<kNb83Z%@\Qeo-%!cWq(L31-+o&q1C>%&h4jdoT8)O4S_i,l=/^&=&[;@Qie6<70T'U,aV1,hZ>u$Zk<u&6eRm8Lu<O')$Ur\d*ggu#)):$e--'W,t,$V>o^+A=<jn(;tW"<%DKXHR@a1D%;E&M4i]goh0Otb!KM#7D!K8E^^n;7ko,h+L<;(CZjiamh5Be4I`BX!MDr/H6ph+bhrC2/F^["i2XJe"dglL>Eo#UcN%489Wlcl]uI(EN,Wp##"F_4nhE$O)nP*m`gp:A_CP+A<j'<YAP?3,+8_.$S`Q'p&a_&=?q3'`#R%me\8_L0A9VKD*QAF'hB8VNNLD%'2tS4->\AA$RGTu-K62#4E[a%e7jF\VWpn.qr$IiYjTm"bYKmJI'd67R1%Cl<COK(d\'PCO-0rf1YT"3S&g$3q+SAJC,*XK*G/^T%69J*=n^..@jD:4]p17fi5m+ok(jqp41pn+^81$[dP@D]I9D[/3r]LoTE(-X?!t9d2B,)VE&E.oD:T^@-N;,HihIrsiPf&#+4"H4Z%+p*S&.T`rjbi:BfTpR%J2-*>Y3ldfuQ5X4DCcWu:L_E@m?n<]rKF*+Db0l;PI'o0'SmIGB[2K?O]g_@]!$,$3Q)!J.]Fn=/CHp?K%&oUAJa5<luKiFVLh_@mu*/#>d+f_Bl,6F/Nk5*$/0VJRskX+AFR-c@cM;O.DI[O\4)dd;Oi4t60FKOLO(oHEH->G:^TisGjrSfdE%)GM%[M_.SGMa0J9eOPk^p/>*f/eN-%,s)u%$ZHnV8db:+8TZOHKM7?*'Z#Vc;WS(GH+,bZQ'82$R%j5Pl`BA7eJEq%!@C(?+K0S=%<D.Q@?o[7h!K?h724Q?)Q7GX1>re'ua8qXh&]fut7f^'r,4%&OH&r>E<H*7#jrrT,+Wn@?\VH3C\p[m=G]\1"3?;egZjI7RfgfHl%`cKFC<]`8%<G'-7m2j?)]^?/+-!='spc=#5Bl6DO'ssruF=[nn.3psC\6Z[P5R9kKOQ4:ZHnW-\F'#I&$P69H[53g(Y?+Ch2R7B)%aAO9K<QWW[fj6Y`.QJU:+jX9"YpK!@3S8E1?I%<2pMI2<O-AF0*A_5[p17h2!QP(q"&=5!:1>2%XP_1359$S!cgq<=&fi*of3KU=%#T^n*<>Uo?.7J[q^oFQBliS4i]+2/ir>O'EVH*23lB9\R7M!#RE6YQ'>..Olk"r&:9,0mVC!e&PS\)@Lk4@+K<LDIJkT5=Oa"uOB%gtTkS:k?gu_]#^=#5>5$OPmD*$;ut-DmX,:)E]p93D56;h6.9P#^P<(E`*$fL7rcI\Du)UO0M;=NbRUh@[$$GK<7Yq)73S%o;6Uo%m$_[R)o6m[T=(<&'X5Y3d/b+f#+05u=NcE?l/]RRn.&^//7sX;P*KW;K(->=f*kfe!lD+h!hnY&L*/?b/pV'2??30B1]m8[obk='%jO:bq^Kb3Pb"H<8=ip?g/&kcFAX0X@Wb8=]Q3Yqb:7i\CC5LDCJf%g=2ZdAQYSY6CB+O@;lN9dp(A:l[1_JpZTalKoH94i/'-H,^%a!tjCCNIpac!K94K(i)J/tWY#V-`>?kfo(a+e".bnB)7O0l>0K<+@UB#+apoGGPKD1-U"4hnBt7m&/mcU);TkY8HMqpCk07^]74A%ZtYO*NO9No(D\T+qg`g8>?2Pug32ao>j1dc&A2"Q@BZSt1(<b9N1+=notA=&c/*JGn[PYQ?ckQ\+R\[P2acMUAofa-2%H19BEQ1J%6]YaR(XN;OgftU!KP!_gHbBuQLChu7::Va5jSGO2fHC=u@0g7nejXAk84ijgKYBntUa;C`[36cJnq7RLL`cGUM83."KW5(c#ZF"$%;+P\'^dk++GR"N5Q\K>701bAM9mjd%kOIm-$jAuf!=1h@BN%d(1,.&XJ5@m0J'/`:!:hsmb_.8Md7DBF*SC7G4ZalE(Ce*u@KsXC%e*jZWW(J7T;ErV=7$UDbI^MiO$3Tr%cnRom%*%<@Rs_@&G8_.Dgd&I+0nD"lW(]?07T5gKd0(e+!P_!J&I=qi)Pdo-<?0AgR\Oo*%"Muj:B[g!dffd%!k`b]A0MG`T/IY,k!H\;AI/Z)1?.Bi`0C_t3U-u(nr=m..L`c[6#fO(RGS/<f\0!1Qe"5s$OQj;<p$4JaY"0%1%nQ&m[1`'"?b#TL5W:2]=--DsB)5&o%T7R4Gc?Wl:"cg]ICO2\:UWt)t8<.gi:MeHiIk0akH9lMp_0M%e5\J]_UQ2pI&+4M7i]J9n%PSAWO1Z>nTKK1Z9<2K0(OjV+6WGi2pdQH7U3da6Wl`A\R`cIHe\C=OTHN@R?4O3u"P;4jJd?)Np40enZ42Gl'@+6XV>un9cF&YWq%;nQ1.6o<f(/&7i0D##ZB9>t]29+?hOW&^<.6LnuMJHH&pi8&Km"G!sr'NC')MP=lHE]BS>E7qSikj9I5X[P(>l+O0`cXt'3FW`j4%+ro63[ei`'=<+&\lC:8+3c*coG8=NNP2C6T14q>PJ0aD@lbD3\Dr9=_Tql'E\=1f)MX%rOX@Z4m_?6!Cf\!]GX"n:5HA-GeQ.1+f%Vn,dZm1"=c#=H`hgD9=RZ*O:l1KUdr.rTucqL$U6E_9b[1U.%B2I<c'_$4hBU`Vd^r7c&JpAn-E4"e7Ki#utsc3AA((%B)dOhYVk%V38#^YU>s$WpReGIK=-X1N7Y'K2>EOWAmYZVNB)c4J?[6#^;=u4N(qSPB&/do]t#?I5@Ft3_Dk2r8r,%pKg\k/afA`$6Q,Qq5+ni%ER$*If[XZ,a%m@Of7_&(6q:j8g9YR]30B1cJQ3be"2!+%9_Up0YcPKa&,tFF!*e7c3Y.V"Ef/qK1lXDi@KE,6Jbpq"1S0**?OJCo%'a'Q&Qi,(:=M,%.;Q`an!fuma-+o?kjamn^X(2K?H>Ak-*`uL'=s-7)oQ_[.A/9pi"5UmK%?E54V9AoMS5Yd]GuC;8dqb4o">Ym`%NVf6o/77'fnJIZF)7D7c*HQ^BVB<P8BC'3SXKuDK1FD1(8%-m^-+cK@oFr2g6*ocIaCBrAQHbT!#DcgM^?s^bKAn_BJm"Z]E/n!b%\"Y&ARHB3&6)NSLGi%uKP.JM5jmV4J6$tqh.a>d+n!Vn%a'u"<SpgL5[ho>[%_7aD%+[3+gDE=?4n:P'7W\545=@I'9`<`=g?E+F%75&YM4lS7rjihW`4U6"DZ+r&>PX2OM#7m]-mkhSiCC]RbPK@uG?nS_cT[>SV+-ZN2],uN#2(<5fF_AtEqemE'e0[H)o`:[(-AfQi%`QVlFIgfl*"kkV,LfOGDYgY&o't,'F%Hd!k<Z>3'rAKDYnk;rCD=4FVq@$$4hIZeWF@WJlZqB:NYS=AY;KcYM(;sbM?pZ']-J(?A%Oo"im?tM1TJO10sn$*WgW!_g0ZB+baL74dF)M?8]$@6:"$GeJel';Jd^R:fMkA]9e.-mt](S)&o(mtP=(B]4)1a<>^`$DNpW.c_@%M.kn9;NY_=l!j=AVmVa,pQVQ0.F2J[n_PjC\sB.>cgMi)9uSXV\n2_IRUi\=5>^3e4&[ric1:3c3J&O?^`5.s%;Nth`&qR2d-'hK%RTCbF!255dK;%?S)`^B(@@*rtHjNM>_[b4qBM-,n+`]thfcUMJ_0$<kAs+kE.PRrNYD02FdC6=8,r_!A9+RVHYa1edIci=^*RsME%enc9>>J]6SS5^F9NTV=Y<M*5nE4>sON`<r2Z9oQj2qc'RF3!B5HA<Z@2%5OiDdZ$H]Wm`4D)GVF0K9>_:$:]rropa9Z^=<^GSU1e%i,MR-bJ1::W])Y2^dC"MnhSK6j)Z%JOHDM]ao?$H!`@>bXj&74#]Bt-1.6Fa(lO,Sl)27KeVnHI0Mq[1YXHjoAY*J.aG1s]&hAVE%B67_+R;d+FS?rm@G.G!1H4!78R+2^EY4,!f_K6n/k/>76]SGR.+I<WBb)ed]@5-RiDGN5o`8<@>4baDGm/_[4=.+g\SBTm%X,K[A%_?OQ*do=7&)U1PB@nJp\>d1CK(Q,L5"^DGY)no]XVL]G9nR^96+])n3YSBMmXE8ign-OZ+8>G"IaE@"fdF!8J:%a9l<13Nmb1pC1%Cste"$nlJC?SL8;<#Gk#GfN)E-0N0phZol)<QaS)e>6u0OL:ddjuQN.PQJDfCZI*Y3&9oHloH7!XJmt)F!b"C2obFUS+3=;Z_'pk%)=m).9/=G($r2tq@bHc7&a>et!+_t;fFbWe0$6@;S-";5^+QNtk.Tp(d-EV%]U*,FYG[6`+af-r2EIYT62Y':i*a9DKn:5\o%`%B%G5FK._HhWfAf/7U?ub\3l)`X\"$jTYQTUb*$3lJY]ROB^2[8q6VI*&Za"`_c>6h,3LZf_OhGY$CM5=`Z_Zg2@h-Y_h)q\7jMR17\%-R?RVOCrG$dnJ>KWZVZ<!N,0'V1@bk%LKUFI>O+`@R]4^!P*%Tb0lC/eSo@=CDdH([UX&R-<+qTF#bd>/6$)?im^`b^EqNt=mlB.%_qn,?Ah81`h\c!6^f(t_%[UM`g]1:>0!Hn9-QM$F&W>ug\6i1U`>CcS1J"aIb98"MNrn3_J0CD>=<o#apUj^m?mcr]CfX"Bmg0#n%/1JgQp8n;<H58sJUTgTH=D8X)?tSGHR<np#Wq$<b8n30TQ_J<k-0Fom+namiRe(;kCXhfMcE>&A+<.I_"]N\Ull?b.#(f]ld/;'c%9L02BcGsW[FZmKf0cro[Pn+KP0Z41s;<^s%bLJJa\uAO_\<iS:4Qo?:+2-AfUEcK_Y?4iC>7Fa_Fr6>[cJ:Y@0r#PU2-_@4#d[rZ%W2:=3ZWf!aYIVa@b>ZUc_1k:"`0-9?LU)&nIMn!M3jNca0P)>l-SGO;GA]GaPV%,6e`(_r'EgNDi+U7R!_n2j5O_H6W3u,TcWB^%%@Nm2\'VPYimAI$oZt>7hKN4N$P^<5hjMDLQSo7Cp[="Y6;4W0][cXS_%Gj5j`drs5J>EL/)U>id3RO3%TB6MBk^mkF*=1F1M35o!%>t=mDkV"S[F5K`OrnTh-%AFp6je$&T.1tYc!QOH%Z%VRe#ltVE>Y@IW9dQ$+aN'>XN$S/0RZ<Ik@#Q7%N0jg+M>FMs*:@tc"[J(b%9uto\J`0j0bRfsDA8I+P_g@F+=k[Z\O9-e4`&+e$MQ%kQ0*4Ha',]2cO$=)&Mj868;S8))_W])>@pE!b*>h4e[N'2D#oO2g,HWjL%jPXINin:?dPi2?O'4Nn$'V9!S@(?;e>"Ni:dHLp2@'h$fP"@(1$tXYc=VaK?'bJ\cI\s&Z$oeE`E59UuH+-UVNn),>fOe<'W_51S%B@nX@_0]JCc[MfC]-%]!K0U>AQhfm9MI2R\!#R\9+:Jm";>N(kgW<WA7TrLdj]u9d@so.oP<,f,"9p!!.Y's]#i+96blO1K'qB/,%P[/t&2"Y,'39@(=!fSRCNi/m,6#ne8:2[REZ=rLiFif6nZo5dI"/J[hKir=/8umq/%I3=T+9P?#O#@!k[L;N_l+J><dU&CbN-4%c%KYo7_3b\c)K&ZuJ^cbfodId.WEV6KOmtch\8k#!GClr(X9O?W18FOKa$()/&l^GW5%iT'IR1D\$<fj#Td?O&2[XtOG.6s+R""Y=3%1Eb"p>W.3.SC6qPC5TK.0+e?nX%-[/X&As]Y79*(A.p*J"7_dajfWSGbm(<ekd_>u&3Zf8?$LSafB=I]Y>!L1AWu>M:q@W.JT+\2%#*CqR8=%Tt*N=nB@9Etr/)+K_*HP#W3GA''"D^q*D'lLf;E?B=G&mT?HTmNDjXe5Ii;giKV-\QOY3N]obgS@&$/;SWLQtW_Z9+a&%6-7%3VO`s,oVLtfqE1sFDcp5(o5Q2XjELsXr0Ims-B(^lSERO@EqZ;><Vk^C#n8mL`RrOoM*;"QK5Ekld3*Zt1N:[CqZr>bf*q^[%;G!WshsrtJI1M!TYqDgq,eIOnbQf>AN54;,dD_EL6]u-&2Yl&^bK6W^G>NH;]>OPX@p*@K1e=6^jl0FjTeV]?(:`?H0+EG)dR0-:%Q"^$.2rK+8qAT7)Hciu0KW0i[d$(!ONuTY_D:YJQlXDp%%L&P7L4;LfEd7HcQFnr>r12Yt)`bB"B*/dc0CL9Zg.BTFM'i(peP/d[%8;3+NA'lnAY?F(Vr[eObHmcq7MflmoVEJ5AFHUr0i1k5L9Zr4*J&'.FUu?F\f[:m>?@\bE\=mMWnNiQ$LBeFP/i8@n!HKVt:-,MS%($Z)e9YXd+?>#6M@l+;72I(,hH:B3tBq'W,`hS1Cqln(dOKc]@I"cgb,=&sr7Fa)Bcu!YD3[hS!\Eb:Rfc^F))+Y(?]3eu7^4%%/%4`'$I&jh't,2#1%]kY89KtMoKRRhWIc'lrP!K-R%7dOd(^Z/cI%1>S)T5qJAYL/U6"LE>m``fk_5W.[l2uB@Zk'c;8K;,ebQKe6O%(e52U/l!UEiZ:4<E?bS%eP&AY/[8nrKD,BY7]0ZF@H:_p=\rHZOD9V!eZ!K9g]O@]@B!W#'!U);<\fjC&>"A>@!+r"Bm)_;rY#[=%+)bK^4G>$YTMI$YY)+H#qs`k;;^gF#X#$rWiUUYCpS"=EhaqCO]-#PBMI]!0+Rf4D6f&aI.Wn+m`G^Il"(ADCU0/UK!h^,=M!O=,%,9t:A*_DXGE.MMV"1*GCibU_3#*f`;.G!KT".4*7lZJ6\H]0^*#3Qj^1YY]ZAkI3bU6H+R.I*G<4N/1H$PHZ-FTMOtc'QL_A0"DR%mf>b(PtN,=H5PVZ"]N!+1)b9^n`!ZqY#1f(9K<TI;T@M_'e_Dhl"+osI7_q3g+@S@A8X$$&"R-,/Om2g9d!WG9VHbpjik\+>gQ<L%cPZtN08*tZ1[eUH.G!P/TUGcM.J!2o>gZ\1mH.A\<8ch.d>K;)+M*]5p&G(Q=4Shf0+p;k]uF#I5T'"<i0k-Rjor#FidopCH9&]m%ck-Q#qtKNW/\N+RR@!DV[Y'*kc5G#-;3IjU'UBTsnG!PnD,T0A5K<&^n75]s@L6SF`6mq2m*;/hL1#K[L2$\E*mEH=)"QMPR$B=G%p\)jZEgFON(HZ%.P66srh\&\_<PK2GLga"Qat^<8Ur%-k'pc5'OOLK@W$3b(W1;7+;dI?JdtkXZc#VZt0ioa;Utd@e"g-G"SkNU\%gmLcXbqkn,2Tfrre\E6kU9Z69S>Z:A`@9,dGF._&EBEf<aSM3?)CDWq[\pTLXq#Hr3p!De5`5A"dnsX(Yu^@Ad1R;O,e<=]eJpG6%1'unH'#jtro'6H8`Y^8KgLf_f]3B>([ZVd8S/DI]!DtOagoMbtVg/Dl>a(hgCea@dn@CVa+BIcq)0$DA<24\K*U)F2_#FFD!5e"U%3,1KEmNDR@C1BD;q*?*S.IP?p>1BLS#`S$FfI0R5);3%m:XggOYS(E:&3Z#FY;#GS,K\pO5XYq+9>%im]#(03dLGNJAVHHsh<.SP%=830CRmnCrcrEMl!!j76n:Iu`$_tWBTfD-o>JQn?*7_ae99_4KUA)V$SPLu!O"I#Wm$1Qi)@2OBBdi4WXNM6%E\;"9VW'g#P3tP+%(C_Y=o(+p0nsI$59FR[_#J_kEV[:!F/gh,^HlRA_c"OOPC2m%t9FWdH2I_<^<(=n!U-p'Mlcu\0O_EfE$&]s$$R(5YPqk(S[$lr1%VjIOLNQS*4+sB*fX=6@9G>G-ReMQh^k]=Rkg[@uY,!V6jIZI)#+LH,sZfP@?,OBCeKlm.WV7#Pn=OrdM*=)_.._29pe)2qe,8$pO%`9qNs%pOSj89W/<R[FhoYN1PfFJT3*kN$(W@hIKbNa9ZX)FZm2?ooDH%(?GhBTik&^HhEtlqTc%m%maJj-E^`*QBOcT(/?"Y?`nG%n2+Yq#nBX8l-)LdBlg;eZE5mK,<KRUU/e'NDM;P->#'@)&So.0eC3P)/ZS)n(aACJXO9A&jQfN1I^sO/.rL*jNHBVRg3u3;<;bss%EkXqm20sF"GF0nK60>D.j>hm)2MV"DQ&stAcEIH,75'-<4c6]M6^_*p9_BD4bfjkH++kJ%6!._=2CSkuag3J-g^06L-m7m3ddKVO%B6^YCpt8G#;$>(+0Z/60A7/?(%(oZYPgng3O].9JR;f<2#_\M5Ofo!j,tRMu]SjA0*e'-i#fb:9SnO?n6S[RkTZ`(*[Df4pRChRc%![#6dkt)?_HGp_58OV>Kgs9uR&=M6`$oQHubD-cj2'!`gn;rCWK1<R!b(k@PcADTi@6;[b2[D+uJ;ZrB'k\+IQ-jS(/9FgA"n^fR%eK(P%?j,rSMY'$&Eq!QZibC3FSr-_Tcj.UZ8_299"qH>'+m,hX`upQ*/APZ-I5AZ\=kQRt3g]h,ThG7?qgfJpi+4F[i"bE=!l@k*%,.Vf$,,a+a,.2(f#,3q:bS)q>$#\33JS7U+!r#W4E:``nTn-->:!3@'dX2dFXr*YYCJa7(C=qR>*l!+DKJ3<Shu21(^\[JiJ,)=:%s8?=)h1'bNh>dBL5Q6Rjn`)RCq4E02\%hrMs7j5+it&p)j,^tRLYr%p^]4,A^\bXXs2X$qj7!#Ok?i];m2piX&-)G!J,K8kJ+t[H%s%bnO=5rc-r8qAdgV<UTrrGuj%oN~>%AI9_PrivateDataEnd